//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Categoria2))]
    [KnownType(typeof(Log1))]
    public partial class CategoriaLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CategoryLogID
        {
            get { return _categoryLogID; }
            set
            {
                if (_categoryLogID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CategoryLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _categoryLogID = value;
                    OnPropertyChanged("CategoryLogID");
                }
            }
        }
        private int _categoryLogID;
    
        [DataMember]
        public int CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    ChangeTracker.RecordOriginalValue("CategoryID", _categoryID);
                    if (!IsDeserializing)
                    {
                        if (Categoria2 != null && Categoria2.CategoryID != value)
                        {
                            Categoria2 = null;
                        }
                    }
                    _categoryID = value;
                    OnPropertyChanged("CategoryID");
                }
            }
        }
        private int _categoryID;
    
        [DataMember]
        public int LogID
        {
            get { return _logID; }
            set
            {
                if (_logID != value)
                {
                    ChangeTracker.RecordOriginalValue("LogID", _logID);
                    if (!IsDeserializing)
                    {
                        if (Log1 != null && Log1.LogID != value)
                        {
                            Log1 = null;
                        }
                    }
                    _logID = value;
                    OnPropertyChanged("LogID");
                }
            }
        }
        private int _logID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Categoria2 Categoria2
        {
            get { return _categoria2; }
            set
            {
                if (!ReferenceEquals(_categoria2, value))
                {
                    var previousValue = _categoria2;
                    _categoria2 = value;
                    FixupCategoria2(previousValue);
                    OnNavigationPropertyChanged("Categoria2");
                }
            }
        }
        private Categoria2 _categoria2;
    
        [DataMember]
        public Log1 Log1
        {
            get { return _log1; }
            set
            {
                if (!ReferenceEquals(_log1, value))
                {
                    var previousValue = _log1;
                    _log1 = value;
                    FixupLog1(previousValue);
                    OnNavigationPropertyChanged("Log1");
                }
            }
        }
        private Log1 _log1;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Categoria2 = null;
            Log1 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCategoria2(Categoria2 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CategoriaLogs.Contains(this))
            {
                previousValue.CategoriaLogs.Remove(this);
            }
    
            if (Categoria2 != null)
            {
                if (!Categoria2.CategoriaLogs.Contains(this))
                {
                    Categoria2.CategoriaLogs.Add(this);
                }
    
                CategoryID = Categoria2.CategoryID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Categoria2")
                    && (ChangeTracker.OriginalValues["Categoria2"] == Categoria2))
                {
                    ChangeTracker.OriginalValues.Remove("Categoria2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Categoria2", previousValue);
                }
                if (Categoria2 != null && !Categoria2.ChangeTracker.ChangeTrackingEnabled)
                {
                    Categoria2.StartTracking();
                }
            }
        }
    
        private void FixupLog1(Log1 previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CategoriaLogs.Contains(this))
            {
                previousValue.CategoriaLogs.Remove(this);
            }
    
            if (Log1 != null)
            {
                if (!Log1.CategoriaLogs.Contains(this))
                {
                    Log1.CategoriaLogs.Add(this);
                }
    
                LogID = Log1.LogID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Log1")
                    && (ChangeTracker.OriginalValues["Log1"] == Log1))
                {
                    ChangeTracker.OriginalValues.Remove("Log1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Log1", previousValue);
                }
                if (Log1 != null && !Log1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Log1.StartTracking();
                }
            }
        }

        #endregion
    }
}
