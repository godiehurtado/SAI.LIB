//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AuditoriaAjuste))]
    [KnownType(typeof(JerarquiaDetalle))]
    [KnownType(typeof(LiquidacionContratacion))]
    public partial class LiquiContratFactorParticipante: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> liqui_contrat_id
        {
            get { return _liqui_contrat_id; }
            set
            {
                if (_liqui_contrat_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liqui_contrat_id", _liqui_contrat_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionContratacion != null && LiquidacionContratacion.id != value)
                        {
                            LiquidacionContratacion = null;
                        }
                    }
                    _liqui_contrat_id = value;
                    OnPropertyChanged("liqui_contrat_id");
                }
            }
        }
        private Nullable<int> _liqui_contrat_id;
    
        [DataMember]
        public Nullable<int> modelo_id
        {
            get { return _modelo_id; }
            set
            {
                if (_modelo_id != value)
                {
                    _modelo_id = value;
                    OnPropertyChanged("modelo_id");
                }
            }
        }
        private Nullable<int> _modelo_id;
    
        [DataMember]
        public Nullable<int> jerarquiaDetalle_id
        {
            get { return _jerarquiaDetalle_id; }
            set
            {
                if (_jerarquiaDetalle_id != value)
                {
                    ChangeTracker.RecordOriginalValue("jerarquiaDetalle_id", _jerarquiaDetalle_id);
                    if (!IsDeserializing)
                    {
                        if (JerarquiaDetalle != null && JerarquiaDetalle.id != value)
                        {
                            JerarquiaDetalle = null;
                        }
                    }
                    _jerarquiaDetalle_id = value;
                    OnPropertyChanged("jerarquiaDetalle_id");
                }
            }
        }
        private Nullable<int> _jerarquiaDetalle_id;
    
        [DataMember]
        public Nullable<double> notaDefinitiva
        {
            get { return _notaDefinitiva; }
            set
            {
                if (_notaDefinitiva != value)
                {
                    _notaDefinitiva = value;
                    OnPropertyChanged("notaDefinitiva");
                }
            }
        }
        private Nullable<double> _notaDefinitiva;
    
        [DataMember]
        public Nullable<double> factor
        {
            get { return _factor; }
            set
            {
                if (_factor != value)
                {
                    _factor = value;
                    OnPropertyChanged("factor");
                }
            }
        }
        private Nullable<double> _factor;
    
        [DataMember]
        public Nullable<double> salarioBase
        {
            get { return _salarioBase; }
            set
            {
                if (_salarioBase != value)
                {
                    _salarioBase = value;
                    OnPropertyChanged("salarioBase");
                }
            }
        }
        private Nullable<double> _salarioBase;
    
        [DataMember]
        public Nullable<double> valorIncremento
        {
            get { return _valorIncremento; }
            set
            {
                if (_valorIncremento != value)
                {
                    _valorIncremento = value;
                    OnPropertyChanged("valorIncremento");
                }
            }
        }
        private Nullable<double> _valorIncremento;
    
        [DataMember]
        public Nullable<double> salarioTotal
        {
            get { return _salarioTotal; }
            set
            {
                if (_salarioTotal != value)
                {
                    _salarioTotal = value;
                    OnPropertyChanged("salarioTotal");
                }
            }
        }
        private Nullable<double> _salarioTotal;
    
        [DataMember]
        public Nullable<double> valorFVD
        {
            get { return _valorFVD; }
            set
            {
                if (_valorFVD != value)
                {
                    _valorFVD = value;
                    OnPropertyChanged("valorFVD");
                }
            }
        }
        private Nullable<double> _valorFVD;
    
        [DataMember]
        public Nullable<double> valorFVC
        {
            get { return _valorFVC; }
            set
            {
                if (_valorFVC != value)
                {
                    _valorFVC = value;
                    OnPropertyChanged("valorFVC");
                }
            }
        }
        private Nullable<double> _valorFVC;
    
        [DataMember]
        public Nullable<double> totalPago
        {
            get { return _totalPago; }
            set
            {
                if (_totalPago != value)
                {
                    _totalPago = value;
                    OnPropertyChanged("totalPago");
                }
            }
        }
        private Nullable<double> _totalPago;
    
        [DataMember]
        public Nullable<double> valorAjuste
        {
            get { return _valorAjuste; }
            set
            {
                if (_valorAjuste != value)
                {
                    _valorAjuste = value;
                    OnPropertyChanged("valorAjuste");
                }
            }
        }
        private Nullable<double> _valorAjuste;
    
        [DataMember]
        public Nullable<double> totalAjuste
        {
            get { return _totalAjuste; }
            set
            {
                if (_totalAjuste != value)
                {
                    _totalAjuste = value;
                    OnPropertyChanged("totalAjuste");
                }
            }
        }
        private Nullable<double> _totalAjuste;
    
        [DataMember]
        public Nullable<int> porcentajeSalario
        {
            get { return _porcentajeSalario; }
            set
            {
                if (_porcentajeSalario != value)
                {
                    _porcentajeSalario = value;
                    OnPropertyChanged("porcentajeSalario");
                }
            }
        }
        private Nullable<int> _porcentajeSalario;
    
        [DataMember]
        public Nullable<int> porcentajeParticipaciones
        {
            get { return _porcentajeParticipaciones; }
            set
            {
                if (_porcentajeParticipaciones != value)
                {
                    _porcentajeParticipaciones = value;
                    OnPropertyChanged("porcentajeParticipaciones");
                }
            }
        }
        private Nullable<int> _porcentajeParticipaciones;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AuditoriaAjuste> AuditoriaAjustes
        {
            get
            {
                if (_auditoriaAjustes == null)
                {
                    _auditoriaAjustes = new TrackableCollection<AuditoriaAjuste>();
                    _auditoriaAjustes.CollectionChanged += FixupAuditoriaAjustes;
                }
                return _auditoriaAjustes;
            }
            set
            {
                if (!ReferenceEquals(_auditoriaAjustes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_auditoriaAjustes != null)
                    {
                        _auditoriaAjustes.CollectionChanged -= FixupAuditoriaAjustes;
                    }
                    _auditoriaAjustes = value;
                    if (_auditoriaAjustes != null)
                    {
                        _auditoriaAjustes.CollectionChanged += FixupAuditoriaAjustes;
                    }
                    OnNavigationPropertyChanged("AuditoriaAjustes");
                }
            }
        }
        private TrackableCollection<AuditoriaAjuste> _auditoriaAjustes;
    
        [DataMember]
        public JerarquiaDetalle JerarquiaDetalle
        {
            get { return _jerarquiaDetalle; }
            set
            {
                if (!ReferenceEquals(_jerarquiaDetalle, value))
                {
                    var previousValue = _jerarquiaDetalle;
                    _jerarquiaDetalle = value;
                    FixupJerarquiaDetalle(previousValue);
                    OnNavigationPropertyChanged("JerarquiaDetalle");
                }
            }
        }
        private JerarquiaDetalle _jerarquiaDetalle;
    
        [DataMember]
        public LiquidacionContratacion LiquidacionContratacion
        {
            get { return _liquidacionContratacion; }
            set
            {
                if (!ReferenceEquals(_liquidacionContratacion, value))
                {
                    var previousValue = _liquidacionContratacion;
                    _liquidacionContratacion = value;
                    FixupLiquidacionContratacion(previousValue);
                    OnNavigationPropertyChanged("LiquidacionContratacion");
                }
            }
        }
        private LiquidacionContratacion _liquidacionContratacion;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AuditoriaAjustes.Clear();
            JerarquiaDetalle = null;
            LiquidacionContratacion = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupJerarquiaDetalle(JerarquiaDetalle previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquiContratFactorParticipantes.Contains(this))
            {
                previousValue.LiquiContratFactorParticipantes.Remove(this);
            }
    
            if (JerarquiaDetalle != null)
            {
                if (!JerarquiaDetalle.LiquiContratFactorParticipantes.Contains(this))
                {
                    JerarquiaDetalle.LiquiContratFactorParticipantes.Add(this);
                }
    
                jerarquiaDetalle_id = JerarquiaDetalle.id;
            }
            else if (!skipKeys)
            {
                jerarquiaDetalle_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("JerarquiaDetalle")
                    && (ChangeTracker.OriginalValues["JerarquiaDetalle"] == JerarquiaDetalle))
                {
                    ChangeTracker.OriginalValues.Remove("JerarquiaDetalle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("JerarquiaDetalle", previousValue);
                }
                if (JerarquiaDetalle != null && !JerarquiaDetalle.ChangeTracker.ChangeTrackingEnabled)
                {
                    JerarquiaDetalle.StartTracking();
                }
            }
        }
    
        private void FixupLiquidacionContratacion(LiquidacionContratacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquiContratFactorParticipantes.Contains(this))
            {
                previousValue.LiquiContratFactorParticipantes.Remove(this);
            }
    
            if (LiquidacionContratacion != null)
            {
                if (!LiquidacionContratacion.LiquiContratFactorParticipantes.Contains(this))
                {
                    LiquidacionContratacion.LiquiContratFactorParticipantes.Add(this);
                }
    
                liqui_contrat_id = LiquidacionContratacion.id;
            }
            else if (!skipKeys)
            {
                liqui_contrat_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionContratacion")
                    && (ChangeTracker.OriginalValues["LiquidacionContratacion"] == LiquidacionContratacion))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionContratacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionContratacion", previousValue);
                }
                if (LiquidacionContratacion != null && !LiquidacionContratacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionContratacion.StartTracking();
                }
            }
        }
    
        private void FixupAuditoriaAjustes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AuditoriaAjuste item in e.NewItems)
                {
                    item.LiquiContratFactorParticipante = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AuditoriaAjustes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AuditoriaAjuste item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquiContratFactorParticipante, this))
                    {
                        item.LiquiContratFactorParticipante = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AuditoriaAjustes", item);
                    }
                }
            }
        }

        #endregion
    }
}
