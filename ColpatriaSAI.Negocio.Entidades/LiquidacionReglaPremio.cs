//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LiquidacionRegla))]
    [KnownType(typeof(Premio))]
    [KnownType(typeof(Participante))]
    public partial class LiquidacionReglaPremio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int liquidacionrelga_id
        {
            get { return _liquidacionrelga_id; }
            set
            {
                if (_liquidacionrelga_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquidacionrelga_id", _liquidacionrelga_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionRegla != null && LiquidacionRegla.id != value)
                        {
                            LiquidacionRegla = null;
                        }
                    }
                    _liquidacionrelga_id = value;
                    OnPropertyChanged("liquidacionrelga_id");
                }
            }
        }
        private int _liquidacionrelga_id;
    
        [DataMember]
        public int participante_id
        {
            get { return _participante_id; }
            set
            {
                if (_participante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("participante_id", _participante_id);
                    if (!IsDeserializing)
                    {
                        if (Participante != null && Participante.id != value)
                        {
                            Participante = null;
                        }
                    }
                    _participante_id = value;
                    OnPropertyChanged("participante_id");
                }
            }
        }
        private int _participante_id;
    
        [DataMember]
        public int premio_id
        {
            get { return _premio_id; }
            set
            {
                if (_premio_id != value)
                {
                    ChangeTracker.RecordOriginalValue("premio_id", _premio_id);
                    if (!IsDeserializing)
                    {
                        if (Premio != null && Premio.id != value)
                        {
                            Premio = null;
                        }
                    }
                    _premio_id = value;
                    OnPropertyChanged("premio_id");
                }
            }
        }
        private int _premio_id;
    
        [DataMember]
        public Nullable<double> valorPremio
        {
            get { return _valorPremio; }
            set
            {
                if (_valorPremio != value)
                {
                    _valorPremio = value;
                    OnPropertyChanged("valorPremio");
                }
            }
        }
        private Nullable<double> _valorPremio;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public LiquidacionRegla LiquidacionRegla
        {
            get { return _liquidacionRegla; }
            set
            {
                if (!ReferenceEquals(_liquidacionRegla, value))
                {
                    var previousValue = _liquidacionRegla;
                    _liquidacionRegla = value;
                    FixupLiquidacionRegla(previousValue);
                    OnNavigationPropertyChanged("LiquidacionRegla");
                }
            }
        }
        private LiquidacionRegla _liquidacionRegla;
    
        [DataMember]
        public Premio Premio
        {
            get { return _premio; }
            set
            {
                if (!ReferenceEquals(_premio, value))
                {
                    var previousValue = _premio;
                    _premio = value;
                    FixupPremio(previousValue);
                    OnNavigationPropertyChanged("Premio");
                }
            }
        }
        private Premio _premio;
    
        [DataMember]
        public Participante Participante
        {
            get { return _participante; }
            set
            {
                if (!ReferenceEquals(_participante, value))
                {
                    var previousValue = _participante;
                    _participante = value;
                    FixupParticipante(previousValue);
                    OnNavigationPropertyChanged("Participante");
                }
            }
        }
        private Participante _participante;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LiquidacionRegla = null;
            Premio = null;
            Participante = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLiquidacionRegla(LiquidacionRegla previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaPremios.Contains(this))
            {
                previousValue.LiquidacionReglaPremios.Remove(this);
            }
    
            if (LiquidacionRegla != null)
            {
                if (!LiquidacionRegla.LiquidacionReglaPremios.Contains(this))
                {
                    LiquidacionRegla.LiquidacionReglaPremios.Add(this);
                }
    
                liquidacionrelga_id = LiquidacionRegla.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionRegla")
                    && (ChangeTracker.OriginalValues["LiquidacionRegla"] == LiquidacionRegla))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionRegla", previousValue);
                }
                if (LiquidacionRegla != null && !LiquidacionRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionRegla.StartTracking();
                }
            }
        }
    
        private void FixupPremio(Premio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaPremios.Contains(this))
            {
                previousValue.LiquidacionReglaPremios.Remove(this);
            }
    
            if (Premio != null)
            {
                if (!Premio.LiquidacionReglaPremios.Contains(this))
                {
                    Premio.LiquidacionReglaPremios.Add(this);
                }
    
                premio_id = Premio.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Premio")
                    && (ChangeTracker.OriginalValues["Premio"] == Premio))
                {
                    ChangeTracker.OriginalValues.Remove("Premio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Premio", previousValue);
                }
                if (Premio != null && !Premio.ChangeTracker.ChangeTrackingEnabled)
                {
                    Premio.StartTracking();
                }
            }
        }
    
        private void FixupParticipante(Participante previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaPremios.Contains(this))
            {
                previousValue.LiquidacionReglaPremios.Remove(this);
            }
    
            if (Participante != null)
            {
                if (!Participante.LiquidacionReglaPremios.Contains(this))
                {
                    Participante.LiquidacionReglaPremios.Add(this);
                }
    
                participante_id = Participante.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Participante")
                    && (ChangeTracker.OriginalValues["Participante"] == Participante))
                {
                    ChangeTracker.OriginalValues.Remove("Participante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Participante", previousValue);
                }
                if (Participante != null && !Participante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Participante.StartTracking();
                }
            }
        }

        #endregion
    }
}
