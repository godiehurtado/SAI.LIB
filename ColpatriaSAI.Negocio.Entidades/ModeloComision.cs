//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ExcepcionFijaVariable))]
    [KnownType(typeof(ExcepcionPenalizacion))]
    [KnownType(typeof(FactorComisionFija))]
    [KnownType(typeof(FactorComisionVariableNeto))]
    [KnownType(typeof(FactorComisionVariableNuevo))]
    [KnownType(typeof(LiquidacionComision))]
    [KnownType(typeof(MatrizComisionVariable))]
    [KnownType(typeof(CanalDetalle))]
    [KnownType(typeof(CanalDetalleTipoIntermediario))]
    public partial class ModeloComision: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public System.DateTime fechadesde
        {
            get { return _fechadesde; }
            set
            {
                if (_fechadesde != value)
                {
                    _fechadesde = value;
                    OnPropertyChanged("fechadesde");
                }
            }
        }
        private System.DateTime _fechadesde;
    
        [DataMember]
        public System.DateTime fechahasta
        {
            get { return _fechahasta; }
            set
            {
                if (_fechahasta != value)
                {
                    _fechahasta = value;
                    OnPropertyChanged("fechahasta");
                }
            }
        }
        private System.DateTime _fechahasta;
    
        [DataMember]
        public string codigo
        {
            get { return _codigo; }
            set
            {
                if (_codigo != value)
                {
                    _codigo = value;
                    OnPropertyChanged("codigo");
                }
            }
        }
        private string _codigo;
    
        [DataMember]
        public double tope
        {
            get { return _tope; }
            set
            {
                if (_tope != value)
                {
                    _tope = value;
                    OnPropertyChanged("tope");
                }
            }
        }
        private double _tope;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<ExcepcionFijaVariable> ExcepcionFijaVariables
        {
            get
            {
                if (_excepcionFijaVariables == null)
                {
                    _excepcionFijaVariables = new TrackableCollection<ExcepcionFijaVariable>();
                    _excepcionFijaVariables.CollectionChanged += FixupExcepcionFijaVariables;
                }
                return _excepcionFijaVariables;
            }
            set
            {
                if (!ReferenceEquals(_excepcionFijaVariables, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_excepcionFijaVariables != null)
                    {
                        _excepcionFijaVariables.CollectionChanged -= FixupExcepcionFijaVariables;
                    }
                    _excepcionFijaVariables = value;
                    if (_excepcionFijaVariables != null)
                    {
                        _excepcionFijaVariables.CollectionChanged += FixupExcepcionFijaVariables;
                    }
                    OnNavigationPropertyChanged("ExcepcionFijaVariables");
                }
            }
        }
        private TrackableCollection<ExcepcionFijaVariable> _excepcionFijaVariables;
    
        [DataMember]
        public TrackableCollection<ExcepcionPenalizacion> ExcepcionPenalizacions
        {
            get
            {
                if (_excepcionPenalizacions == null)
                {
                    _excepcionPenalizacions = new TrackableCollection<ExcepcionPenalizacion>();
                    _excepcionPenalizacions.CollectionChanged += FixupExcepcionPenalizacions;
                }
                return _excepcionPenalizacions;
            }
            set
            {
                if (!ReferenceEquals(_excepcionPenalizacions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_excepcionPenalizacions != null)
                    {
                        _excepcionPenalizacions.CollectionChanged -= FixupExcepcionPenalizacions;
                    }
                    _excepcionPenalizacions = value;
                    if (_excepcionPenalizacions != null)
                    {
                        _excepcionPenalizacions.CollectionChanged += FixupExcepcionPenalizacions;
                    }
                    OnNavigationPropertyChanged("ExcepcionPenalizacions");
                }
            }
        }
        private TrackableCollection<ExcepcionPenalizacion> _excepcionPenalizacions;
    
        [DataMember]
        public TrackableCollection<FactorComisionFija> FactorComisionFijas
        {
            get
            {
                if (_factorComisionFijas == null)
                {
                    _factorComisionFijas = new TrackableCollection<FactorComisionFija>();
                    _factorComisionFijas.CollectionChanged += FixupFactorComisionFijas;
                }
                return _factorComisionFijas;
            }
            set
            {
                if (!ReferenceEquals(_factorComisionFijas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_factorComisionFijas != null)
                    {
                        _factorComisionFijas.CollectionChanged -= FixupFactorComisionFijas;
                    }
                    _factorComisionFijas = value;
                    if (_factorComisionFijas != null)
                    {
                        _factorComisionFijas.CollectionChanged += FixupFactorComisionFijas;
                    }
                    OnNavigationPropertyChanged("FactorComisionFijas");
                }
            }
        }
        private TrackableCollection<FactorComisionFija> _factorComisionFijas;
    
        [DataMember]
        public TrackableCollection<FactorComisionVariableNeto> FactorComisionVariableNetoes
        {
            get
            {
                if (_factorComisionVariableNetoes == null)
                {
                    _factorComisionVariableNetoes = new TrackableCollection<FactorComisionVariableNeto>();
                    _factorComisionVariableNetoes.CollectionChanged += FixupFactorComisionVariableNetoes;
                }
                return _factorComisionVariableNetoes;
            }
            set
            {
                if (!ReferenceEquals(_factorComisionVariableNetoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_factorComisionVariableNetoes != null)
                    {
                        _factorComisionVariableNetoes.CollectionChanged -= FixupFactorComisionVariableNetoes;
                    }
                    _factorComisionVariableNetoes = value;
                    if (_factorComisionVariableNetoes != null)
                    {
                        _factorComisionVariableNetoes.CollectionChanged += FixupFactorComisionVariableNetoes;
                    }
                    OnNavigationPropertyChanged("FactorComisionVariableNetoes");
                }
            }
        }
        private TrackableCollection<FactorComisionVariableNeto> _factorComisionVariableNetoes;
    
        [DataMember]
        public TrackableCollection<FactorComisionVariableNuevo> FactorComisionVariableNuevoes
        {
            get
            {
                if (_factorComisionVariableNuevoes == null)
                {
                    _factorComisionVariableNuevoes = new TrackableCollection<FactorComisionVariableNuevo>();
                    _factorComisionVariableNuevoes.CollectionChanged += FixupFactorComisionVariableNuevoes;
                }
                return _factorComisionVariableNuevoes;
            }
            set
            {
                if (!ReferenceEquals(_factorComisionVariableNuevoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_factorComisionVariableNuevoes != null)
                    {
                        _factorComisionVariableNuevoes.CollectionChanged -= FixupFactorComisionVariableNuevoes;
                    }
                    _factorComisionVariableNuevoes = value;
                    if (_factorComisionVariableNuevoes != null)
                    {
                        _factorComisionVariableNuevoes.CollectionChanged += FixupFactorComisionVariableNuevoes;
                    }
                    OnNavigationPropertyChanged("FactorComisionVariableNuevoes");
                }
            }
        }
        private TrackableCollection<FactorComisionVariableNuevo> _factorComisionVariableNuevoes;
    
        [DataMember]
        public TrackableCollection<LiquidacionComision> LiquidacionComisions
        {
            get
            {
                if (_liquidacionComisions == null)
                {
                    _liquidacionComisions = new TrackableCollection<LiquidacionComision>();
                    _liquidacionComisions.CollectionChanged += FixupLiquidacionComisions;
                }
                return _liquidacionComisions;
            }
            set
            {
                if (!ReferenceEquals(_liquidacionComisions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquidacionComisions != null)
                    {
                        _liquidacionComisions.CollectionChanged -= FixupLiquidacionComisions;
                    }
                    _liquidacionComisions = value;
                    if (_liquidacionComisions != null)
                    {
                        _liquidacionComisions.CollectionChanged += FixupLiquidacionComisions;
                    }
                    OnNavigationPropertyChanged("LiquidacionComisions");
                }
            }
        }
        private TrackableCollection<LiquidacionComision> _liquidacionComisions;
    
        [DataMember]
        public TrackableCollection<MatrizComisionVariable> MatrizComisionVariables
        {
            get
            {
                if (_matrizComisionVariables == null)
                {
                    _matrizComisionVariables = new TrackableCollection<MatrizComisionVariable>();
                    _matrizComisionVariables.CollectionChanged += FixupMatrizComisionVariables;
                }
                return _matrizComisionVariables;
            }
            set
            {
                if (!ReferenceEquals(_matrizComisionVariables, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_matrizComisionVariables != null)
                    {
                        _matrizComisionVariables.CollectionChanged -= FixupMatrizComisionVariables;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (MatrizComisionVariable item in _matrizComisionVariables)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _matrizComisionVariables = value;
                    if (_matrizComisionVariables != null)
                    {
                        _matrizComisionVariables.CollectionChanged += FixupMatrizComisionVariables;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (MatrizComisionVariable item in _matrizComisionVariables)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("MatrizComisionVariables");
                }
            }
        }
        private TrackableCollection<MatrizComisionVariable> _matrizComisionVariables;
    
        [DataMember]
        public TrackableCollection<CanalDetalle> CanalDetalles
        {
            get
            {
                if (_canalDetalles == null)
                {
                    _canalDetalles = new TrackableCollection<CanalDetalle>();
                    _canalDetalles.CollectionChanged += FixupCanalDetalles;
                }
                return _canalDetalles;
            }
            set
            {
                if (!ReferenceEquals(_canalDetalles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_canalDetalles != null)
                    {
                        _canalDetalles.CollectionChanged -= FixupCanalDetalles;
                    }
                    _canalDetalles = value;
                    if (_canalDetalles != null)
                    {
                        _canalDetalles.CollectionChanged += FixupCanalDetalles;
                    }
                    OnNavigationPropertyChanged("CanalDetalles");
                }
            }
        }
        private TrackableCollection<CanalDetalle> _canalDetalles;
    
        [DataMember]
        public TrackableCollection<CanalDetalleTipoIntermediario> CanalDetalleTipoIntermediarios
        {
            get
            {
                if (_canalDetalleTipoIntermediarios == null)
                {
                    _canalDetalleTipoIntermediarios = new TrackableCollection<CanalDetalleTipoIntermediario>();
                    _canalDetalleTipoIntermediarios.CollectionChanged += FixupCanalDetalleTipoIntermediarios;
                }
                return _canalDetalleTipoIntermediarios;
            }
            set
            {
                if (!ReferenceEquals(_canalDetalleTipoIntermediarios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_canalDetalleTipoIntermediarios != null)
                    {
                        _canalDetalleTipoIntermediarios.CollectionChanged -= FixupCanalDetalleTipoIntermediarios;
                    }
                    _canalDetalleTipoIntermediarios = value;
                    if (_canalDetalleTipoIntermediarios != null)
                    {
                        _canalDetalleTipoIntermediarios.CollectionChanged += FixupCanalDetalleTipoIntermediarios;
                    }
                    OnNavigationPropertyChanged("CanalDetalleTipoIntermediarios");
                }
            }
        }
        private TrackableCollection<CanalDetalleTipoIntermediario> _canalDetalleTipoIntermediarios;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ExcepcionFijaVariables.Clear();
            ExcepcionPenalizacions.Clear();
            FactorComisionFijas.Clear();
            FactorComisionVariableNetoes.Clear();
            FactorComisionVariableNuevoes.Clear();
            LiquidacionComisions.Clear();
            MatrizComisionVariables.Clear();
            CanalDetalles.Clear();
            CanalDetalleTipoIntermediarios.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupExcepcionFijaVariables(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ExcepcionFijaVariable item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ExcepcionFijaVariables", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExcepcionFijaVariable item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ExcepcionFijaVariables", item);
                    }
                }
            }
        }
    
        private void FixupExcepcionPenalizacions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ExcepcionPenalizacion item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ExcepcionPenalizacions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExcepcionPenalizacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ExcepcionPenalizacions", item);
                    }
                }
            }
        }
    
        private void FixupFactorComisionFijas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FactorComisionFija item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FactorComisionFijas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FactorComisionFija item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FactorComisionFijas", item);
                    }
                }
            }
        }
    
        private void FixupFactorComisionVariableNetoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FactorComisionVariableNeto item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FactorComisionVariableNetoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FactorComisionVariableNeto item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FactorComisionVariableNetoes", item);
                    }
                }
            }
        }
    
        private void FixupFactorComisionVariableNuevoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FactorComisionVariableNuevo item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FactorComisionVariableNuevoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FactorComisionVariableNuevo item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FactorComisionVariableNuevoes", item);
                    }
                }
            }
        }
    
        private void FixupLiquidacionComisions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquidacionComision item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquidacionComisions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquidacionComision item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquidacionComisions", item);
                    }
                }
            }
        }
    
        private void FixupMatrizComisionVariables(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MatrizComisionVariable item in e.NewItems)
                {
                    item.ModeloComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MatrizComisionVariables", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MatrizComisionVariable item in e.OldItems)
                {
                    if (ReferenceEquals(item.ModeloComision, this))
                    {
                        item.ModeloComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MatrizComisionVariables", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupCanalDetalles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CanalDetalle item in e.NewItems)
                {
                    if (!item.ModeloComisions.Contains(this))
                    {
                        item.ModeloComisions.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CanalDetalles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CanalDetalle item in e.OldItems)
                {
                    if (item.ModeloComisions.Contains(this))
                    {
                        item.ModeloComisions.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CanalDetalles", item);
                    }
                }
            }
        }
    
        private void FixupCanalDetalleTipoIntermediarios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CanalDetalleTipoIntermediario item in e.NewItems)
                {
                    if (!item.ModeloComisions.Contains(this))
                    {
                        item.ModeloComisions.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CanalDetalleTipoIntermediarios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CanalDetalleTipoIntermediario item in e.OldItems)
                {
                    if (item.ModeloComisions.Contains(this))
                    {
                        item.ModeloComisions.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CanalDetalleTipoIntermediarios", item);
                    }
                }
            }
        }

        #endregion
    }
}
