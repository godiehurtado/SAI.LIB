//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PackageErrorLog))]
    [KnownType(typeof(PackageVersion))]
    [KnownType(typeof(PackageTaskLog))]
    public partial class PackageLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PackageLogID
        {
            get { return _packageLogID; }
            set
            {
                if (_packageLogID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PackageLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _packageLogID = value;
                    OnPropertyChanged("PackageLogID");
                }
            }
        }
        private int _packageLogID;
    
        [DataMember]
        public int BatchLogID
        {
            get { return _batchLogID; }
            set
            {
                if (_batchLogID != value)
                {
                    _batchLogID = value;
                    OnPropertyChanged("BatchLogID");
                }
            }
        }
        private int _batchLogID;
    
        [DataMember]
        public int PackageVersionID
        {
            get { return _packageVersionID; }
            set
            {
                if (_packageVersionID != value)
                {
                    ChangeTracker.RecordOriginalValue("PackageVersionID", _packageVersionID);
                    if (!IsDeserializing)
                    {
                        if (PackageVersion != null && PackageVersion.PackageVersionID != value)
                        {
                            PackageVersion = null;
                        }
                    }
                    _packageVersionID = value;
                    OnPropertyChanged("PackageVersionID");
                }
            }
        }
        private int _packageVersionID;
    
        [DataMember]
        public System.Guid ExecutionInstanceID
        {
            get { return _executionInstanceID; }
            set
            {
                if (_executionInstanceID != value)
                {
                    _executionInstanceID = value;
                    OnPropertyChanged("ExecutionInstanceID");
                }
            }
        }
        private System.Guid _executionInstanceID;
    
        [DataMember]
        public string MachineName
        {
            get { return _machineName; }
            set
            {
                if (_machineName != value)
                {
                    _machineName = value;
                    OnPropertyChanged("MachineName");
                }
            }
        }
        private string _machineName;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public System.DateTime StartDateTime
        {
            get { return _startDateTime; }
            set
            {
                if (_startDateTime != value)
                {
                    _startDateTime = value;
                    OnPropertyChanged("StartDateTime");
                }
            }
        }
        private System.DateTime _startDateTime;
    
        [DataMember]
        public Nullable<System.DateTime> EndDateTime
        {
            get { return _endDateTime; }
            set
            {
                if (_endDateTime != value)
                {
                    _endDateTime = value;
                    OnPropertyChanged("EndDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _endDateTime;
    
        [DataMember]
        public string Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private string _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PackageErrorLog> PackageErrorLogs
        {
            get
            {
                if (_packageErrorLogs == null)
                {
                    _packageErrorLogs = new TrackableCollection<PackageErrorLog>();
                    _packageErrorLogs.CollectionChanged += FixupPackageErrorLogs;
                }
                return _packageErrorLogs;
            }
            set
            {
                if (!ReferenceEquals(_packageErrorLogs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_packageErrorLogs != null)
                    {
                        _packageErrorLogs.CollectionChanged -= FixupPackageErrorLogs;
                    }
                    _packageErrorLogs = value;
                    if (_packageErrorLogs != null)
                    {
                        _packageErrorLogs.CollectionChanged += FixupPackageErrorLogs;
                    }
                    OnNavigationPropertyChanged("PackageErrorLogs");
                }
            }
        }
        private TrackableCollection<PackageErrorLog> _packageErrorLogs;
    
        [DataMember]
        public PackageVersion PackageVersion
        {
            get { return _packageVersion; }
            set
            {
                if (!ReferenceEquals(_packageVersion, value))
                {
                    var previousValue = _packageVersion;
                    _packageVersion = value;
                    FixupPackageVersion(previousValue);
                    OnNavigationPropertyChanged("PackageVersion");
                }
            }
        }
        private PackageVersion _packageVersion;
    
        [DataMember]
        public TrackableCollection<PackageTaskLog> PackageTaskLogs
        {
            get
            {
                if (_packageTaskLogs == null)
                {
                    _packageTaskLogs = new TrackableCollection<PackageTaskLog>();
                    _packageTaskLogs.CollectionChanged += FixupPackageTaskLogs;
                }
                return _packageTaskLogs;
            }
            set
            {
                if (!ReferenceEquals(_packageTaskLogs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_packageTaskLogs != null)
                    {
                        _packageTaskLogs.CollectionChanged -= FixupPackageTaskLogs;
                    }
                    _packageTaskLogs = value;
                    if (_packageTaskLogs != null)
                    {
                        _packageTaskLogs.CollectionChanged += FixupPackageTaskLogs;
                    }
                    OnNavigationPropertyChanged("PackageTaskLogs");
                }
            }
        }
        private TrackableCollection<PackageTaskLog> _packageTaskLogs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PackageErrorLogs.Clear();
            PackageVersion = null;
            PackageTaskLogs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPackageVersion(PackageVersion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PackageLogs.Contains(this))
            {
                previousValue.PackageLogs.Remove(this);
            }
    
            if (PackageVersion != null)
            {
                if (!PackageVersion.PackageLogs.Contains(this))
                {
                    PackageVersion.PackageLogs.Add(this);
                }
    
                PackageVersionID = PackageVersion.PackageVersionID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PackageVersion")
                    && (ChangeTracker.OriginalValues["PackageVersion"] == PackageVersion))
                {
                    ChangeTracker.OriginalValues.Remove("PackageVersion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PackageVersion", previousValue);
                }
                if (PackageVersion != null && !PackageVersion.ChangeTracker.ChangeTrackingEnabled)
                {
                    PackageVersion.StartTracking();
                }
            }
        }
    
        private void FixupPackageErrorLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PackageErrorLog item in e.NewItems)
                {
                    item.PackageLog = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PackageErrorLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PackageErrorLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageLog, this))
                    {
                        item.PackageLog = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PackageErrorLogs", item);
                    }
                }
            }
        }
    
        private void FixupPackageTaskLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PackageTaskLog item in e.NewItems)
                {
                    item.PackageLog = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PackageTaskLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PackageTaskLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageLog, this))
                    {
                        item.PackageLog = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PackageTaskLogs", item);
                    }
                }
            }
        }

        #endregion
    }
}
