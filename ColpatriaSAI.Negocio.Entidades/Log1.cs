//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CategoriaLog))]
    public partial class Log1: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int LogID
        {
            get { return _logID; }
            set
            {
                if (_logID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _logID = value;
                    OnPropertyChanged("LogID");
                }
            }
        }
        private int _logID;
    
        [DataMember]
        public Nullable<int> EventID
        {
            get { return _eventID; }
            set
            {
                if (_eventID != value)
                {
                    _eventID = value;
                    OnPropertyChanged("EventID");
                }
            }
        }
        private Nullable<int> _eventID;
    
        [DataMember]
        public int Priority
        {
            get { return _priority; }
            set
            {
                if (_priority != value)
                {
                    _priority = value;
                    OnPropertyChanged("Priority");
                }
            }
        }
        private int _priority;
    
        [DataMember]
        public string Severity
        {
            get { return _severity; }
            set
            {
                if (_severity != value)
                {
                    _severity = value;
                    OnPropertyChanged("Severity");
                }
            }
        }
        private string _severity;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public System.DateTime Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    OnPropertyChanged("Timestamp");
                }
            }
        }
        private System.DateTime _timestamp;
    
        [DataMember]
        public string MachineName
        {
            get { return _machineName; }
            set
            {
                if (_machineName != value)
                {
                    _machineName = value;
                    OnPropertyChanged("MachineName");
                }
            }
        }
        private string _machineName;
    
        [DataMember]
        public string AppDomainName
        {
            get { return _appDomainName; }
            set
            {
                if (_appDomainName != value)
                {
                    _appDomainName = value;
                    OnPropertyChanged("AppDomainName");
                }
            }
        }
        private string _appDomainName;
    
        [DataMember]
        public string ProcessID
        {
            get { return _processID; }
            set
            {
                if (_processID != value)
                {
                    _processID = value;
                    OnPropertyChanged("ProcessID");
                }
            }
        }
        private string _processID;
    
        [DataMember]
        public string ProcessName
        {
            get { return _processName; }
            set
            {
                if (_processName != value)
                {
                    _processName = value;
                    OnPropertyChanged("ProcessName");
                }
            }
        }
        private string _processName;
    
        [DataMember]
        public string ThreadName
        {
            get { return _threadName; }
            set
            {
                if (_threadName != value)
                {
                    _threadName = value;
                    OnPropertyChanged("ThreadName");
                }
            }
        }
        private string _threadName;
    
        [DataMember]
        public string Win32ThreadId
        {
            get { return _win32ThreadId; }
            set
            {
                if (_win32ThreadId != value)
                {
                    _win32ThreadId = value;
                    OnPropertyChanged("Win32ThreadId");
                }
            }
        }
        private string _win32ThreadId;
    
        [DataMember]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    OnPropertyChanged("Message");
                }
            }
        }
        private string _message;
    
        [DataMember]
        public string FormattedMessage
        {
            get { return _formattedMessage; }
            set
            {
                if (_formattedMessage != value)
                {
                    _formattedMessage = value;
                    OnPropertyChanged("FormattedMessage");
                }
            }
        }
        private string _formattedMessage;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CategoriaLog> CategoriaLogs
        {
            get
            {
                if (_categoriaLogs == null)
                {
                    _categoriaLogs = new TrackableCollection<CategoriaLog>();
                    _categoriaLogs.CollectionChanged += FixupCategoriaLogs;
                }
                return _categoriaLogs;
            }
            set
            {
                if (!ReferenceEquals(_categoriaLogs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_categoriaLogs != null)
                    {
                        _categoriaLogs.CollectionChanged -= FixupCategoriaLogs;
                    }
                    _categoriaLogs = value;
                    if (_categoriaLogs != null)
                    {
                        _categoriaLogs.CollectionChanged += FixupCategoriaLogs;
                    }
                    OnNavigationPropertyChanged("CategoriaLogs");
                }
            }
        }
        private TrackableCollection<CategoriaLog> _categoriaLogs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CategoriaLogs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCategoriaLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CategoriaLog item in e.NewItems)
                {
                    item.Log1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CategoriaLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CategoriaLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Log1, this))
                    {
                        item.Log1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CategoriaLogs", item);
                    }
                }
            }
        }

        #endregion
    }
}
