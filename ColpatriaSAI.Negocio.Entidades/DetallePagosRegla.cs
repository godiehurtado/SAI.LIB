//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AuditoriaAjuste))]
    [KnownType(typeof(Pago))]
    public partial class DetallePagosRegla: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private Nullable<int> _compania_id;
    
        [DataMember]
        public string clave
        {
            get { return _clave; }
            set
            {
                if (_clave != value)
                {
                    _clave = value;
                    OnPropertyChanged("clave");
                }
            }
        }
        private string _clave;
    
        [DataMember]
        public Nullable<int> tipoDocumento_id
        {
            get { return _tipoDocumento_id; }
            set
            {
                if (_tipoDocumento_id != value)
                {
                    _tipoDocumento_id = value;
                    OnPropertyChanged("tipoDocumento_id");
                }
            }
        }
        private Nullable<int> _tipoDocumento_id;
    
        [DataMember]
        public string documento
        {
            get { return _documento; }
            set
            {
                if (_documento != value)
                {
                    _documento = value;
                    OnPropertyChanged("documento");
                }
            }
        }
        private string _documento;
    
        [DataMember]
        public Nullable<double> totalParticipacion
        {
            get { return _totalParticipacion; }
            set
            {
                if (_totalParticipacion != value)
                {
                    _totalParticipacion = value;
                    OnPropertyChanged("totalParticipacion");
                }
            }
        }
        private Nullable<double> _totalParticipacion;
    
        [DataMember]
        public Nullable<double> porcentajeComision
        {
            get { return _porcentajeComision; }
            set
            {
                if (_porcentajeComision != value)
                {
                    _porcentajeComision = value;
                    OnPropertyChanged("porcentajeComision");
                }
            }
        }
        private Nullable<double> _porcentajeComision;
    
        [DataMember]
        public Nullable<double> porcentajeParticipacion
        {
            get { return _porcentajeParticipacion; }
            set
            {
                if (_porcentajeParticipacion != value)
                {
                    _porcentajeParticipacion = value;
                    OnPropertyChanged("porcentajeParticipacion");
                }
            }
        }
        private Nullable<double> _porcentajeParticipacion;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int liquidacionRegla_id
        {
            get { return _liquidacionRegla_id; }
            set
            {
                if (_liquidacionRegla_id != value)
                {
                    _liquidacionRegla_id = value;
                    OnPropertyChanged("liquidacionRegla_id");
                }
            }
        }
        private int _liquidacionRegla_id;
    
        [DataMember]
        public Nullable<int> estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("estado");
                }
            }
        }
        private Nullable<int> _estado;
    
        [DataMember]
        public Nullable<System.DateTime> fechaLiquidacion
        {
            get { return _fechaLiquidacion; }
            set
            {
                if (_fechaLiquidacion != value)
                {
                    _fechaLiquidacion = value;
                    OnPropertyChanged("fechaLiquidacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaLiquidacion;
    
        [DataMember]
        public Nullable<double> valorAjuste
        {
            get { return _valorAjuste; }
            set
            {
                if (_valorAjuste != value)
                {
                    _valorAjuste = value;
                    OnPropertyChanged("valorAjuste");
                }
            }
        }
        private Nullable<double> _valorAjuste;
    
        [DataMember]
        public Nullable<double> totalAjuste
        {
            get { return _totalAjuste; }
            set
            {
                if (_totalAjuste != value)
                {
                    _totalAjuste = value;
                    OnPropertyChanged("totalAjuste");
                }
            }
        }
        private Nullable<double> _totalAjuste;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AuditoriaAjuste> AuditoriaAjustes
        {
            get
            {
                if (_auditoriaAjustes == null)
                {
                    _auditoriaAjustes = new TrackableCollection<AuditoriaAjuste>();
                    _auditoriaAjustes.CollectionChanged += FixupAuditoriaAjustes;
                }
                return _auditoriaAjustes;
            }
            set
            {
                if (!ReferenceEquals(_auditoriaAjustes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_auditoriaAjustes != null)
                    {
                        _auditoriaAjustes.CollectionChanged -= FixupAuditoriaAjustes;
                    }
                    _auditoriaAjustes = value;
                    if (_auditoriaAjustes != null)
                    {
                        _auditoriaAjustes.CollectionChanged += FixupAuditoriaAjustes;
                    }
                    OnNavigationPropertyChanged("AuditoriaAjustes");
                }
            }
        }
        private TrackableCollection<AuditoriaAjuste> _auditoriaAjustes;
    
        [DataMember]
        public TrackableCollection<Pago> Pagoes
        {
            get
            {
                if (_pagoes == null)
                {
                    _pagoes = new TrackableCollection<Pago>();
                    _pagoes.CollectionChanged += FixupPagoes;
                }
                return _pagoes;
            }
            set
            {
                if (!ReferenceEquals(_pagoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pagoes != null)
                    {
                        _pagoes.CollectionChanged -= FixupPagoes;
                    }
                    _pagoes = value;
                    if (_pagoes != null)
                    {
                        _pagoes.CollectionChanged += FixupPagoes;
                    }
                    OnNavigationPropertyChanged("Pagoes");
                }
            }
        }
        private TrackableCollection<Pago> _pagoes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AuditoriaAjustes.Clear();
            Pagoes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupAuditoriaAjustes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AuditoriaAjuste item in e.NewItems)
                {
                    item.DetallePagosRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AuditoriaAjustes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AuditoriaAjuste item in e.OldItems)
                {
                    if (ReferenceEquals(item.DetallePagosRegla, this))
                    {
                        item.DetallePagosRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AuditoriaAjustes", item);
                    }
                }
            }
        }
    
        private void FixupPagoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pago item in e.NewItems)
                {
                    item.DetallePagosRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pagoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pago item in e.OldItems)
                {
                    if (ReferenceEquals(item.DetallePagosRegla, this))
                    {
                        item.DetallePagosRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pagoes", item);
                    }
                }
            }
        }

        #endregion
    }
}
