//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Localidad))]
    [KnownType(typeof(PagoFranquicia))]
    [KnownType(typeof(Pago))]
    [KnownType(typeof(Compania))]
    public partial class AnticipoFranquicia: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> localidad_id
        {
            get { return _localidad_id; }
            set
            {
                if (_localidad_id != value)
                {
                    ChangeTracker.RecordOriginalValue("localidad_id", _localidad_id);
                    if (!IsDeserializing)
                    {
                        if (Localidad != null && Localidad.id != value)
                        {
                            Localidad = null;
                        }
                    }
                    _localidad_id = value;
                    OnPropertyChanged("localidad_id");
                }
            }
        }
        private Nullable<int> _localidad_id;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_anticipo
        {
            get { return _fecha_anticipo; }
            set
            {
                if (_fecha_anticipo != value)
                {
                    _fecha_anticipo = value;
                    OnPropertyChanged("fecha_anticipo");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_anticipo;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public string usuarioEjecutoAnti
        {
            get { return _usuarioEjecutoAnti; }
            set
            {
                if (_usuarioEjecutoAnti != value)
                {
                    _usuarioEjecutoAnti = value;
                    OnPropertyChanged("usuarioEjecutoAnti");
                }
            }
        }
        private string _usuarioEjecutoAnti;
    
        [DataMember]
        public Nullable<double> valorAnti
        {
            get { return _valorAnti; }
            set
            {
                if (_valorAnti != value)
                {
                    _valorAnti = value;
                    OnPropertyChanged("valorAnti");
                }
            }
        }
        private Nullable<double> _valorAnti;
    
        [DataMember]
        public string estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("estado");
                }
            }
        }
        private string _estado;
    
        [DataMember]
        public Nullable<int> compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    ChangeTracker.RecordOriginalValue("compania_id", _compania_id);
                    if (!IsDeserializing)
                    {
                        if (Compania != null && Compania.id != value)
                        {
                            Compania = null;
                        }
                    }
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private Nullable<int> _compania_id;
    
        [DataMember]
        public Nullable<double> saldo
        {
            get { return _saldo; }
            set
            {
                if (_saldo != value)
                {
                    _saldo = value;
                    OnPropertyChanged("saldo");
                }
            }
        }
        private Nullable<double> _saldo;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Localidad Localidad
        {
            get { return _localidad; }
            set
            {
                if (!ReferenceEquals(_localidad, value))
                {
                    var previousValue = _localidad;
                    _localidad = value;
                    FixupLocalidad(previousValue);
                    OnNavigationPropertyChanged("Localidad");
                }
            }
        }
        private Localidad _localidad;
    
        [DataMember]
        public TrackableCollection<PagoFranquicia> PagoFranquicias
        {
            get
            {
                if (_pagoFranquicias == null)
                {
                    _pagoFranquicias = new TrackableCollection<PagoFranquicia>();
                    _pagoFranquicias.CollectionChanged += FixupPagoFranquicias;
                }
                return _pagoFranquicias;
            }
            set
            {
                if (!ReferenceEquals(_pagoFranquicias, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pagoFranquicias != null)
                    {
                        _pagoFranquicias.CollectionChanged -= FixupPagoFranquicias;
                    }
                    _pagoFranquicias = value;
                    if (_pagoFranquicias != null)
                    {
                        _pagoFranquicias.CollectionChanged += FixupPagoFranquicias;
                    }
                    OnNavigationPropertyChanged("PagoFranquicias");
                }
            }
        }
        private TrackableCollection<PagoFranquicia> _pagoFranquicias;
    
        [DataMember]
        public TrackableCollection<Pago> Pagoes
        {
            get
            {
                if (_pagoes == null)
                {
                    _pagoes = new TrackableCollection<Pago>();
                    _pagoes.CollectionChanged += FixupPagoes;
                }
                return _pagoes;
            }
            set
            {
                if (!ReferenceEquals(_pagoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_pagoes != null)
                    {
                        _pagoes.CollectionChanged -= FixupPagoes;
                    }
                    _pagoes = value;
                    if (_pagoes != null)
                    {
                        _pagoes.CollectionChanged += FixupPagoes;
                    }
                    OnNavigationPropertyChanged("Pagoes");
                }
            }
        }
        private TrackableCollection<Pago> _pagoes;
    
        [DataMember]
        public Compania Compania
        {
            get { return _compania; }
            set
            {
                if (!ReferenceEquals(_compania, value))
                {
                    var previousValue = _compania;
                    _compania = value;
                    FixupCompania(previousValue);
                    OnNavigationPropertyChanged("Compania");
                }
            }
        }
        private Compania _compania;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Localidad = null;
            PagoFranquicias.Clear();
            Pagoes.Clear();
            Compania = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLocalidad(Localidad previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnticipoFranquicias.Contains(this))
            {
                previousValue.AnticipoFranquicias.Remove(this);
            }
    
            if (Localidad != null)
            {
                if (!Localidad.AnticipoFranquicias.Contains(this))
                {
                    Localidad.AnticipoFranquicias.Add(this);
                }
    
                localidad_id = Localidad.id;
            }
            else if (!skipKeys)
            {
                localidad_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Localidad")
                    && (ChangeTracker.OriginalValues["Localidad"] == Localidad))
                {
                    ChangeTracker.OriginalValues.Remove("Localidad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Localidad", previousValue);
                }
                if (Localidad != null && !Localidad.ChangeTracker.ChangeTrackingEnabled)
                {
                    Localidad.StartTracking();
                }
            }
        }
    
        private void FixupCompania(Compania previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AnticipoFranquicias.Contains(this))
            {
                previousValue.AnticipoFranquicias.Remove(this);
            }
    
            if (Compania != null)
            {
                if (!Compania.AnticipoFranquicias.Contains(this))
                {
                    Compania.AnticipoFranquicias.Add(this);
                }
    
                compania_id = Compania.id;
            }
            else if (!skipKeys)
            {
                compania_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compania")
                    && (ChangeTracker.OriginalValues["Compania"] == Compania))
                {
                    ChangeTracker.OriginalValues.Remove("Compania");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compania", previousValue);
                }
                if (Compania != null && !Compania.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compania.StartTracking();
                }
            }
        }
    
        private void FixupPagoFranquicias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PagoFranquicia item in e.NewItems)
                {
                    item.AnticipoFranquicia = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PagoFranquicias", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PagoFranquicia item in e.OldItems)
                {
                    if (ReferenceEquals(item.AnticipoFranquicia, this))
                    {
                        item.AnticipoFranquicia = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PagoFranquicias", item);
                    }
                }
            }
        }
    
        private void FixupPagoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Pago item in e.NewItems)
                {
                    item.AnticipoFranquicia = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Pagoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Pago item in e.OldItems)
                {
                    if (ReferenceEquals(item.AnticipoFranquicia, this))
                    {
                        item.AnticipoFranquicia = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Pagoes", item);
                    }
                }
            }
        }

        #endregion
    }
}
