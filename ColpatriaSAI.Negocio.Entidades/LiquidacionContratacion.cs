//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetalleLiquiContratPpacionPpante))]
    [KnownType(typeof(EstadoLiquidacion))]
    [KnownType(typeof(LiquiContratMeta))]
    [KnownType(typeof(LiquiContratPpacionPpante))]
    [KnownType(typeof(LiquiContratFactorParticipante))]
    public partial class LiquidacionContratacion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<System.DateTime> fechaIni
        {
            get { return _fechaIni; }
            set
            {
                if (_fechaIni != value)
                {
                    _fechaIni = value;
                    OnPropertyChanged("fechaIni");
                }
            }
        }
        private Nullable<System.DateTime> _fechaIni;
    
        [DataMember]
        public Nullable<System.DateTime> fechaFin
        {
            get { return _fechaFin; }
            set
            {
                if (_fechaFin != value)
                {
                    _fechaFin = value;
                    OnPropertyChanged("fechaFin");
                }
            }
        }
        private Nullable<System.DateTime> _fechaFin;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public Nullable<System.DateTime> fechaLiquidacion
        {
            get { return _fechaLiquidacion; }
            set
            {
                if (_fechaLiquidacion != value)
                {
                    _fechaLiquidacion = value;
                    OnPropertyChanged("fechaLiquidacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechaLiquidacion;
    
        [DataMember]
        public Nullable<int> estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    ChangeTracker.RecordOriginalValue("estado", _estado);
                    if (!IsDeserializing)
                    {
                        if (EstadoLiquidacion != null && EstadoLiquidacion.id != value)
                        {
                            EstadoLiquidacion = null;
                        }
                    }
                    _estado = value;
                    OnPropertyChanged("estado");
                }
            }
        }
        private Nullable<int> _estado;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DetalleLiquiContratPpacionPpante> DetalleLiquiContratPpacionPpantes
        {
            get
            {
                if (_detalleLiquiContratPpacionPpantes == null)
                {
                    _detalleLiquiContratPpacionPpantes = new TrackableCollection<DetalleLiquiContratPpacionPpante>();
                    _detalleLiquiContratPpacionPpantes.CollectionChanged += FixupDetalleLiquiContratPpacionPpantes;
                }
                return _detalleLiquiContratPpacionPpantes;
            }
            set
            {
                if (!ReferenceEquals(_detalleLiquiContratPpacionPpantes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detalleLiquiContratPpacionPpantes != null)
                    {
                        _detalleLiquiContratPpacionPpantes.CollectionChanged -= FixupDetalleLiquiContratPpacionPpantes;
                    }
                    _detalleLiquiContratPpacionPpantes = value;
                    if (_detalleLiquiContratPpacionPpantes != null)
                    {
                        _detalleLiquiContratPpacionPpantes.CollectionChanged += FixupDetalleLiquiContratPpacionPpantes;
                    }
                    OnNavigationPropertyChanged("DetalleLiquiContratPpacionPpantes");
                }
            }
        }
        private TrackableCollection<DetalleLiquiContratPpacionPpante> _detalleLiquiContratPpacionPpantes;
    
        [DataMember]
        public EstadoLiquidacion EstadoLiquidacion
        {
            get { return _estadoLiquidacion; }
            set
            {
                if (!ReferenceEquals(_estadoLiquidacion, value))
                {
                    var previousValue = _estadoLiquidacion;
                    _estadoLiquidacion = value;
                    FixupEstadoLiquidacion(previousValue);
                    OnNavigationPropertyChanged("EstadoLiquidacion");
                }
            }
        }
        private EstadoLiquidacion _estadoLiquidacion;
    
        [DataMember]
        public TrackableCollection<LiquiContratMeta> LiquiContratMetas
        {
            get
            {
                if (_liquiContratMetas == null)
                {
                    _liquiContratMetas = new TrackableCollection<LiquiContratMeta>();
                    _liquiContratMetas.CollectionChanged += FixupLiquiContratMetas;
                }
                return _liquiContratMetas;
            }
            set
            {
                if (!ReferenceEquals(_liquiContratMetas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquiContratMetas != null)
                    {
                        _liquiContratMetas.CollectionChanged -= FixupLiquiContratMetas;
                    }
                    _liquiContratMetas = value;
                    if (_liquiContratMetas != null)
                    {
                        _liquiContratMetas.CollectionChanged += FixupLiquiContratMetas;
                    }
                    OnNavigationPropertyChanged("LiquiContratMetas");
                }
            }
        }
        private TrackableCollection<LiquiContratMeta> _liquiContratMetas;
    
        [DataMember]
        public TrackableCollection<LiquiContratPpacionPpante> LiquiContratPpacionPpantes
        {
            get
            {
                if (_liquiContratPpacionPpantes == null)
                {
                    _liquiContratPpacionPpantes = new TrackableCollection<LiquiContratPpacionPpante>();
                    _liquiContratPpacionPpantes.CollectionChanged += FixupLiquiContratPpacionPpantes;
                }
                return _liquiContratPpacionPpantes;
            }
            set
            {
                if (!ReferenceEquals(_liquiContratPpacionPpantes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquiContratPpacionPpantes != null)
                    {
                        _liquiContratPpacionPpantes.CollectionChanged -= FixupLiquiContratPpacionPpantes;
                    }
                    _liquiContratPpacionPpantes = value;
                    if (_liquiContratPpacionPpantes != null)
                    {
                        _liquiContratPpacionPpantes.CollectionChanged += FixupLiquiContratPpacionPpantes;
                    }
                    OnNavigationPropertyChanged("LiquiContratPpacionPpantes");
                }
            }
        }
        private TrackableCollection<LiquiContratPpacionPpante> _liquiContratPpacionPpantes;
    
        [DataMember]
        public TrackableCollection<LiquiContratFactorParticipante> LiquiContratFactorParticipantes
        {
            get
            {
                if (_liquiContratFactorParticipantes == null)
                {
                    _liquiContratFactorParticipantes = new TrackableCollection<LiquiContratFactorParticipante>();
                    _liquiContratFactorParticipantes.CollectionChanged += FixupLiquiContratFactorParticipantes;
                }
                return _liquiContratFactorParticipantes;
            }
            set
            {
                if (!ReferenceEquals(_liquiContratFactorParticipantes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquiContratFactorParticipantes != null)
                    {
                        _liquiContratFactorParticipantes.CollectionChanged -= FixupLiquiContratFactorParticipantes;
                    }
                    _liquiContratFactorParticipantes = value;
                    if (_liquiContratFactorParticipantes != null)
                    {
                        _liquiContratFactorParticipantes.CollectionChanged += FixupLiquiContratFactorParticipantes;
                    }
                    OnNavigationPropertyChanged("LiquiContratFactorParticipantes");
                }
            }
        }
        private TrackableCollection<LiquiContratFactorParticipante> _liquiContratFactorParticipantes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetalleLiquiContratPpacionPpantes.Clear();
            EstadoLiquidacion = null;
            LiquiContratMetas.Clear();
            LiquiContratPpacionPpantes.Clear();
            LiquiContratFactorParticipantes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupEstadoLiquidacion(EstadoLiquidacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionContratacions.Contains(this))
            {
                previousValue.LiquidacionContratacions.Remove(this);
            }
    
            if (EstadoLiquidacion != null)
            {
                if (!EstadoLiquidacion.LiquidacionContratacions.Contains(this))
                {
                    EstadoLiquidacion.LiquidacionContratacions.Add(this);
                }
    
                estado = EstadoLiquidacion.id;
            }
            else if (!skipKeys)
            {
                estado = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EstadoLiquidacion")
                    && (ChangeTracker.OriginalValues["EstadoLiquidacion"] == EstadoLiquidacion))
                {
                    ChangeTracker.OriginalValues.Remove("EstadoLiquidacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EstadoLiquidacion", previousValue);
                }
                if (EstadoLiquidacion != null && !EstadoLiquidacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    EstadoLiquidacion.StartTracking();
                }
            }
        }
    
        private void FixupDetalleLiquiContratPpacionPpantes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetalleLiquiContratPpacionPpante item in e.NewItems)
                {
                    item.LiquidacionContratacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetalleLiquiContratPpacionPpantes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetalleLiquiContratPpacionPpante item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionContratacion, this))
                    {
                        item.LiquidacionContratacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLiquiContratPpacionPpantes", item);
                    }
                }
            }
        }
    
        private void FixupLiquiContratMetas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquiContratMeta item in e.NewItems)
                {
                    item.LiquidacionContratacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquiContratMetas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquiContratMeta item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionContratacion, this))
                    {
                        item.LiquidacionContratacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquiContratMetas", item);
                    }
                }
            }
        }
    
        private void FixupLiquiContratPpacionPpantes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquiContratPpacionPpante item in e.NewItems)
                {
                    item.LiquidacionContratacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquiContratPpacionPpantes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquiContratPpacionPpante item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionContratacion, this))
                    {
                        item.LiquidacionContratacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquiContratPpacionPpantes", item);
                    }
                }
            }
        }
    
        private void FixupLiquiContratFactorParticipantes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquiContratFactorParticipante item in e.NewItems)
                {
                    item.LiquidacionContratacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquiContratFactorParticipantes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquiContratFactorParticipante item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionContratacion, this))
                    {
                        item.LiquidacionContratacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquiContratFactorParticipantes", item);
                    }
                }
            }
        }

        #endregion
    }
}
