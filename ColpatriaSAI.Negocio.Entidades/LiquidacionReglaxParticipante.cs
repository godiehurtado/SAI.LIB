//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetalleLiquidacionRegla))]
    [KnownType(typeof(LiquidacionPremio))]
    [KnownType(typeof(LiquidacionRegla))]
    [KnownType(typeof(JerarquiaDetalle))]
    [KnownType(typeof(Participante))]
    public partial class LiquidacionReglaxParticipante: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> liquidacionRegla_id
        {
            get { return _liquidacionRegla_id; }
            set
            {
                if (_liquidacionRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquidacionRegla_id", _liquidacionRegla_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionRegla != null && LiquidacionRegla.id != value)
                        {
                            LiquidacionRegla = null;
                        }
                    }
                    _liquidacionRegla_id = value;
                    OnPropertyChanged("liquidacionRegla_id");
                }
            }
        }
        private Nullable<int> _liquidacionRegla_id;
    
        [DataMember]
        public Nullable<int> participante_id
        {
            get { return _participante_id; }
            set
            {
                if (_participante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("participante_id", _participante_id);
                    if (!IsDeserializing)
                    {
                        if (Participante != null && Participante.id != value)
                        {
                            Participante = null;
                        }
                    }
                    _participante_id = value;
                    OnPropertyChanged("participante_id");
                }
            }
        }
        private Nullable<int> _participante_id;
    
        [DataMember]
        public Nullable<int> jerarquiaDetalle_id
        {
            get { return _jerarquiaDetalle_id; }
            set
            {
                if (_jerarquiaDetalle_id != value)
                {
                    ChangeTracker.RecordOriginalValue("jerarquiaDetalle_id", _jerarquiaDetalle_id);
                    if (!IsDeserializing)
                    {
                        if (JerarquiaDetalle != null && JerarquiaDetalle.id != value)
                        {
                            JerarquiaDetalle = null;
                        }
                    }
                    _jerarquiaDetalle_id = value;
                    OnPropertyChanged("jerarquiaDetalle_id");
                }
            }
        }
        private Nullable<int> _jerarquiaDetalle_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DetalleLiquidacionRegla> DetalleLiquidacionReglas
        {
            get
            {
                if (_detalleLiquidacionReglas == null)
                {
                    _detalleLiquidacionReglas = new TrackableCollection<DetalleLiquidacionRegla>();
                    _detalleLiquidacionReglas.CollectionChanged += FixupDetalleLiquidacionReglas;
                }
                return _detalleLiquidacionReglas;
            }
            set
            {
                if (!ReferenceEquals(_detalleLiquidacionReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detalleLiquidacionReglas != null)
                    {
                        _detalleLiquidacionReglas.CollectionChanged -= FixupDetalleLiquidacionReglas;
                    }
                    _detalleLiquidacionReglas = value;
                    if (_detalleLiquidacionReglas != null)
                    {
                        _detalleLiquidacionReglas.CollectionChanged += FixupDetalleLiquidacionReglas;
                    }
                    OnNavigationPropertyChanged("DetalleLiquidacionReglas");
                }
            }
        }
        private TrackableCollection<DetalleLiquidacionRegla> _detalleLiquidacionReglas;
    
        [DataMember]
        public TrackableCollection<LiquidacionPremio> LiquidacionPremios
        {
            get
            {
                if (_liquidacionPremios == null)
                {
                    _liquidacionPremios = new TrackableCollection<LiquidacionPremio>();
                    _liquidacionPremios.CollectionChanged += FixupLiquidacionPremios;
                }
                return _liquidacionPremios;
            }
            set
            {
                if (!ReferenceEquals(_liquidacionPremios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquidacionPremios != null)
                    {
                        _liquidacionPremios.CollectionChanged -= FixupLiquidacionPremios;
                    }
                    _liquidacionPremios = value;
                    if (_liquidacionPremios != null)
                    {
                        _liquidacionPremios.CollectionChanged += FixupLiquidacionPremios;
                    }
                    OnNavigationPropertyChanged("LiquidacionPremios");
                }
            }
        }
        private TrackableCollection<LiquidacionPremio> _liquidacionPremios;
    
        [DataMember]
        public LiquidacionRegla LiquidacionRegla
        {
            get { return _liquidacionRegla; }
            set
            {
                if (!ReferenceEquals(_liquidacionRegla, value))
                {
                    var previousValue = _liquidacionRegla;
                    _liquidacionRegla = value;
                    FixupLiquidacionRegla(previousValue);
                    OnNavigationPropertyChanged("LiquidacionRegla");
                }
            }
        }
        private LiquidacionRegla _liquidacionRegla;
    
        [DataMember]
        public JerarquiaDetalle JerarquiaDetalle
        {
            get { return _jerarquiaDetalle; }
            set
            {
                if (!ReferenceEquals(_jerarquiaDetalle, value))
                {
                    var previousValue = _jerarquiaDetalle;
                    _jerarquiaDetalle = value;
                    FixupJerarquiaDetalle(previousValue);
                    OnNavigationPropertyChanged("JerarquiaDetalle");
                }
            }
        }
        private JerarquiaDetalle _jerarquiaDetalle;
    
        [DataMember]
        public Participante Participante
        {
            get { return _participante; }
            set
            {
                if (!ReferenceEquals(_participante, value))
                {
                    var previousValue = _participante;
                    _participante = value;
                    FixupParticipante(previousValue);
                    OnNavigationPropertyChanged("Participante");
                }
            }
        }
        private Participante _participante;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetalleLiquidacionReglas.Clear();
            LiquidacionPremios.Clear();
            LiquidacionRegla = null;
            JerarquiaDetalle = null;
            Participante = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLiquidacionRegla(LiquidacionRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaxParticipantes.Contains(this))
            {
                previousValue.LiquidacionReglaxParticipantes.Remove(this);
            }
    
            if (LiquidacionRegla != null)
            {
                if (!LiquidacionRegla.LiquidacionReglaxParticipantes.Contains(this))
                {
                    LiquidacionRegla.LiquidacionReglaxParticipantes.Add(this);
                }
    
                liquidacionRegla_id = LiquidacionRegla.id;
            }
            else if (!skipKeys)
            {
                liquidacionRegla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionRegla")
                    && (ChangeTracker.OriginalValues["LiquidacionRegla"] == LiquidacionRegla))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionRegla", previousValue);
                }
                if (LiquidacionRegla != null && !LiquidacionRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionRegla.StartTracking();
                }
            }
        }
    
        private void FixupJerarquiaDetalle(JerarquiaDetalle previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaxParticipantes.Contains(this))
            {
                previousValue.LiquidacionReglaxParticipantes.Remove(this);
            }
    
            if (JerarquiaDetalle != null)
            {
                if (!JerarquiaDetalle.LiquidacionReglaxParticipantes.Contains(this))
                {
                    JerarquiaDetalle.LiquidacionReglaxParticipantes.Add(this);
                }
    
                jerarquiaDetalle_id = JerarquiaDetalle.id;
            }
            else if (!skipKeys)
            {
                jerarquiaDetalle_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("JerarquiaDetalle")
                    && (ChangeTracker.OriginalValues["JerarquiaDetalle"] == JerarquiaDetalle))
                {
                    ChangeTracker.OriginalValues.Remove("JerarquiaDetalle");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("JerarquiaDetalle", previousValue);
                }
                if (JerarquiaDetalle != null && !JerarquiaDetalle.ChangeTracker.ChangeTrackingEnabled)
                {
                    JerarquiaDetalle.StartTracking();
                }
            }
        }
    
        private void FixupParticipante(Participante previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaxParticipantes.Contains(this))
            {
                previousValue.LiquidacionReglaxParticipantes.Remove(this);
            }
    
            if (Participante != null)
            {
                if (!Participante.LiquidacionReglaxParticipantes.Contains(this))
                {
                    Participante.LiquidacionReglaxParticipantes.Add(this);
                }
    
                participante_id = Participante.id;
            }
            else if (!skipKeys)
            {
                participante_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Participante")
                    && (ChangeTracker.OriginalValues["Participante"] == Participante))
                {
                    ChangeTracker.OriginalValues.Remove("Participante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Participante", previousValue);
                }
                if (Participante != null && !Participante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Participante.StartTracking();
                }
            }
        }
    
        private void FixupDetalleLiquidacionReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetalleLiquidacionRegla item in e.NewItems)
                {
                    item.LiquidacionReglaxParticipante = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetalleLiquidacionReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetalleLiquidacionRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionReglaxParticipante, this))
                    {
                        item.LiquidacionReglaxParticipante = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLiquidacionReglas", item);
                    }
                }
            }
        }
    
        private void FixupLiquidacionPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquidacionPremio item in e.NewItems)
                {
                    item.LiquidacionReglaxParticipante = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquidacionPremios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquidacionPremio item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionReglaxParticipante, this))
                    {
                        item.LiquidacionReglaxParticipante = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquidacionPremios", item);
                    }
                }
            }
        }

        #endregion
    }
}
