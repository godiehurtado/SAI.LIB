//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Condicion))]
    [KnownType(typeof(CondicionAgrupada))]
    [KnownType(typeof(DetalleLiquidacionRegla))]
    [KnownType(typeof(PremioxSubregla))]
    [KnownType(typeof(SubRegla))]
    [KnownType(typeof(LiquidacionPremio))]
    [KnownType(typeof(Regla))]
    public partial class SubRegla: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (SubRegla2 != null && SubRegla2.id != value)
                        {
                            SubRegla2 = null;
                        }
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> regla_id
        {
            get { return _regla_id; }
            set
            {
                if (_regla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("regla_id", _regla_id);
                    if (!IsDeserializing)
                    {
                        if (Regla != null && Regla.id != value)
                        {
                            Regla = null;
                        }
                    }
                    _regla_id = value;
                    OnPropertyChanged("regla_id");
                }
            }
        }
        private Nullable<int> _regla_id;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public Nullable<bool> principal
        {
            get { return _principal; }
            set
            {
                if (_principal != value)
                {
                    _principal = value;
                    OnPropertyChanged("principal");
                }
            }
        }
        private Nullable<bool> _principal;
    
        [DataMember]
        public Nullable<int> tipoSubregla
        {
            get { return _tipoSubregla; }
            set
            {
                if (_tipoSubregla != value)
                {
                    _tipoSubregla = value;
                    OnPropertyChanged("tipoSubregla");
                }
            }
        }
        private Nullable<int> _tipoSubregla;
    
        [DataMember]
        public Nullable<int> condicionAgrupada_id
        {
            get { return _condicionAgrupada_id; }
            set
            {
                if (_condicionAgrupada_id != value)
                {
                    ChangeTracker.RecordOriginalValue("condicionAgrupada_id", _condicionAgrupada_id);
                    if (!IsDeserializing)
                    {
                        if (CondicionAgrupada != null && CondicionAgrupada.id != value)
                        {
                            CondicionAgrupada = null;
                        }
                    }
                    _condicionAgrupada_id = value;
                    OnPropertyChanged("condicionAgrupada_id");
                }
            }
        }
        private Nullable<int> _condicionAgrupada_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Condicion> Condicions
        {
            get
            {
                if (_condicions == null)
                {
                    _condicions = new TrackableCollection<Condicion>();
                    _condicions.CollectionChanged += FixupCondicions;
                }
                return _condicions;
            }
            set
            {
                if (!ReferenceEquals(_condicions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicions != null)
                    {
                        _condicions.CollectionChanged -= FixupCondicions;
                    }
                    _condicions = value;
                    if (_condicions != null)
                    {
                        _condicions.CollectionChanged += FixupCondicions;
                    }
                    OnNavigationPropertyChanged("Condicions");
                }
            }
        }
        private TrackableCollection<Condicion> _condicions;
    
        [DataMember]
        public CondicionAgrupada CondicionAgrupada
        {
            get { return _condicionAgrupada; }
            set
            {
                if (!ReferenceEquals(_condicionAgrupada, value))
                {
                    var previousValue = _condicionAgrupada;
                    _condicionAgrupada = value;
                    FixupCondicionAgrupada(previousValue);
                    OnNavigationPropertyChanged("CondicionAgrupada");
                }
            }
        }
        private CondicionAgrupada _condicionAgrupada;
    
        [DataMember]
        public TrackableCollection<CondicionAgrupada> CondicionAgrupadas
        {
            get
            {
                if (_condicionAgrupadas == null)
                {
                    _condicionAgrupadas = new TrackableCollection<CondicionAgrupada>();
                    _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                }
                return _condicionAgrupadas;
            }
            set
            {
                if (!ReferenceEquals(_condicionAgrupadas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged -= FixupCondicionAgrupadas;
                    }
                    _condicionAgrupadas = value;
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                    }
                    OnNavigationPropertyChanged("CondicionAgrupadas");
                }
            }
        }
        private TrackableCollection<CondicionAgrupada> _condicionAgrupadas;
    
        [DataMember]
        public TrackableCollection<CondicionAgrupada> CondicionAgrupadas1
        {
            get
            {
                if (_condicionAgrupadas1 == null)
                {
                    _condicionAgrupadas1 = new TrackableCollection<CondicionAgrupada>();
                    _condicionAgrupadas1.CollectionChanged += FixupCondicionAgrupadas1;
                }
                return _condicionAgrupadas1;
            }
            set
            {
                if (!ReferenceEquals(_condicionAgrupadas1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicionAgrupadas1 != null)
                    {
                        _condicionAgrupadas1.CollectionChanged -= FixupCondicionAgrupadas1;
                    }
                    _condicionAgrupadas1 = value;
                    if (_condicionAgrupadas1 != null)
                    {
                        _condicionAgrupadas1.CollectionChanged += FixupCondicionAgrupadas1;
                    }
                    OnNavigationPropertyChanged("CondicionAgrupadas1");
                }
            }
        }
        private TrackableCollection<CondicionAgrupada> _condicionAgrupadas1;
    
        [DataMember]
        public TrackableCollection<DetalleLiquidacionRegla> DetalleLiquidacionReglas
        {
            get
            {
                if (_detalleLiquidacionReglas == null)
                {
                    _detalleLiquidacionReglas = new TrackableCollection<DetalleLiquidacionRegla>();
                    _detalleLiquidacionReglas.CollectionChanged += FixupDetalleLiquidacionReglas;
                }
                return _detalleLiquidacionReglas;
            }
            set
            {
                if (!ReferenceEquals(_detalleLiquidacionReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detalleLiquidacionReglas != null)
                    {
                        _detalleLiquidacionReglas.CollectionChanged -= FixupDetalleLiquidacionReglas;
                    }
                    _detalleLiquidacionReglas = value;
                    if (_detalleLiquidacionReglas != null)
                    {
                        _detalleLiquidacionReglas.CollectionChanged += FixupDetalleLiquidacionReglas;
                    }
                    OnNavigationPropertyChanged("DetalleLiquidacionReglas");
                }
            }
        }
        private TrackableCollection<DetalleLiquidacionRegla> _detalleLiquidacionReglas;
    
        [DataMember]
        public TrackableCollection<PremioxSubregla> PremioxSubreglas
        {
            get
            {
                if (_premioxSubreglas == null)
                {
                    _premioxSubreglas = new TrackableCollection<PremioxSubregla>();
                    _premioxSubreglas.CollectionChanged += FixupPremioxSubreglas;
                }
                return _premioxSubreglas;
            }
            set
            {
                if (!ReferenceEquals(_premioxSubreglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_premioxSubreglas != null)
                    {
                        _premioxSubreglas.CollectionChanged -= FixupPremioxSubreglas;
                    }
                    _premioxSubreglas = value;
                    if (_premioxSubreglas != null)
                    {
                        _premioxSubreglas.CollectionChanged += FixupPremioxSubreglas;
                    }
                    OnNavigationPropertyChanged("PremioxSubreglas");
                }
            }
        }
        private TrackableCollection<PremioxSubregla> _premioxSubreglas;
    
        [DataMember]
        public SubRegla SubRegla1
        {
            get { return _subRegla1; }
            set
            {
                if (!ReferenceEquals(_subRegla1, value))
                {
                    var previousValue = _subRegla1;
                    _subRegla1 = value;
                    FixupSubRegla1(previousValue);
                    OnNavigationPropertyChanged("SubRegla1");
                }
            }
        }
        private SubRegla _subRegla1;
    
        [DataMember]
        public SubRegla SubRegla2
        {
            get { return _subRegla2; }
            set
            {
                if (!ReferenceEquals(_subRegla2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (id != value.id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _subRegla2;
                    _subRegla2 = value;
                    FixupSubRegla2(previousValue);
                    OnNavigationPropertyChanged("SubRegla2");
                }
            }
        }
        private SubRegla _subRegla2;
    
        [DataMember]
        public TrackableCollection<LiquidacionPremio> LiquidacionPremios
        {
            get
            {
                if (_liquidacionPremios == null)
                {
                    _liquidacionPremios = new TrackableCollection<LiquidacionPremio>();
                    _liquidacionPremios.CollectionChanged += FixupLiquidacionPremios;
                }
                return _liquidacionPremios;
            }
            set
            {
                if (!ReferenceEquals(_liquidacionPremios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquidacionPremios != null)
                    {
                        _liquidacionPremios.CollectionChanged -= FixupLiquidacionPremios;
                    }
                    _liquidacionPremios = value;
                    if (_liquidacionPremios != null)
                    {
                        _liquidacionPremios.CollectionChanged += FixupLiquidacionPremios;
                    }
                    OnNavigationPropertyChanged("LiquidacionPremios");
                }
            }
        }
        private TrackableCollection<LiquidacionPremio> _liquidacionPremios;
    
        [DataMember]
        public Regla Regla
        {
            get { return _regla; }
            set
            {
                if (!ReferenceEquals(_regla, value))
                {
                    var previousValue = _regla;
                    _regla = value;
                    FixupRegla(previousValue);
                    OnNavigationPropertyChanged("Regla");
                }
            }
        }
        private Regla _regla;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Condicions.Clear();
            CondicionAgrupada = null;
            CondicionAgrupadas.Clear();
            CondicionAgrupadas1.Clear();
            DetalleLiquidacionReglas.Clear();
            PremioxSubreglas.Clear();
            SubRegla1 = null;
            SubRegla2 = null;
            LiquidacionPremios.Clear();
            Regla = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCondicionAgrupada(CondicionAgrupada previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SubReglas.Contains(this))
            {
                previousValue.SubReglas.Remove(this);
            }
    
            if (CondicionAgrupada != null)
            {
                if (!CondicionAgrupada.SubReglas.Contains(this))
                {
                    CondicionAgrupada.SubReglas.Add(this);
                }
    
                condicionAgrupada_id = CondicionAgrupada.id;
            }
            else if (!skipKeys)
            {
                condicionAgrupada_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CondicionAgrupada")
                    && (ChangeTracker.OriginalValues["CondicionAgrupada"] == CondicionAgrupada))
                {
                    ChangeTracker.OriginalValues.Remove("CondicionAgrupada");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CondicionAgrupada", previousValue);
                }
                if (CondicionAgrupada != null && !CondicionAgrupada.ChangeTracker.ChangeTrackingEnabled)
                {
                    CondicionAgrupada.StartTracking();
                }
            }
        }
    
        private void FixupSubRegla1(SubRegla previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (SubRegla1 != null)
            {
                ChangeTracker.ObjectStateChanging += SubRegla1.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.SubRegla2, this))
            {
                previousValue.SubRegla2 = null;
            }
    
            if (SubRegla1 != null)
            {
                SubRegla1.SubRegla2 = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubRegla1")
                    && (ChangeTracker.OriginalValues["SubRegla1"] == SubRegla1))
                {
                    ChangeTracker.OriginalValues.Remove("SubRegla1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubRegla1", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (SubRegla1 != null && !SubRegla1.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubRegla1.StartTracking();
                }
            }
        }
    
        private void FixupSubRegla2(SubRegla previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.SubRegla1, this))
            {
                previousValue.SubRegla1 = null;
            }
    
            if (SubRegla2 != null)
            {
                SubRegla2.SubRegla1 = this;
                id = SubRegla2.id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubRegla2")
                    && (ChangeTracker.OriginalValues["SubRegla2"] == SubRegla2))
                {
                    ChangeTracker.OriginalValues.Remove("SubRegla2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubRegla2", previousValue);
                }
                if (SubRegla2 != null && !SubRegla2.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubRegla2.StartTracking();
                }
            }
        }
    
        private void FixupRegla(Regla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SubReglas.Contains(this))
            {
                previousValue.SubReglas.Remove(this);
            }
    
            if (Regla != null)
            {
                if (!Regla.SubReglas.Contains(this))
                {
                    Regla.SubReglas.Add(this);
                }
    
                regla_id = Regla.id;
            }
            else if (!skipKeys)
            {
                regla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Regla")
                    && (ChangeTracker.OriginalValues["Regla"] == Regla))
                {
                    ChangeTracker.OriginalValues.Remove("Regla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Regla", previousValue);
                }
                if (Regla != null && !Regla.ChangeTracker.ChangeTrackingEnabled)
                {
                    Regla.StartTracking();
                }
            }
        }
    
        private void FixupCondicions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Condicion item in e.NewItems)
                {
                    item.SubRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Condicions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Condicion item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla, this))
                    {
                        item.SubRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Condicions", item);
                    }
                }
            }
        }
    
        private void FixupCondicionAgrupadas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CondicionAgrupada item in e.NewItems)
                {
                    item.SubRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CondicionAgrupada item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla, this))
                    {
                        item.SubRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
        }
    
        private void FixupCondicionAgrupadas1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CondicionAgrupada item in e.NewItems)
                {
                    item.SubRegla1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CondicionAgrupadas1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CondicionAgrupada item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla1, this))
                    {
                        item.SubRegla1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CondicionAgrupadas1", item);
                    }
                }
            }
        }
    
        private void FixupDetalleLiquidacionReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetalleLiquidacionRegla item in e.NewItems)
                {
                    item.SubRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetalleLiquidacionReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetalleLiquidacionRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla, this))
                    {
                        item.SubRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetalleLiquidacionReglas", item);
                    }
                }
            }
        }
    
        private void FixupPremioxSubreglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PremioxSubregla item in e.NewItems)
                {
                    item.SubRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PremioxSubreglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PremioxSubregla item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla, this))
                    {
                        item.SubRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PremioxSubreglas", item);
                    }
                }
            }
        }
    
        private void FixupLiquidacionPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquidacionPremio item in e.NewItems)
                {
                    item.SubRegla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquidacionPremios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquidacionPremio item in e.OldItems)
                {
                    if (ReferenceEquals(item.SubRegla, this))
                    {
                        item.SubRegla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquidacionPremios", item);
                    }
                }
            }
        }

        #endregion
    }
}
