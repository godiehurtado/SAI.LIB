//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(EstadoLiquidacion))]
    [KnownType(typeof(ComisionVariableAsesor))]
    [KnownType(typeof(ModeloComision))]
    public partial class LiquidacionComision: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int modelo_id
        {
            get { return _modelo_id; }
            set
            {
                if (_modelo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("modelo_id", _modelo_id);
                    if (!IsDeserializing)
                    {
                        if (ModeloComision != null && ModeloComision.id != value)
                        {
                            ModeloComision = null;
                        }
                    }
                    _modelo_id = value;
                    OnPropertyChanged("modelo_id");
                }
            }
        }
        private int _modelo_id;
    
        [DataMember]
        public byte tipoLiquidacion
        {
            get { return _tipoLiquidacion; }
            set
            {
                if (_tipoLiquidacion != value)
                {
                    _tipoLiquidacion = value;
                    OnPropertyChanged("tipoLiquidacion");
                }
            }
        }
        private byte _tipoLiquidacion;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public System.DateTime fecha
        {
            get { return _fecha; }
            set
            {
                if (_fecha != value)
                {
                    _fecha = value;
                    OnPropertyChanged("fecha");
                }
            }
        }
        private System.DateTime _fecha;
    
        [DataMember]
        public Nullable<int> periodo_id
        {
            get { return _periodo_id; }
            set
            {
                if (_periodo_id != value)
                {
                    _periodo_id = value;
                    OnPropertyChanged("periodo_id");
                }
            }
        }
        private Nullable<int> _periodo_id;
    
        [DataMember]
        public Nullable<int> estadoliquidacion_id
        {
            get { return _estadoliquidacion_id; }
            set
            {
                if (_estadoliquidacion_id != value)
                {
                    ChangeTracker.RecordOriginalValue("estadoliquidacion_id", _estadoliquidacion_id);
                    if (!IsDeserializing)
                    {
                        if (EstadoLiquidacion != null && EstadoLiquidacion.id != value)
                        {
                            EstadoLiquidacion = null;
                        }
                    }
                    _estadoliquidacion_id = value;
                    OnPropertyChanged("estadoliquidacion_id");
                }
            }
        }
        private Nullable<int> _estadoliquidacion_id;
    
        [DataMember]
        public Nullable<int> año
        {
            get { return _año; }
            set
            {
                if (_año != value)
                {
                    _año = value;
                    OnPropertyChanged("año");
                }
            }
        }
        private Nullable<int> _año;
    
        [DataMember]
        public Nullable<int> mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    _mes = value;
                    OnPropertyChanged("mes");
                }
            }
        }
        private Nullable<int> _mes;
    
        [DataMember]
        public string CodigoExt
        {
            get { return _codigoExt; }
            set
            {
                if (_codigoExt != value)
                {
                    _codigoExt = value;
                    OnPropertyChanged("CodigoExt");
                }
            }
        }
        private string _codigoExt;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public EstadoLiquidacion EstadoLiquidacion
        {
            get { return _estadoLiquidacion; }
            set
            {
                if (!ReferenceEquals(_estadoLiquidacion, value))
                {
                    var previousValue = _estadoLiquidacion;
                    _estadoLiquidacion = value;
                    FixupEstadoLiquidacion(previousValue);
                    OnNavigationPropertyChanged("EstadoLiquidacion");
                }
            }
        }
        private EstadoLiquidacion _estadoLiquidacion;
    
        [DataMember]
        public TrackableCollection<ComisionVariableAsesor> ComisionVariableAsesors
        {
            get
            {
                if (_comisionVariableAsesors == null)
                {
                    _comisionVariableAsesors = new TrackableCollection<ComisionVariableAsesor>();
                    _comisionVariableAsesors.CollectionChanged += FixupComisionVariableAsesors;
                }
                return _comisionVariableAsesors;
            }
            set
            {
                if (!ReferenceEquals(_comisionVariableAsesors, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_comisionVariableAsesors != null)
                    {
                        _comisionVariableAsesors.CollectionChanged -= FixupComisionVariableAsesors;
                    }
                    _comisionVariableAsesors = value;
                    if (_comisionVariableAsesors != null)
                    {
                        _comisionVariableAsesors.CollectionChanged += FixupComisionVariableAsesors;
                    }
                    OnNavigationPropertyChanged("ComisionVariableAsesors");
                }
            }
        }
        private TrackableCollection<ComisionVariableAsesor> _comisionVariableAsesors;
    
        [DataMember]
        public ModeloComision ModeloComision
        {
            get { return _modeloComision; }
            set
            {
                if (!ReferenceEquals(_modeloComision, value))
                {
                    var previousValue = _modeloComision;
                    _modeloComision = value;
                    FixupModeloComision(previousValue);
                    OnNavigationPropertyChanged("ModeloComision");
                }
            }
        }
        private ModeloComision _modeloComision;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            EstadoLiquidacion = null;
            ComisionVariableAsesors.Clear();
            ModeloComision = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupEstadoLiquidacion(EstadoLiquidacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionComisions.Contains(this))
            {
                previousValue.LiquidacionComisions.Remove(this);
            }
    
            if (EstadoLiquidacion != null)
            {
                if (!EstadoLiquidacion.LiquidacionComisions.Contains(this))
                {
                    EstadoLiquidacion.LiquidacionComisions.Add(this);
                }
    
                estadoliquidacion_id = EstadoLiquidacion.id;
            }
            else if (!skipKeys)
            {
                estadoliquidacion_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EstadoLiquidacion")
                    && (ChangeTracker.OriginalValues["EstadoLiquidacion"] == EstadoLiquidacion))
                {
                    ChangeTracker.OriginalValues.Remove("EstadoLiquidacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EstadoLiquidacion", previousValue);
                }
                if (EstadoLiquidacion != null && !EstadoLiquidacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    EstadoLiquidacion.StartTracking();
                }
            }
        }
    
        private void FixupModeloComision(ModeloComision previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionComisions.Contains(this))
            {
                previousValue.LiquidacionComisions.Remove(this);
            }
    
            if (ModeloComision != null)
            {
                if (!ModeloComision.LiquidacionComisions.Contains(this))
                {
                    ModeloComision.LiquidacionComisions.Add(this);
                }
    
                modelo_id = ModeloComision.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ModeloComision")
                    && (ChangeTracker.OriginalValues["ModeloComision"] == ModeloComision))
                {
                    ChangeTracker.OriginalValues.Remove("ModeloComision");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ModeloComision", previousValue);
                }
                if (ModeloComision != null && !ModeloComision.ChangeTracker.ChangeTrackingEnabled)
                {
                    ModeloComision.StartTracking();
                }
            }
        }
    
        private void FixupComisionVariableAsesors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ComisionVariableAsesor item in e.NewItems)
                {
                    item.LiquidacionComision = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ComisionVariableAsesors", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ComisionVariableAsesor item in e.OldItems)
                {
                    if (ReferenceEquals(item.LiquidacionComision, this))
                    {
                        item.LiquidacionComision = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ComisionVariableAsesors", item);
                    }
                }
            }
        }

        #endregion
    }
}
