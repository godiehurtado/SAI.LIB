//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetallePagosFranquicia))]
    [KnownType(typeof(DetallePagosRegla))]
    [KnownType(typeof(LiquiContratFactorParticipante))]
    public partial class AuditoriaAjuste: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> detallePagosRegla_id
        {
            get { return _detallePagosRegla_id; }
            set
            {
                if (_detallePagosRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("detallePagosRegla_id", _detallePagosRegla_id);
                    if (!IsDeserializing)
                    {
                        if (DetallePagosRegla != null && DetallePagosRegla.id != value)
                        {
                            DetallePagosRegla = null;
                        }
                    }
                    _detallePagosRegla_id = value;
                    OnPropertyChanged("detallePagosRegla_id");
                }
            }
        }
        private Nullable<int> _detallePagosRegla_id;
    
        [DataMember]
        public Nullable<int> detallePagosFranquicia_id
        {
            get { return _detallePagosFranquicia_id; }
            set
            {
                if (_detallePagosFranquicia_id != value)
                {
                    ChangeTracker.RecordOriginalValue("detallePagosFranquicia_id", _detallePagosFranquicia_id);
                    if (!IsDeserializing)
                    {
                        if (DetallePagosFranquicia != null && DetallePagosFranquicia.id != value)
                        {
                            DetallePagosFranquicia = null;
                        }
                    }
                    _detallePagosFranquicia_id = value;
                    OnPropertyChanged("detallePagosFranquicia_id");
                }
            }
        }
        private Nullable<int> _detallePagosFranquicia_id;
    
        [DataMember]
        public Nullable<int> liquiContratFactorParticipante_id
        {
            get { return _liquiContratFactorParticipante_id; }
            set
            {
                if (_liquiContratFactorParticipante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquiContratFactorParticipante_id", _liquiContratFactorParticipante_id);
                    if (!IsDeserializing)
                    {
                        if (LiquiContratFactorParticipante != null && LiquiContratFactorParticipante.id != value)
                        {
                            LiquiContratFactorParticipante = null;
                        }
                    }
                    _liquiContratFactorParticipante_id = value;
                    OnPropertyChanged("liquiContratFactorParticipante_id");
                }
            }
        }
        private Nullable<int> _liquiContratFactorParticipante_id;
    
        [DataMember]
        public System.DateTime fecha
        {
            get { return _fecha; }
            set
            {
                if (_fecha != value)
                {
                    _fecha = value;
                    OnPropertyChanged("fecha");
                }
            }
        }
        private System.DateTime _fecha;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public double valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("valor");
                }
            }
        }
        private double _valor;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DetallePagosFranquicia DetallePagosFranquicia
        {
            get { return _detallePagosFranquicia; }
            set
            {
                if (!ReferenceEquals(_detallePagosFranquicia, value))
                {
                    var previousValue = _detallePagosFranquicia;
                    _detallePagosFranquicia = value;
                    FixupDetallePagosFranquicia(previousValue);
                    OnNavigationPropertyChanged("DetallePagosFranquicia");
                }
            }
        }
        private DetallePagosFranquicia _detallePagosFranquicia;
    
        [DataMember]
        public DetallePagosRegla DetallePagosRegla
        {
            get { return _detallePagosRegla; }
            set
            {
                if (!ReferenceEquals(_detallePagosRegla, value))
                {
                    var previousValue = _detallePagosRegla;
                    _detallePagosRegla = value;
                    FixupDetallePagosRegla(previousValue);
                    OnNavigationPropertyChanged("DetallePagosRegla");
                }
            }
        }
        private DetallePagosRegla _detallePagosRegla;
    
        [DataMember]
        public LiquiContratFactorParticipante LiquiContratFactorParticipante
        {
            get { return _liquiContratFactorParticipante; }
            set
            {
                if (!ReferenceEquals(_liquiContratFactorParticipante, value))
                {
                    var previousValue = _liquiContratFactorParticipante;
                    _liquiContratFactorParticipante = value;
                    FixupLiquiContratFactorParticipante(previousValue);
                    OnNavigationPropertyChanged("LiquiContratFactorParticipante");
                }
            }
        }
        private LiquiContratFactorParticipante _liquiContratFactorParticipante;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetallePagosFranquicia = null;
            DetallePagosRegla = null;
            LiquiContratFactorParticipante = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDetallePagosFranquicia(DetallePagosFranquicia previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuditoriaAjustes.Contains(this))
            {
                previousValue.AuditoriaAjustes.Remove(this);
            }
    
            if (DetallePagosFranquicia != null)
            {
                if (!DetallePagosFranquicia.AuditoriaAjustes.Contains(this))
                {
                    DetallePagosFranquicia.AuditoriaAjustes.Add(this);
                }
    
                detallePagosFranquicia_id = DetallePagosFranquicia.id;
            }
            else if (!skipKeys)
            {
                detallePagosFranquicia_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetallePagosFranquicia")
                    && (ChangeTracker.OriginalValues["DetallePagosFranquicia"] == DetallePagosFranquicia))
                {
                    ChangeTracker.OriginalValues.Remove("DetallePagosFranquicia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetallePagosFranquicia", previousValue);
                }
                if (DetallePagosFranquicia != null && !DetallePagosFranquicia.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetallePagosFranquicia.StartTracking();
                }
            }
        }
    
        private void FixupDetallePagosRegla(DetallePagosRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuditoriaAjustes.Contains(this))
            {
                previousValue.AuditoriaAjustes.Remove(this);
            }
    
            if (DetallePagosRegla != null)
            {
                if (!DetallePagosRegla.AuditoriaAjustes.Contains(this))
                {
                    DetallePagosRegla.AuditoriaAjustes.Add(this);
                }
    
                detallePagosRegla_id = DetallePagosRegla.id;
            }
            else if (!skipKeys)
            {
                detallePagosRegla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetallePagosRegla")
                    && (ChangeTracker.OriginalValues["DetallePagosRegla"] == DetallePagosRegla))
                {
                    ChangeTracker.OriginalValues.Remove("DetallePagosRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetallePagosRegla", previousValue);
                }
                if (DetallePagosRegla != null && !DetallePagosRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetallePagosRegla.StartTracking();
                }
            }
        }
    
        private void FixupLiquiContratFactorParticipante(LiquiContratFactorParticipante previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AuditoriaAjustes.Contains(this))
            {
                previousValue.AuditoriaAjustes.Remove(this);
            }
    
            if (LiquiContratFactorParticipante != null)
            {
                if (!LiquiContratFactorParticipante.AuditoriaAjustes.Contains(this))
                {
                    LiquiContratFactorParticipante.AuditoriaAjustes.Add(this);
                }
    
                liquiContratFactorParticipante_id = LiquiContratFactorParticipante.id;
            }
            else if (!skipKeys)
            {
                liquiContratFactorParticipante_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquiContratFactorParticipante")
                    && (ChangeTracker.OriginalValues["LiquiContratFactorParticipante"] == LiquiContratFactorParticipante))
                {
                    ChangeTracker.OriginalValues.Remove("LiquiContratFactorParticipante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquiContratFactorParticipante", previousValue);
                }
                if (LiquiContratFactorParticipante != null && !LiquiContratFactorParticipante.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquiContratFactorParticipante.StartTracking();
                }
            }
        }

        #endregion
    }
}
