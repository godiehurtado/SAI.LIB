//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Concurso))]
    [KnownType(typeof(CondicionAgrupada))]
    [KnownType(typeof(EstrategiaRegla))]
    [KnownType(typeof(LiquidacionRegla))]
    [KnownType(typeof(PeriodoRegla))]
    [KnownType(typeof(TipoRegla))]
    [KnownType(typeof(ReglaxConceptoDescuento))]
    [KnownType(typeof(SubRegla))]
    [KnownType(typeof(CategoriaxRegla))]
    public partial class Regla: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public Nullable<int> concurso_id
        {
            get { return _concurso_id; }
            set
            {
                if (_concurso_id != value)
                {
                    ChangeTracker.RecordOriginalValue("concurso_id", _concurso_id);
                    if (!IsDeserializing)
                    {
                        if (Concurso != null && Concurso.id != value)
                        {
                            Concurso = null;
                        }
                    }
                    _concurso_id = value;
                    OnPropertyChanged("concurso_id");
                }
            }
        }
        private Nullable<int> _concurso_id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<int> tipoRegla_id
        {
            get { return _tipoRegla_id; }
            set
            {
                if (_tipoRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoRegla_id", _tipoRegla_id);
                    if (!IsDeserializing)
                    {
                        if (TipoRegla != null && TipoRegla.id != value)
                        {
                            TipoRegla = null;
                        }
                    }
                    _tipoRegla_id = value;
                    OnPropertyChanged("tipoRegla_id");
                }
            }
        }
        private Nullable<int> _tipoRegla_id;
    
        [DataMember]
        public Nullable<int> periodoRegla_id
        {
            get { return _periodoRegla_id; }
            set
            {
                if (_periodoRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("periodoRegla_id", _periodoRegla_id);
                    if (!IsDeserializing)
                    {
                        if (PeriodoRegla != null && PeriodoRegla.id != value)
                        {
                            PeriodoRegla = null;
                        }
                    }
                    _periodoRegla_id = value;
                    OnPropertyChanged("periodoRegla_id");
                }
            }
        }
        private Nullable<int> _periodoRegla_id;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_inicio
        {
            get { return _fecha_inicio; }
            set
            {
                if (_fecha_inicio != value)
                {
                    _fecha_inicio = value;
                    OnPropertyChanged("fecha_inicio");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_inicio;
    
        [DataMember]
        public Nullable<int> estrategiaregla_id
        {
            get { return _estrategiaregla_id; }
            set
            {
                if (_estrategiaregla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("estrategiaregla_id", _estrategiaregla_id);
                    if (!IsDeserializing)
                    {
                        if (EstrategiaRegla != null && EstrategiaRegla.id != value)
                        {
                            EstrategiaRegla = null;
                        }
                    }
                    _estrategiaregla_id = value;
                    OnPropertyChanged("estrategiaregla_id");
                }
            }
        }
        private Nullable<int> _estrategiaregla_id;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_fin
        {
            get { return _fecha_fin; }
            set
            {
                if (_fecha_fin != value)
                {
                    _fecha_fin = value;
                    OnPropertyChanged("fecha_fin");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_fin;
    
        [DataMember]
        public Nullable<int> regla_id
        {
            get { return _regla_id; }
            set
            {
                if (_regla_id != value)
                {
                    _regla_id = value;
                    OnPropertyChanged("regla_id");
                }
            }
        }
        private Nullable<int> _regla_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Concurso Concurso
        {
            get { return _concurso; }
            set
            {
                if (!ReferenceEquals(_concurso, value))
                {
                    var previousValue = _concurso;
                    _concurso = value;
                    FixupConcurso(previousValue);
                    OnNavigationPropertyChanged("Concurso");
                }
            }
        }
        private Concurso _concurso;
    
        [DataMember]
        public TrackableCollection<CondicionAgrupada> CondicionAgrupadas
        {
            get
            {
                if (_condicionAgrupadas == null)
                {
                    _condicionAgrupadas = new TrackableCollection<CondicionAgrupada>();
                    _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                }
                return _condicionAgrupadas;
            }
            set
            {
                if (!ReferenceEquals(_condicionAgrupadas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged -= FixupCondicionAgrupadas;
                    }
                    _condicionAgrupadas = value;
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                    }
                    OnNavigationPropertyChanged("CondicionAgrupadas");
                }
            }
        }
        private TrackableCollection<CondicionAgrupada> _condicionAgrupadas;
    
        [DataMember]
        public EstrategiaRegla EstrategiaRegla
        {
            get { return _estrategiaRegla; }
            set
            {
                if (!ReferenceEquals(_estrategiaRegla, value))
                {
                    var previousValue = _estrategiaRegla;
                    _estrategiaRegla = value;
                    FixupEstrategiaRegla(previousValue);
                    OnNavigationPropertyChanged("EstrategiaRegla");
                }
            }
        }
        private EstrategiaRegla _estrategiaRegla;
    
        [DataMember]
        public TrackableCollection<LiquidacionRegla> LiquidacionReglas
        {
            get
            {
                if (_liquidacionReglas == null)
                {
                    _liquidacionReglas = new TrackableCollection<LiquidacionRegla>();
                    _liquidacionReglas.CollectionChanged += FixupLiquidacionReglas;
                }
                return _liquidacionReglas;
            }
            set
            {
                if (!ReferenceEquals(_liquidacionReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquidacionReglas != null)
                    {
                        _liquidacionReglas.CollectionChanged -= FixupLiquidacionReglas;
                    }
                    _liquidacionReglas = value;
                    if (_liquidacionReglas != null)
                    {
                        _liquidacionReglas.CollectionChanged += FixupLiquidacionReglas;
                    }
                    OnNavigationPropertyChanged("LiquidacionReglas");
                }
            }
        }
        private TrackableCollection<LiquidacionRegla> _liquidacionReglas;
    
        [DataMember]
        public PeriodoRegla PeriodoRegla
        {
            get { return _periodoRegla; }
            set
            {
                if (!ReferenceEquals(_periodoRegla, value))
                {
                    var previousValue = _periodoRegla;
                    _periodoRegla = value;
                    FixupPeriodoRegla(previousValue);
                    OnNavigationPropertyChanged("PeriodoRegla");
                }
            }
        }
        private PeriodoRegla _periodoRegla;
    
        [DataMember]
        public TipoRegla TipoRegla
        {
            get { return _tipoRegla; }
            set
            {
                if (!ReferenceEquals(_tipoRegla, value))
                {
                    var previousValue = _tipoRegla;
                    _tipoRegla = value;
                    FixupTipoRegla(previousValue);
                    OnNavigationPropertyChanged("TipoRegla");
                }
            }
        }
        private TipoRegla _tipoRegla;
    
        [DataMember]
        public TrackableCollection<ReglaxConceptoDescuento> ReglaxConceptoDescuentoes
        {
            get
            {
                if (_reglaxConceptoDescuentoes == null)
                {
                    _reglaxConceptoDescuentoes = new TrackableCollection<ReglaxConceptoDescuento>();
                    _reglaxConceptoDescuentoes.CollectionChanged += FixupReglaxConceptoDescuentoes;
                }
                return _reglaxConceptoDescuentoes;
            }
            set
            {
                if (!ReferenceEquals(_reglaxConceptoDescuentoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reglaxConceptoDescuentoes != null)
                    {
                        _reglaxConceptoDescuentoes.CollectionChanged -= FixupReglaxConceptoDescuentoes;
                    }
                    _reglaxConceptoDescuentoes = value;
                    if (_reglaxConceptoDescuentoes != null)
                    {
                        _reglaxConceptoDescuentoes.CollectionChanged += FixupReglaxConceptoDescuentoes;
                    }
                    OnNavigationPropertyChanged("ReglaxConceptoDescuentoes");
                }
            }
        }
        private TrackableCollection<ReglaxConceptoDescuento> _reglaxConceptoDescuentoes;
    
        [DataMember]
        public TrackableCollection<SubRegla> SubReglas
        {
            get
            {
                if (_subReglas == null)
                {
                    _subReglas = new TrackableCollection<SubRegla>();
                    _subReglas.CollectionChanged += FixupSubReglas;
                }
                return _subReglas;
            }
            set
            {
                if (!ReferenceEquals(_subReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_subReglas != null)
                    {
                        _subReglas.CollectionChanged -= FixupSubReglas;
                    }
                    _subReglas = value;
                    if (_subReglas != null)
                    {
                        _subReglas.CollectionChanged += FixupSubReglas;
                    }
                    OnNavigationPropertyChanged("SubReglas");
                }
            }
        }
        private TrackableCollection<SubRegla> _subReglas;
    
        [DataMember]
        public TrackableCollection<CategoriaxRegla> CategoriaxReglas
        {
            get
            {
                if (_categoriaxReglas == null)
                {
                    _categoriaxReglas = new TrackableCollection<CategoriaxRegla>();
                    _categoriaxReglas.CollectionChanged += FixupCategoriaxReglas;
                }
                return _categoriaxReglas;
            }
            set
            {
                if (!ReferenceEquals(_categoriaxReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_categoriaxReglas != null)
                    {
                        _categoriaxReglas.CollectionChanged -= FixupCategoriaxReglas;
                    }
                    _categoriaxReglas = value;
                    if (_categoriaxReglas != null)
                    {
                        _categoriaxReglas.CollectionChanged += FixupCategoriaxReglas;
                    }
                    OnNavigationPropertyChanged("CategoriaxReglas");
                }
            }
        }
        private TrackableCollection<CategoriaxRegla> _categoriaxReglas;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Concurso = null;
            CondicionAgrupadas.Clear();
            EstrategiaRegla = null;
            LiquidacionReglas.Clear();
            PeriodoRegla = null;
            TipoRegla = null;
            ReglaxConceptoDescuentoes.Clear();
            SubReglas.Clear();
            CategoriaxReglas.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupConcurso(Concurso previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reglas.Contains(this))
            {
                previousValue.Reglas.Remove(this);
            }
    
            if (Concurso != null)
            {
                if (!Concurso.Reglas.Contains(this))
                {
                    Concurso.Reglas.Add(this);
                }
    
                concurso_id = Concurso.id;
            }
            else if (!skipKeys)
            {
                concurso_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Concurso")
                    && (ChangeTracker.OriginalValues["Concurso"] == Concurso))
                {
                    ChangeTracker.OriginalValues.Remove("Concurso");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Concurso", previousValue);
                }
                if (Concurso != null && !Concurso.ChangeTracker.ChangeTrackingEnabled)
                {
                    Concurso.StartTracking();
                }
            }
        }
    
        private void FixupEstrategiaRegla(EstrategiaRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reglas.Contains(this))
            {
                previousValue.Reglas.Remove(this);
            }
    
            if (EstrategiaRegla != null)
            {
                if (!EstrategiaRegla.Reglas.Contains(this))
                {
                    EstrategiaRegla.Reglas.Add(this);
                }
    
                estrategiaregla_id = EstrategiaRegla.id;
            }
            else if (!skipKeys)
            {
                estrategiaregla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EstrategiaRegla")
                    && (ChangeTracker.OriginalValues["EstrategiaRegla"] == EstrategiaRegla))
                {
                    ChangeTracker.OriginalValues.Remove("EstrategiaRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("EstrategiaRegla", previousValue);
                }
                if (EstrategiaRegla != null && !EstrategiaRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    EstrategiaRegla.StartTracking();
                }
            }
        }
    
        private void FixupPeriodoRegla(PeriodoRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reglas.Contains(this))
            {
                previousValue.Reglas.Remove(this);
            }
    
            if (PeriodoRegla != null)
            {
                if (!PeriodoRegla.Reglas.Contains(this))
                {
                    PeriodoRegla.Reglas.Add(this);
                }
    
                periodoRegla_id = PeriodoRegla.id;
            }
            else if (!skipKeys)
            {
                periodoRegla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PeriodoRegla")
                    && (ChangeTracker.OriginalValues["PeriodoRegla"] == PeriodoRegla))
                {
                    ChangeTracker.OriginalValues.Remove("PeriodoRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PeriodoRegla", previousValue);
                }
                if (PeriodoRegla != null && !PeriodoRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    PeriodoRegla.StartTracking();
                }
            }
        }
    
        private void FixupTipoRegla(TipoRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Reglas.Contains(this))
            {
                previousValue.Reglas.Remove(this);
            }
    
            if (TipoRegla != null)
            {
                if (!TipoRegla.Reglas.Contains(this))
                {
                    TipoRegla.Reglas.Add(this);
                }
    
                tipoRegla_id = TipoRegla.id;
            }
            else if (!skipKeys)
            {
                tipoRegla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoRegla")
                    && (ChangeTracker.OriginalValues["TipoRegla"] == TipoRegla))
                {
                    ChangeTracker.OriginalValues.Remove("TipoRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoRegla", previousValue);
                }
                if (TipoRegla != null && !TipoRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoRegla.StartTracking();
                }
            }
        }
    
        private void FixupCondicionAgrupadas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CondicionAgrupada item in e.NewItems)
                {
                    item.Regla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CondicionAgrupada item in e.OldItems)
                {
                    if (ReferenceEquals(item.Regla, this))
                    {
                        item.Regla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
        }
    
        private void FixupLiquidacionReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquidacionRegla item in e.NewItems)
                {
                    item.Regla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquidacionReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquidacionRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Regla, this))
                    {
                        item.Regla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquidacionReglas", item);
                    }
                }
            }
        }
    
        private void FixupReglaxConceptoDescuentoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ReglaxConceptoDescuento item in e.NewItems)
                {
                    item.Regla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ReglaxConceptoDescuentoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ReglaxConceptoDescuento item in e.OldItems)
                {
                    if (ReferenceEquals(item.Regla, this))
                    {
                        item.Regla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ReglaxConceptoDescuentoes", item);
                    }
                }
            }
        }
    
        private void FixupSubReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SubRegla item in e.NewItems)
                {
                    item.Regla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SubReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Regla, this))
                    {
                        item.Regla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SubReglas", item);
                    }
                }
            }
        }
    
        private void FixupCategoriaxReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CategoriaxRegla item in e.NewItems)
                {
                    item.Regla = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CategoriaxReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CategoriaxRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Regla, this))
                    {
                        item.Regla = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CategoriaxReglas", item);
                    }
                }
            }
        }

        #endregion
    }
}
