//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetallePartFranquicia))]
    [KnownType(typeof(PeriodoProducto))]
    [KnownType(typeof(Persistencia))]
    [KnownType(typeof(Plan))]
    [KnownType(typeof(Plazo))]
    [KnownType(typeof(ProductoDetalle))]
    [KnownType(typeof(Ramo))]
    [KnownType(typeof(ProductoConcurso))]
    [KnownType(typeof(ProductosMeta))]
    [KnownType(typeof(TopeMoneda))]
    [KnownType(typeof(TopexEdad))]
    [KnownType(typeof(ProductoCombo))]
    [KnownType(typeof(Excepcion))]
    [KnownType(typeof(MonedaxNegocio))]
    public partial class Producto: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<int> ramo_id
        {
            get { return _ramo_id; }
            set
            {
                if (_ramo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("ramo_id", _ramo_id);
                    if (!IsDeserializing)
                    {
                        if (Ramo != null && Ramo.id != value)
                        {
                            Ramo = null;
                        }
                    }
                    _ramo_id = value;
                    OnPropertyChanged("ramo_id");
                }
            }
        }
        private Nullable<int> _ramo_id;
    
        [DataMember]
        public Nullable<int> plazo_id
        {
            get { return _plazo_id; }
            set
            {
                if (_plazo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("plazo_id", _plazo_id);
                    if (!IsDeserializing)
                    {
                        if (Plazo != null && Plazo.id != value)
                        {
                            Plazo = null;
                        }
                    }
                    _plazo_id = value;
                    OnPropertyChanged("plazo_id");
                }
            }
        }
        private Nullable<int> _plazo_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DetallePartFranquicia> DetallePartFranquicias
        {
            get
            {
                if (_detallePartFranquicias == null)
                {
                    _detallePartFranquicias = new TrackableCollection<DetallePartFranquicia>();
                    _detallePartFranquicias.CollectionChanged += FixupDetallePartFranquicias;
                }
                return _detallePartFranquicias;
            }
            set
            {
                if (!ReferenceEquals(_detallePartFranquicias, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detallePartFranquicias != null)
                    {
                        _detallePartFranquicias.CollectionChanged -= FixupDetallePartFranquicias;
                    }
                    _detallePartFranquicias = value;
                    if (_detallePartFranquicias != null)
                    {
                        _detallePartFranquicias.CollectionChanged += FixupDetallePartFranquicias;
                    }
                    OnNavigationPropertyChanged("DetallePartFranquicias");
                }
            }
        }
        private TrackableCollection<DetallePartFranquicia> _detallePartFranquicias;
    
        [DataMember]
        public TrackableCollection<PeriodoProducto> PeriodoProductoes
        {
            get
            {
                if (_periodoProductoes == null)
                {
                    _periodoProductoes = new TrackableCollection<PeriodoProducto>();
                    _periodoProductoes.CollectionChanged += FixupPeriodoProductoes;
                }
                return _periodoProductoes;
            }
            set
            {
                if (!ReferenceEquals(_periodoProductoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_periodoProductoes != null)
                    {
                        _periodoProductoes.CollectionChanged -= FixupPeriodoProductoes;
                    }
                    _periodoProductoes = value;
                    if (_periodoProductoes != null)
                    {
                        _periodoProductoes.CollectionChanged += FixupPeriodoProductoes;
                    }
                    OnNavigationPropertyChanged("PeriodoProductoes");
                }
            }
        }
        private TrackableCollection<PeriodoProducto> _periodoProductoes;
    
        [DataMember]
        public TrackableCollection<Persistencia> Persistencias
        {
            get
            {
                if (_persistencias == null)
                {
                    _persistencias = new TrackableCollection<Persistencia>();
                    _persistencias.CollectionChanged += FixupPersistencias;
                }
                return _persistencias;
            }
            set
            {
                if (!ReferenceEquals(_persistencias, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_persistencias != null)
                    {
                        _persistencias.CollectionChanged -= FixupPersistencias;
                    }
                    _persistencias = value;
                    if (_persistencias != null)
                    {
                        _persistencias.CollectionChanged += FixupPersistencias;
                    }
                    OnNavigationPropertyChanged("Persistencias");
                }
            }
        }
        private TrackableCollection<Persistencia> _persistencias;
    
        [DataMember]
        public TrackableCollection<Plan> Plans
        {
            get
            {
                if (_plans == null)
                {
                    _plans = new TrackableCollection<Plan>();
                    _plans.CollectionChanged += FixupPlans;
                }
                return _plans;
            }
            set
            {
                if (!ReferenceEquals(_plans, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_plans != null)
                    {
                        _plans.CollectionChanged -= FixupPlans;
                    }
                    _plans = value;
                    if (_plans != null)
                    {
                        _plans.CollectionChanged += FixupPlans;
                    }
                    OnNavigationPropertyChanged("Plans");
                }
            }
        }
        private TrackableCollection<Plan> _plans;
    
        [DataMember]
        public Plazo Plazo
        {
            get { return _plazo; }
            set
            {
                if (!ReferenceEquals(_plazo, value))
                {
                    var previousValue = _plazo;
                    _plazo = value;
                    FixupPlazo(previousValue);
                    OnNavigationPropertyChanged("Plazo");
                }
            }
        }
        private Plazo _plazo;
    
        [DataMember]
        public TrackableCollection<ProductoDetalle> ProductoDetalles
        {
            get
            {
                if (_productoDetalles == null)
                {
                    _productoDetalles = new TrackableCollection<ProductoDetalle>();
                    _productoDetalles.CollectionChanged += FixupProductoDetalles;
                }
                return _productoDetalles;
            }
            set
            {
                if (!ReferenceEquals(_productoDetalles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productoDetalles != null)
                    {
                        _productoDetalles.CollectionChanged -= FixupProductoDetalles;
                    }
                    _productoDetalles = value;
                    if (_productoDetalles != null)
                    {
                        _productoDetalles.CollectionChanged += FixupProductoDetalles;
                    }
                    OnNavigationPropertyChanged("ProductoDetalles");
                }
            }
        }
        private TrackableCollection<ProductoDetalle> _productoDetalles;
    
        [DataMember]
        public Ramo Ramo
        {
            get { return _ramo; }
            set
            {
                if (!ReferenceEquals(_ramo, value))
                {
                    var previousValue = _ramo;
                    _ramo = value;
                    FixupRamo(previousValue);
                    OnNavigationPropertyChanged("Ramo");
                }
            }
        }
        private Ramo _ramo;
    
        [DataMember]
        public TrackableCollection<ProductoConcurso> ProductoConcursoes
        {
            get
            {
                if (_productoConcursoes == null)
                {
                    _productoConcursoes = new TrackableCollection<ProductoConcurso>();
                    _productoConcursoes.CollectionChanged += FixupProductoConcursoes;
                }
                return _productoConcursoes;
            }
            set
            {
                if (!ReferenceEquals(_productoConcursoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productoConcursoes != null)
                    {
                        _productoConcursoes.CollectionChanged -= FixupProductoConcursoes;
                    }
                    _productoConcursoes = value;
                    if (_productoConcursoes != null)
                    {
                        _productoConcursoes.CollectionChanged += FixupProductoConcursoes;
                    }
                    OnNavigationPropertyChanged("ProductoConcursoes");
                }
            }
        }
        private TrackableCollection<ProductoConcurso> _productoConcursoes;
    
        [DataMember]
        public TrackableCollection<ProductosMeta> ProductosMetas
        {
            get
            {
                if (_productosMetas == null)
                {
                    _productosMetas = new TrackableCollection<ProductosMeta>();
                    _productosMetas.CollectionChanged += FixupProductosMetas;
                }
                return _productosMetas;
            }
            set
            {
                if (!ReferenceEquals(_productosMetas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productosMetas != null)
                    {
                        _productosMetas.CollectionChanged -= FixupProductosMetas;
                    }
                    _productosMetas = value;
                    if (_productosMetas != null)
                    {
                        _productosMetas.CollectionChanged += FixupProductosMetas;
                    }
                    OnNavigationPropertyChanged("ProductosMetas");
                }
            }
        }
        private TrackableCollection<ProductosMeta> _productosMetas;
    
        [DataMember]
        public TrackableCollection<ProductosMeta> ProductosMetas1
        {
            get
            {
                if (_productosMetas1 == null)
                {
                    _productosMetas1 = new TrackableCollection<ProductosMeta>();
                    _productosMetas1.CollectionChanged += FixupProductosMetas1;
                }
                return _productosMetas1;
            }
            set
            {
                if (!ReferenceEquals(_productosMetas1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productosMetas1 != null)
                    {
                        _productosMetas1.CollectionChanged -= FixupProductosMetas1;
                    }
                    _productosMetas1 = value;
                    if (_productosMetas1 != null)
                    {
                        _productosMetas1.CollectionChanged += FixupProductosMetas1;
                    }
                    OnNavigationPropertyChanged("ProductosMetas1");
                }
            }
        }
        private TrackableCollection<ProductosMeta> _productosMetas1;
    
        [DataMember]
        public TrackableCollection<TopeMoneda> TopeMonedas
        {
            get
            {
                if (_topeMonedas == null)
                {
                    _topeMonedas = new TrackableCollection<TopeMoneda>();
                    _topeMonedas.CollectionChanged += FixupTopeMonedas;
                }
                return _topeMonedas;
            }
            set
            {
                if (!ReferenceEquals(_topeMonedas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_topeMonedas != null)
                    {
                        _topeMonedas.CollectionChanged -= FixupTopeMonedas;
                    }
                    _topeMonedas = value;
                    if (_topeMonedas != null)
                    {
                        _topeMonedas.CollectionChanged += FixupTopeMonedas;
                    }
                    OnNavigationPropertyChanged("TopeMonedas");
                }
            }
        }
        private TrackableCollection<TopeMoneda> _topeMonedas;
    
        [DataMember]
        public TrackableCollection<TopexEdad> TopexEdads
        {
            get
            {
                if (_topexEdads == null)
                {
                    _topexEdads = new TrackableCollection<TopexEdad>();
                    _topexEdads.CollectionChanged += FixupTopexEdads;
                }
                return _topexEdads;
            }
            set
            {
                if (!ReferenceEquals(_topexEdads, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_topexEdads != null)
                    {
                        _topexEdads.CollectionChanged -= FixupTopexEdads;
                    }
                    _topexEdads = value;
                    if (_topexEdads != null)
                    {
                        _topexEdads.CollectionChanged += FixupTopexEdads;
                    }
                    OnNavigationPropertyChanged("TopexEdads");
                }
            }
        }
        private TrackableCollection<TopexEdad> _topexEdads;
    
        [DataMember]
        public TrackableCollection<ProductoCombo> ProductoComboes
        {
            get
            {
                if (_productoComboes == null)
                {
                    _productoComboes = new TrackableCollection<ProductoCombo>();
                    _productoComboes.CollectionChanged += FixupProductoComboes;
                }
                return _productoComboes;
            }
            set
            {
                if (!ReferenceEquals(_productoComboes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productoComboes != null)
                    {
                        _productoComboes.CollectionChanged -= FixupProductoComboes;
                    }
                    _productoComboes = value;
                    if (_productoComboes != null)
                    {
                        _productoComboes.CollectionChanged += FixupProductoComboes;
                    }
                    OnNavigationPropertyChanged("ProductoComboes");
                }
            }
        }
        private TrackableCollection<ProductoCombo> _productoComboes;
    
        [DataMember]
        public TrackableCollection<Excepcion> Excepcions
        {
            get
            {
                if (_excepcions == null)
                {
                    _excepcions = new TrackableCollection<Excepcion>();
                    _excepcions.CollectionChanged += FixupExcepcions;
                }
                return _excepcions;
            }
            set
            {
                if (!ReferenceEquals(_excepcions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_excepcions != null)
                    {
                        _excepcions.CollectionChanged -= FixupExcepcions;
                    }
                    _excepcions = value;
                    if (_excepcions != null)
                    {
                        _excepcions.CollectionChanged += FixupExcepcions;
                    }
                    OnNavigationPropertyChanged("Excepcions");
                }
            }
        }
        private TrackableCollection<Excepcion> _excepcions;
    
        [DataMember]
        public TrackableCollection<MonedaxNegocio> MonedaxNegocios
        {
            get
            {
                if (_monedaxNegocios == null)
                {
                    _monedaxNegocios = new TrackableCollection<MonedaxNegocio>();
                    _monedaxNegocios.CollectionChanged += FixupMonedaxNegocios;
                }
                return _monedaxNegocios;
            }
            set
            {
                if (!ReferenceEquals(_monedaxNegocios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_monedaxNegocios != null)
                    {
                        _monedaxNegocios.CollectionChanged -= FixupMonedaxNegocios;
                    }
                    _monedaxNegocios = value;
                    if (_monedaxNegocios != null)
                    {
                        _monedaxNegocios.CollectionChanged += FixupMonedaxNegocios;
                    }
                    OnNavigationPropertyChanged("MonedaxNegocios");
                }
            }
        }
        private TrackableCollection<MonedaxNegocio> _monedaxNegocios;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetallePartFranquicias.Clear();
            PeriodoProductoes.Clear();
            Persistencias.Clear();
            Plans.Clear();
            Plazo = null;
            ProductoDetalles.Clear();
            Ramo = null;
            ProductoConcursoes.Clear();
            ProductosMetas.Clear();
            ProductosMetas1.Clear();
            TopeMonedas.Clear();
            TopexEdads.Clear();
            ProductoComboes.Clear();
            Excepcions.Clear();
            MonedaxNegocios.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPlazo(Plazo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Productoes.Contains(this))
            {
                previousValue.Productoes.Remove(this);
            }
    
            if (Plazo != null)
            {
                if (!Plazo.Productoes.Contains(this))
                {
                    Plazo.Productoes.Add(this);
                }
    
                plazo_id = Plazo.id;
            }
            else if (!skipKeys)
            {
                plazo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Plazo")
                    && (ChangeTracker.OriginalValues["Plazo"] == Plazo))
                {
                    ChangeTracker.OriginalValues.Remove("Plazo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Plazo", previousValue);
                }
                if (Plazo != null && !Plazo.ChangeTracker.ChangeTrackingEnabled)
                {
                    Plazo.StartTracking();
                }
            }
        }
    
        private void FixupRamo(Ramo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Productoes.Contains(this))
            {
                previousValue.Productoes.Remove(this);
            }
    
            if (Ramo != null)
            {
                if (!Ramo.Productoes.Contains(this))
                {
                    Ramo.Productoes.Add(this);
                }
    
                ramo_id = Ramo.id;
            }
            else if (!skipKeys)
            {
                ramo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Ramo")
                    && (ChangeTracker.OriginalValues["Ramo"] == Ramo))
                {
                    ChangeTracker.OriginalValues.Remove("Ramo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Ramo", previousValue);
                }
                if (Ramo != null && !Ramo.ChangeTracker.ChangeTrackingEnabled)
                {
                    Ramo.StartTracking();
                }
            }
        }
    
        private void FixupDetallePartFranquicias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetallePartFranquicia item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetallePartFranquicias", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetallePartFranquicia item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetallePartFranquicias", item);
                    }
                }
            }
        }
    
        private void FixupPeriodoProductoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PeriodoProducto item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PeriodoProductoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeriodoProducto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PeriodoProductoes", item);
                    }
                }
            }
        }
    
        private void FixupPersistencias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Persistencia item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Persistencias", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Persistencia item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Persistencias", item);
                    }
                }
            }
        }
    
        private void FixupPlans(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Plan item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Plans", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Plan item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Plans", item);
                    }
                }
            }
        }
    
        private void FixupProductoDetalles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductoDetalle item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductoDetalles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductoDetalle item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductoDetalles", item);
                    }
                }
            }
        }
    
        private void FixupProductoConcursoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductoConcurso item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductoConcursoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductoConcurso item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductoConcursoes", item);
                    }
                }
            }
        }
    
        private void FixupProductosMetas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductosMeta item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductosMetas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductosMeta item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductosMetas", item);
                    }
                }
            }
        }
    
        private void FixupProductosMetas1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductosMeta item in e.NewItems)
                {
                    item.Producto1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductosMetas1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductosMeta item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto1, this))
                    {
                        item.Producto1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductosMetas1", item);
                    }
                }
            }
        }
    
        private void FixupTopeMonedas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TopeMoneda item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TopeMonedas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TopeMoneda item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TopeMonedas", item);
                    }
                }
            }
        }
    
        private void FixupTopexEdads(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TopexEdad item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TopexEdads", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TopexEdad item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TopexEdads", item);
                    }
                }
            }
        }
    
        private void FixupProductoComboes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductoCombo item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductoComboes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductoCombo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductoComboes", item);
                    }
                }
            }
        }
    
        private void FixupExcepcions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Excepcion item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Excepcions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Excepcion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Excepcions", item);
                    }
                }
            }
        }
    
        private void FixupMonedaxNegocios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MonedaxNegocio item in e.NewItems)
                {
                    item.Producto = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MonedaxNegocios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MonedaxNegocio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Producto, this))
                    {
                        item.Producto = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MonedaxNegocios", item);
                    }
                }
            }
        }

        #endregion
    }
}
