//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class vw_aspnet_MembershipUsers: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private System.Guid _userId;
    
        [DataMember]
        public int PasswordFormat
        {
            get { return _passwordFormat; }
            set
            {
                if (_passwordFormat != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PasswordFormat' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _passwordFormat = value;
                    OnPropertyChanged("PasswordFormat");
                }
            }
        }
        private int _passwordFormat;
    
        [DataMember]
        public string MobilePIN
        {
            get { return _mobilePIN; }
            set
            {
                if (_mobilePIN != value)
                {
                    _mobilePIN = value;
                    OnPropertyChanged("MobilePIN");
                }
            }
        }
        private string _mobilePIN;
    
        [DataMember]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("Email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string LoweredEmail
        {
            get { return _loweredEmail; }
            set
            {
                if (_loweredEmail != value)
                {
                    _loweredEmail = value;
                    OnPropertyChanged("LoweredEmail");
                }
            }
        }
        private string _loweredEmail;
    
        [DataMember]
        public string PasswordQuestion
        {
            get { return _passwordQuestion; }
            set
            {
                if (_passwordQuestion != value)
                {
                    _passwordQuestion = value;
                    OnPropertyChanged("PasswordQuestion");
                }
            }
        }
        private string _passwordQuestion;
    
        [DataMember]
        public string PasswordAnswer
        {
            get { return _passwordAnswer; }
            set
            {
                if (_passwordAnswer != value)
                {
                    _passwordAnswer = value;
                    OnPropertyChanged("PasswordAnswer");
                }
            }
        }
        private string _passwordAnswer;
    
        [DataMember]
        public bool IsApproved
        {
            get { return _isApproved; }
            set
            {
                if (_isApproved != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsApproved' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isApproved = value;
                    OnPropertyChanged("IsApproved");
                }
            }
        }
        private bool _isApproved;
    
        [DataMember]
        public bool IsLockedOut
        {
            get { return _isLockedOut; }
            set
            {
                if (_isLockedOut != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsLockedOut' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isLockedOut = value;
                    OnPropertyChanged("IsLockedOut");
                }
            }
        }
        private bool _isLockedOut;
    
        [DataMember]
        public System.DateTime CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CreateDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private System.DateTime _createDate;
    
        [DataMember]
        public System.DateTime LastLoginDate
        {
            get { return _lastLoginDate; }
            set
            {
                if (_lastLoginDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LastLoginDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lastLoginDate = value;
                    OnPropertyChanged("LastLoginDate");
                }
            }
        }
        private System.DateTime _lastLoginDate;
    
        [DataMember]
        public System.DateTime LastPasswordChangedDate
        {
            get { return _lastPasswordChangedDate; }
            set
            {
                if (_lastPasswordChangedDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LastPasswordChangedDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lastPasswordChangedDate = value;
                    OnPropertyChanged("LastPasswordChangedDate");
                }
            }
        }
        private System.DateTime _lastPasswordChangedDate;
    
        [DataMember]
        public System.DateTime LastLockoutDate
        {
            get { return _lastLockoutDate; }
            set
            {
                if (_lastLockoutDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LastLockoutDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lastLockoutDate = value;
                    OnPropertyChanged("LastLockoutDate");
                }
            }
        }
        private System.DateTime _lastLockoutDate;
    
        [DataMember]
        public int FailedPasswordAttemptCount
        {
            get { return _failedPasswordAttemptCount; }
            set
            {
                if (_failedPasswordAttemptCount != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FailedPasswordAttemptCount' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _failedPasswordAttemptCount = value;
                    OnPropertyChanged("FailedPasswordAttemptCount");
                }
            }
        }
        private int _failedPasswordAttemptCount;
    
        [DataMember]
        public System.DateTime FailedPasswordAttemptWindowStart
        {
            get { return _failedPasswordAttemptWindowStart; }
            set
            {
                if (_failedPasswordAttemptWindowStart != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FailedPasswordAttemptWindowStart' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _failedPasswordAttemptWindowStart = value;
                    OnPropertyChanged("FailedPasswordAttemptWindowStart");
                }
            }
        }
        private System.DateTime _failedPasswordAttemptWindowStart;
    
        [DataMember]
        public int FailedPasswordAnswerAttemptCount
        {
            get { return _failedPasswordAnswerAttemptCount; }
            set
            {
                if (_failedPasswordAnswerAttemptCount != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FailedPasswordAnswerAttemptCount' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _failedPasswordAnswerAttemptCount = value;
                    OnPropertyChanged("FailedPasswordAnswerAttemptCount");
                }
            }
        }
        private int _failedPasswordAnswerAttemptCount;
    
        [DataMember]
        public System.DateTime FailedPasswordAnswerAttemptWindowStart
        {
            get { return _failedPasswordAnswerAttemptWindowStart; }
            set
            {
                if (_failedPasswordAnswerAttemptWindowStart != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'FailedPasswordAnswerAttemptWindowStart' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _failedPasswordAnswerAttemptWindowStart = value;
                    OnPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
                }
            }
        }
        private System.DateTime _failedPasswordAnswerAttemptWindowStart;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public System.Guid ApplicationId
        {
            get { return _applicationId; }
            set
            {
                if (_applicationId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ApplicationId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _applicationId = value;
                    OnPropertyChanged("ApplicationId");
                }
            }
        }
        private System.Guid _applicationId;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string MobileAlias
        {
            get { return _mobileAlias; }
            set
            {
                if (_mobileAlias != value)
                {
                    _mobileAlias = value;
                    OnPropertyChanged("MobileAlias");
                }
            }
        }
        private string _mobileAlias;
    
        [DataMember]
        public bool IsAnonymous
        {
            get { return _isAnonymous; }
            set
            {
                if (_isAnonymous != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsAnonymous' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isAnonymous = value;
                    OnPropertyChanged("IsAnonymous");
                }
            }
        }
        private bool _isAnonymous;
    
        [DataMember]
        public System.DateTime LastActivityDate
        {
            get { return _lastActivityDate; }
            set
            {
                if (_lastActivityDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'LastActivityDate' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _lastActivityDate = value;
                    OnPropertyChanged("LastActivityDate");
                }
            }
        }
        private System.DateTime _lastActivityDate;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
