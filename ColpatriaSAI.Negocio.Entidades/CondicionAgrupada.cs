//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Operador))]
    [KnownType(typeof(SubRegla))]
    [KnownType(typeof(Regla))]
    public partial class CondicionAgrupada: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> subregla_id1
        {
            get { return _subregla_id1; }
            set
            {
                if (_subregla_id1 != value)
                {
                    ChangeTracker.RecordOriginalValue("subregla_id1", _subregla_id1);
                    if (!IsDeserializing)
                    {
                        if (SubRegla != null && SubRegla.id != value)
                        {
                            SubRegla = null;
                        }
                    }
                    _subregla_id1 = value;
                    OnPropertyChanged("subregla_id1");
                }
            }
        }
        private Nullable<int> _subregla_id1;
    
        [DataMember]
        public Nullable<int> subregla_id2
        {
            get { return _subregla_id2; }
            set
            {
                if (_subregla_id2 != value)
                {
                    ChangeTracker.RecordOriginalValue("subregla_id2", _subregla_id2);
                    if (!IsDeserializing)
                    {
                        if (SubRegla1 != null && SubRegla1.id != value)
                        {
                            SubRegla1 = null;
                        }
                    }
                    _subregla_id2 = value;
                    OnPropertyChanged("subregla_id2");
                }
            }
        }
        private Nullable<int> _subregla_id2;
    
        [DataMember]
        public Nullable<int> operador_id
        {
            get { return _operador_id; }
            set
            {
                if (_operador_id != value)
                {
                    ChangeTracker.RecordOriginalValue("operador_id", _operador_id);
                    if (!IsDeserializing)
                    {
                        if (Operador != null && Operador.id != value)
                        {
                            Operador = null;
                        }
                    }
                    _operador_id = value;
                    OnPropertyChanged("operador_id");
                }
            }
        }
        private Nullable<int> _operador_id;
    
        [DataMember]
        public Nullable<int> regla_id
        {
            get { return _regla_id; }
            set
            {
                if (_regla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("regla_id", _regla_id);
                    if (!IsDeserializing)
                    {
                        if (Regla != null && Regla.id != value)
                        {
                            Regla = null;
                        }
                    }
                    _regla_id = value;
                    OnPropertyChanged("regla_id");
                }
            }
        }
        private Nullable<int> _regla_id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Operador Operador
        {
            get { return _operador; }
            set
            {
                if (!ReferenceEquals(_operador, value))
                {
                    var previousValue = _operador;
                    _operador = value;
                    FixupOperador(previousValue);
                    OnNavigationPropertyChanged("Operador");
                }
            }
        }
        private Operador _operador;
    
        [DataMember]
        public TrackableCollection<SubRegla> SubReglas
        {
            get
            {
                if (_subReglas == null)
                {
                    _subReglas = new TrackableCollection<SubRegla>();
                    _subReglas.CollectionChanged += FixupSubReglas;
                }
                return _subReglas;
            }
            set
            {
                if (!ReferenceEquals(_subReglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_subReglas != null)
                    {
                        _subReglas.CollectionChanged -= FixupSubReglas;
                    }
                    _subReglas = value;
                    if (_subReglas != null)
                    {
                        _subReglas.CollectionChanged += FixupSubReglas;
                    }
                    OnNavigationPropertyChanged("SubReglas");
                }
            }
        }
        private TrackableCollection<SubRegla> _subReglas;
    
        [DataMember]
        public SubRegla SubRegla
        {
            get { return _subRegla; }
            set
            {
                if (!ReferenceEquals(_subRegla, value))
                {
                    var previousValue = _subRegla;
                    _subRegla = value;
                    FixupSubRegla(previousValue);
                    OnNavigationPropertyChanged("SubRegla");
                }
            }
        }
        private SubRegla _subRegla;
    
        [DataMember]
        public SubRegla SubRegla1
        {
            get { return _subRegla1; }
            set
            {
                if (!ReferenceEquals(_subRegla1, value))
                {
                    var previousValue = _subRegla1;
                    _subRegla1 = value;
                    FixupSubRegla1(previousValue);
                    OnNavigationPropertyChanged("SubRegla1");
                }
            }
        }
        private SubRegla _subRegla1;
    
        [DataMember]
        public Regla Regla
        {
            get { return _regla; }
            set
            {
                if (!ReferenceEquals(_regla, value))
                {
                    var previousValue = _regla;
                    _regla = value;
                    FixupRegla(previousValue);
                    OnNavigationPropertyChanged("Regla");
                }
            }
        }
        private Regla _regla;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Operador = null;
            SubReglas.Clear();
            SubRegla = null;
            SubRegla1 = null;
            Regla = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupOperador(Operador previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CondicionAgrupadas.Contains(this))
            {
                previousValue.CondicionAgrupadas.Remove(this);
            }
    
            if (Operador != null)
            {
                if (!Operador.CondicionAgrupadas.Contains(this))
                {
                    Operador.CondicionAgrupadas.Add(this);
                }
    
                operador_id = Operador.id;
            }
            else if (!skipKeys)
            {
                operador_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Operador")
                    && (ChangeTracker.OriginalValues["Operador"] == Operador))
                {
                    ChangeTracker.OriginalValues.Remove("Operador");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Operador", previousValue);
                }
                if (Operador != null && !Operador.ChangeTracker.ChangeTrackingEnabled)
                {
                    Operador.StartTracking();
                }
            }
        }
    
        private void FixupSubRegla(SubRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CondicionAgrupadas.Contains(this))
            {
                previousValue.CondicionAgrupadas.Remove(this);
            }
    
            if (SubRegla != null)
            {
                if (!SubRegla.CondicionAgrupadas.Contains(this))
                {
                    SubRegla.CondicionAgrupadas.Add(this);
                }
    
                subregla_id1 = SubRegla.id;
            }
            else if (!skipKeys)
            {
                subregla_id1 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubRegla")
                    && (ChangeTracker.OriginalValues["SubRegla"] == SubRegla))
                {
                    ChangeTracker.OriginalValues.Remove("SubRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubRegla", previousValue);
                }
                if (SubRegla != null && !SubRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubRegla.StartTracking();
                }
            }
        }
    
        private void FixupSubRegla1(SubRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CondicionAgrupadas1.Contains(this))
            {
                previousValue.CondicionAgrupadas1.Remove(this);
            }
    
            if (SubRegla1 != null)
            {
                if (!SubRegla1.CondicionAgrupadas1.Contains(this))
                {
                    SubRegla1.CondicionAgrupadas1.Add(this);
                }
    
                subregla_id2 = SubRegla1.id;
            }
            else if (!skipKeys)
            {
                subregla_id2 = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubRegla1")
                    && (ChangeTracker.OriginalValues["SubRegla1"] == SubRegla1))
                {
                    ChangeTracker.OriginalValues.Remove("SubRegla1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubRegla1", previousValue);
                }
                if (SubRegla1 != null && !SubRegla1.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubRegla1.StartTracking();
                }
            }
        }
    
        private void FixupRegla(Regla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CondicionAgrupadas.Contains(this))
            {
                previousValue.CondicionAgrupadas.Remove(this);
            }
    
            if (Regla != null)
            {
                if (!Regla.CondicionAgrupadas.Contains(this))
                {
                    Regla.CondicionAgrupadas.Add(this);
                }
    
                regla_id = Regla.id;
            }
            else if (!skipKeys)
            {
                regla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Regla")
                    && (ChangeTracker.OriginalValues["Regla"] == Regla))
                {
                    ChangeTracker.OriginalValues.Remove("Regla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Regla", previousValue);
                }
                if (Regla != null && !Regla.ChangeTracker.ChangeTrackingEnabled)
                {
                    Regla.StartTracking();
                }
            }
        }
    
        private void FixupSubReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SubRegla item in e.NewItems)
                {
                    item.CondicionAgrupada = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SubReglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SubRegla item in e.OldItems)
                {
                    if (ReferenceEquals(item.CondicionAgrupada, this))
                    {
                        item.CondicionAgrupada = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SubReglas", item);
                    }
                }
            }
        }

        #endregion
    }
}
