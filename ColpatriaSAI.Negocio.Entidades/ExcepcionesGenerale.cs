//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Ramo))]
    [KnownType(typeof(TipoMedida))]
    [KnownType(typeof(Compania))]
    [KnownType(typeof(Moneda))]
    public partial class ExcepcionesGenerale: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> ramo_id
        {
            get { return _ramo_id; }
            set
            {
                if (_ramo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("ramo_id", _ramo_id);
                    if (!IsDeserializing)
                    {
                        if (Ramo != null && Ramo.id != value)
                        {
                            Ramo = null;
                        }
                    }
                    _ramo_id = value;
                    OnPropertyChanged("ramo_id");
                }
            }
        }
        private Nullable<int> _ramo_id;
    
        [DataMember]
        public string clave
        {
            get { return _clave; }
            set
            {
                if (_clave != value)
                {
                    _clave = value;
                    OnPropertyChanged("clave");
                }
            }
        }
        private string _clave;
    
        [DataMember]
        public Nullable<long> numeroNegocio
        {
            get { return _numeroNegocio; }
            set
            {
                if (_numeroNegocio != value)
                {
                    _numeroNegocio = value;
                    OnPropertyChanged("numeroNegocio");
                }
            }
        }
        private Nullable<long> _numeroNegocio;
    
        [DataMember]
        public Nullable<System.DateTime> fechaInicio
        {
            get { return _fechaInicio; }
            set
            {
                if (_fechaInicio != value)
                {
                    _fechaInicio = value;
                    OnPropertyChanged("fechaInicio");
                }
            }
        }
        private Nullable<System.DateTime> _fechaInicio;
    
        [DataMember]
        public Nullable<System.DateTime> fechaFin
        {
            get { return _fechaFin; }
            set
            {
                if (_fechaFin != value)
                {
                    _fechaFin = value;
                    OnPropertyChanged("fechaFin");
                }
            }
        }
        private Nullable<System.DateTime> _fechaFin;
    
        [DataMember]
        public Nullable<double> factor
        {
            get { return _factor; }
            set
            {
                if (_factor != value)
                {
                    _factor = value;
                    OnPropertyChanged("factor");
                }
            }
        }
        private Nullable<double> _factor;
    
        [DataMember]
        public Nullable<int> moneda_id
        {
            get { return _moneda_id; }
            set
            {
                if (_moneda_id != value)
                {
                    ChangeTracker.RecordOriginalValue("moneda_id", _moneda_id);
                    if (!IsDeserializing)
                    {
                        if (Moneda != null && Moneda.id != value)
                        {
                            Moneda = null;
                        }
                    }
                    _moneda_id = value;
                    OnPropertyChanged("moneda_id");
                }
            }
        }
        private Nullable<int> _moneda_id;
    
        [DataMember]
        public int tipomedida_id
        {
            get { return _tipomedida_id; }
            set
            {
                if (_tipomedida_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipomedida_id", _tipomedida_id);
                    if (!IsDeserializing)
                    {
                        if (TipoMedida != null && TipoMedida.id != value)
                        {
                            TipoMedida = null;
                        }
                    }
                    _tipomedida_id = value;
                    OnPropertyChanged("tipomedida_id");
                }
            }
        }
        private int _tipomedida_id;
    
        [DataMember]
        public int compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    ChangeTracker.RecordOriginalValue("compania_id", _compania_id);
                    if (!IsDeserializing)
                    {
                        if (Compania != null && Compania.id != value)
                        {
                            Compania = null;
                        }
                    }
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private int _compania_id;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public Nullable<System.DateTime> fechacreacion
        {
            get { return _fechacreacion; }
            set
            {
                if (_fechacreacion != value)
                {
                    _fechacreacion = value;
                    OnPropertyChanged("fechacreacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechacreacion;
    
        [DataMember]
        public Nullable<System.DateTime> fechamodificacion
        {
            get { return _fechamodificacion; }
            set
            {
                if (_fechamodificacion != value)
                {
                    _fechamodificacion = value;
                    OnPropertyChanged("fechamodificacion");
                }
            }
        }
        private Nullable<System.DateTime> _fechamodificacion;
    
        [DataMember]
        public string ano
        {
            get { return _ano; }
            set
            {
                if (_ano != value)
                {
                    _ano = value;
                    OnPropertyChanged("ano");
                }
            }
        }
        private string _ano;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Ramo Ramo
        {
            get { return _ramo; }
            set
            {
                if (!ReferenceEquals(_ramo, value))
                {
                    var previousValue = _ramo;
                    _ramo = value;
                    FixupRamo(previousValue);
                    OnNavigationPropertyChanged("Ramo");
                }
            }
        }
        private Ramo _ramo;
    
        [DataMember]
        public TipoMedida TipoMedida
        {
            get { return _tipoMedida; }
            set
            {
                if (!ReferenceEquals(_tipoMedida, value))
                {
                    var previousValue = _tipoMedida;
                    _tipoMedida = value;
                    FixupTipoMedida(previousValue);
                    OnNavigationPropertyChanged("TipoMedida");
                }
            }
        }
        private TipoMedida _tipoMedida;
    
        [DataMember]
        public Compania Compania
        {
            get { return _compania; }
            set
            {
                if (!ReferenceEquals(_compania, value))
                {
                    var previousValue = _compania;
                    _compania = value;
                    FixupCompania(previousValue);
                    OnNavigationPropertyChanged("Compania");
                }
            }
        }
        private Compania _compania;
    
        [DataMember]
        public Moneda Moneda
        {
            get { return _moneda; }
            set
            {
                if (!ReferenceEquals(_moneda, value))
                {
                    var previousValue = _moneda;
                    _moneda = value;
                    FixupMoneda(previousValue);
                    OnNavigationPropertyChanged("Moneda");
                }
            }
        }
        private Moneda _moneda;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Ramo = null;
            TipoMedida = null;
            Compania = null;
            Moneda = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupRamo(Ramo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExcepcionesGenerales.Contains(this))
            {
                previousValue.ExcepcionesGenerales.Remove(this);
            }
    
            if (Ramo != null)
            {
                if (!Ramo.ExcepcionesGenerales.Contains(this))
                {
                    Ramo.ExcepcionesGenerales.Add(this);
                }
    
                ramo_id = Ramo.id;
            }
            else if (!skipKeys)
            {
                ramo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Ramo")
                    && (ChangeTracker.OriginalValues["Ramo"] == Ramo))
                {
                    ChangeTracker.OriginalValues.Remove("Ramo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Ramo", previousValue);
                }
                if (Ramo != null && !Ramo.ChangeTracker.ChangeTrackingEnabled)
                {
                    Ramo.StartTracking();
                }
            }
        }
    
        private void FixupTipoMedida(TipoMedida previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExcepcionesGenerales.Contains(this))
            {
                previousValue.ExcepcionesGenerales.Remove(this);
            }
    
            if (TipoMedida != null)
            {
                if (!TipoMedida.ExcepcionesGenerales.Contains(this))
                {
                    TipoMedida.ExcepcionesGenerales.Add(this);
                }
    
                tipomedida_id = TipoMedida.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoMedida")
                    && (ChangeTracker.OriginalValues["TipoMedida"] == TipoMedida))
                {
                    ChangeTracker.OriginalValues.Remove("TipoMedida");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoMedida", previousValue);
                }
                if (TipoMedida != null && !TipoMedida.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoMedida.StartTracking();
                }
            }
        }
    
        private void FixupCompania(Compania previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExcepcionesGenerales.Contains(this))
            {
                previousValue.ExcepcionesGenerales.Remove(this);
            }
    
            if (Compania != null)
            {
                if (!Compania.ExcepcionesGenerales.Contains(this))
                {
                    Compania.ExcepcionesGenerales.Add(this);
                }
    
                compania_id = Compania.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compania")
                    && (ChangeTracker.OriginalValues["Compania"] == Compania))
                {
                    ChangeTracker.OriginalValues.Remove("Compania");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compania", previousValue);
                }
                if (Compania != null && !Compania.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compania.StartTracking();
                }
            }
        }
    
        private void FixupMoneda(Moneda previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ExcepcionesGenerales.Contains(this))
            {
                previousValue.ExcepcionesGenerales.Remove(this);
            }
    
            if (Moneda != null)
            {
                if (!Moneda.ExcepcionesGenerales.Contains(this))
                {
                    Moneda.ExcepcionesGenerales.Add(this);
                }
    
                moneda_id = Moneda.id;
            }
            else if (!skipKeys)
            {
                moneda_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Moneda")
                    && (ChangeTracker.OriginalValues["Moneda"] == Moneda))
                {
                    ChangeTracker.OriginalValues.Remove("Moneda");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Moneda", previousValue);
                }
                if (Moneda != null && !Moneda.ChangeTracker.ChangeTrackingEnabled)
                {
                    Moneda.StartTracking();
                }
            }
        }

        #endregion
    }
}
