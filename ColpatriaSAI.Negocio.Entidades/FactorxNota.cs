//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TipoEscala))]
    [KnownType(typeof(Modelo))]
    [KnownType(typeof(ModeloxMeta))]
    [KnownType(typeof(PeriodoFactorxNota))]
    public partial class FactorxNota: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<int> tipoescala_id
        {
            get { return _tipoescala_id; }
            set
            {
                if (_tipoescala_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoescala_id", _tipoescala_id);
                    if (!IsDeserializing)
                    {
                        if (TipoEscala != null && TipoEscala.id != value)
                        {
                            TipoEscala = null;
                        }
                    }
                    _tipoescala_id = value;
                    OnPropertyChanged("tipoescala_id");
                }
            }
        }
        private Nullable<int> _tipoescala_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TipoEscala TipoEscala
        {
            get { return _tipoEscala; }
            set
            {
                if (!ReferenceEquals(_tipoEscala, value))
                {
                    var previousValue = _tipoEscala;
                    _tipoEscala = value;
                    FixupTipoEscala(previousValue);
                    OnNavigationPropertyChanged("TipoEscala");
                }
            }
        }
        private TipoEscala _tipoEscala;
    
        [DataMember]
        public TrackableCollection<Modelo> Modeloes
        {
            get
            {
                if (_modeloes == null)
                {
                    _modeloes = new TrackableCollection<Modelo>();
                    _modeloes.CollectionChanged += FixupModeloes;
                }
                return _modeloes;
            }
            set
            {
                if (!ReferenceEquals(_modeloes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_modeloes != null)
                    {
                        _modeloes.CollectionChanged -= FixupModeloes;
                    }
                    _modeloes = value;
                    if (_modeloes != null)
                    {
                        _modeloes.CollectionChanged += FixupModeloes;
                    }
                    OnNavigationPropertyChanged("Modeloes");
                }
            }
        }
        private TrackableCollection<Modelo> _modeloes;
    
        [DataMember]
        public TrackableCollection<ModeloxMeta> ModeloxMetas
        {
            get
            {
                if (_modeloxMetas == null)
                {
                    _modeloxMetas = new TrackableCollection<ModeloxMeta>();
                    _modeloxMetas.CollectionChanged += FixupModeloxMetas;
                }
                return _modeloxMetas;
            }
            set
            {
                if (!ReferenceEquals(_modeloxMetas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_modeloxMetas != null)
                    {
                        _modeloxMetas.CollectionChanged -= FixupModeloxMetas;
                    }
                    _modeloxMetas = value;
                    if (_modeloxMetas != null)
                    {
                        _modeloxMetas.CollectionChanged += FixupModeloxMetas;
                    }
                    OnNavigationPropertyChanged("ModeloxMetas");
                }
            }
        }
        private TrackableCollection<ModeloxMeta> _modeloxMetas;
    
        [DataMember]
        public TrackableCollection<PeriodoFactorxNota> PeriodoFactorxNotas
        {
            get
            {
                if (_periodoFactorxNotas == null)
                {
                    _periodoFactorxNotas = new TrackableCollection<PeriodoFactorxNota>();
                    _periodoFactorxNotas.CollectionChanged += FixupPeriodoFactorxNotas;
                }
                return _periodoFactorxNotas;
            }
            set
            {
                if (!ReferenceEquals(_periodoFactorxNotas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_periodoFactorxNotas != null)
                    {
                        _periodoFactorxNotas.CollectionChanged -= FixupPeriodoFactorxNotas;
                    }
                    _periodoFactorxNotas = value;
                    if (_periodoFactorxNotas != null)
                    {
                        _periodoFactorxNotas.CollectionChanged += FixupPeriodoFactorxNotas;
                    }
                    OnNavigationPropertyChanged("PeriodoFactorxNotas");
                }
            }
        }
        private TrackableCollection<PeriodoFactorxNota> _periodoFactorxNotas;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TipoEscala = null;
            Modeloes.Clear();
            ModeloxMetas.Clear();
            PeriodoFactorxNotas.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTipoEscala(TipoEscala previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FactorxNotas.Contains(this))
            {
                previousValue.FactorxNotas.Remove(this);
            }
    
            if (TipoEscala != null)
            {
                if (!TipoEscala.FactorxNotas.Contains(this))
                {
                    TipoEscala.FactorxNotas.Add(this);
                }
    
                tipoescala_id = TipoEscala.id;
            }
            else if (!skipKeys)
            {
                tipoescala_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoEscala")
                    && (ChangeTracker.OriginalValues["TipoEscala"] == TipoEscala))
                {
                    ChangeTracker.OriginalValues.Remove("TipoEscala");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoEscala", previousValue);
                }
                if (TipoEscala != null && !TipoEscala.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoEscala.StartTracking();
                }
            }
        }
    
        private void FixupModeloes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Modelo item in e.NewItems)
                {
                    item.FactorxNota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Modeloes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Modelo item in e.OldItems)
                {
                    if (ReferenceEquals(item.FactorxNota, this))
                    {
                        item.FactorxNota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Modeloes", item);
                    }
                }
            }
        }
    
        private void FixupModeloxMetas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ModeloxMeta item in e.NewItems)
                {
                    item.FactorxNota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ModeloxMetas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ModeloxMeta item in e.OldItems)
                {
                    if (ReferenceEquals(item.FactorxNota, this))
                    {
                        item.FactorxNota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ModeloxMetas", item);
                    }
                }
            }
        }
    
        private void FixupPeriodoFactorxNotas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PeriodoFactorxNota item in e.NewItems)
                {
                    item.FactorxNota = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PeriodoFactorxNotas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PeriodoFactorxNota item in e.OldItems)
                {
                    if (ReferenceEquals(item.FactorxNota, this))
                    {
                        item.FactorxNota = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PeriodoFactorxNotas", item);
                    }
                }
            }
        }

        #endregion
    }
}
