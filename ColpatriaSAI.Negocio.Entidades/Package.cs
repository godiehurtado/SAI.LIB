//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PackageVersion))]
    public partial class Package: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PackageID
        {
            get { return _packageID; }
            set
            {
                if (_packageID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PackageID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _packageID = value;
                    OnPropertyChanged("PackageID");
                }
            }
        }
        private int _packageID;
    
        [DataMember]
        public System.Guid PackageGUID
        {
            get { return _packageGUID; }
            set
            {
                if (_packageGUID != value)
                {
                    _packageGUID = value;
                    OnPropertyChanged("PackageGUID");
                }
            }
        }
        private System.Guid _packageGUID;
    
        [DataMember]
        public string PackageName
        {
            get { return _packageName; }
            set
            {
                if (_packageName != value)
                {
                    _packageName = value;
                    OnPropertyChanged("PackageName");
                }
            }
        }
        private string _packageName;
    
        [DataMember]
        public System.DateTime CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    OnPropertyChanged("CreationDate");
                }
            }
        }
        private System.DateTime _creationDate;
    
        [DataMember]
        public string CreatedBy
        {
            get { return _createdBy; }
            set
            {
                if (_createdBy != value)
                {
                    _createdBy = value;
                    OnPropertyChanged("CreatedBy");
                }
            }
        }
        private string _createdBy;
    
        [DataMember]
        public System.DateTime EnteredDateTime
        {
            get { return _enteredDateTime; }
            set
            {
                if (_enteredDateTime != value)
                {
                    _enteredDateTime = value;
                    OnPropertyChanged("EnteredDateTime");
                }
            }
        }
        private System.DateTime _enteredDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PackageVersion> PackageVersions
        {
            get
            {
                if (_packageVersions == null)
                {
                    _packageVersions = new TrackableCollection<PackageVersion>();
                    _packageVersions.CollectionChanged += FixupPackageVersions;
                }
                return _packageVersions;
            }
            set
            {
                if (!ReferenceEquals(_packageVersions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_packageVersions != null)
                    {
                        _packageVersions.CollectionChanged -= FixupPackageVersions;
                    }
                    _packageVersions = value;
                    if (_packageVersions != null)
                    {
                        _packageVersions.CollectionChanged += FixupPackageVersions;
                    }
                    OnNavigationPropertyChanged("PackageVersions");
                }
            }
        }
        private TrackableCollection<PackageVersion> _packageVersions;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PackageVersions.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPackageVersions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PackageVersion item in e.NewItems)
                {
                    item.Package = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PackageVersions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PackageVersion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Package, this))
                    {
                        item.Package = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PackageVersions", item);
                    }
                }
            }
        }

        #endregion
    }
}
