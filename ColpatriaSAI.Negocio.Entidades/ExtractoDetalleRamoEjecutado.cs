//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class ExtractoDetalleRamoEjecutado: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Clave
        {
            get { return _clave; }
            set
            {
                if (_clave != value)
                {
                    _clave = value;
                    OnPropertyChanged("Clave");
                }
            }
        }
        private string _clave;
    
        [DataMember]
        public Nullable<int> Ramo_id
        {
            get { return _ramo_id; }
            set
            {
                if (_ramo_id != value)
                {
                    _ramo_id = value;
                    OnPropertyChanged("Ramo_id");
                }
            }
        }
        private Nullable<int> _ramo_id;
    
        [DataMember]
        public Nullable<int> UnidadMedida_id
        {
            get { return _unidadMedida_id; }
            set
            {
                if (_unidadMedida_id != value)
                {
                    _unidadMedida_id = value;
                    OnPropertyChanged("UnidadMedida_id");
                }
            }
        }
        private Nullable<int> _unidadMedida_id;
    
        [DataMember]
        public Nullable<double> Enero
        {
            get { return _enero; }
            set
            {
                if (_enero != value)
                {
                    _enero = value;
                    OnPropertyChanged("Enero");
                }
            }
        }
        private Nullable<double> _enero;
    
        [DataMember]
        public Nullable<double> Febrero
        {
            get { return _febrero; }
            set
            {
                if (_febrero != value)
                {
                    _febrero = value;
                    OnPropertyChanged("Febrero");
                }
            }
        }
        private Nullable<double> _febrero;
    
        [DataMember]
        public Nullable<double> Marzo
        {
            get { return _marzo; }
            set
            {
                if (_marzo != value)
                {
                    _marzo = value;
                    OnPropertyChanged("Marzo");
                }
            }
        }
        private Nullable<double> _marzo;
    
        [DataMember]
        public Nullable<double> Abril
        {
            get { return _abril; }
            set
            {
                if (_abril != value)
                {
                    _abril = value;
                    OnPropertyChanged("Abril");
                }
            }
        }
        private Nullable<double> _abril;
    
        [DataMember]
        public Nullable<double> Mayo
        {
            get { return _mayo; }
            set
            {
                if (_mayo != value)
                {
                    _mayo = value;
                    OnPropertyChanged("Mayo");
                }
            }
        }
        private Nullable<double> _mayo;
    
        [DataMember]
        public Nullable<double> Junio
        {
            get { return _junio; }
            set
            {
                if (_junio != value)
                {
                    _junio = value;
                    OnPropertyChanged("Junio");
                }
            }
        }
        private Nullable<double> _junio;
    
        [DataMember]
        public Nullable<double> Julio
        {
            get { return _julio; }
            set
            {
                if (_julio != value)
                {
                    _julio = value;
                    OnPropertyChanged("Julio");
                }
            }
        }
        private Nullable<double> _julio;
    
        [DataMember]
        public Nullable<double> Agosto
        {
            get { return _agosto; }
            set
            {
                if (_agosto != value)
                {
                    _agosto = value;
                    OnPropertyChanged("Agosto");
                }
            }
        }
        private Nullable<double> _agosto;
    
        [DataMember]
        public Nullable<double> Septiembre
        {
            get { return _septiembre; }
            set
            {
                if (_septiembre != value)
                {
                    _septiembre = value;
                    OnPropertyChanged("Septiembre");
                }
            }
        }
        private Nullable<double> _septiembre;
    
        [DataMember]
        public Nullable<double> Octublre
        {
            get { return _octublre; }
            set
            {
                if (_octublre != value)
                {
                    _octublre = value;
                    OnPropertyChanged("Octublre");
                }
            }
        }
        private Nullable<double> _octublre;
    
        [DataMember]
        public Nullable<double> Noviembre
        {
            get { return _noviembre; }
            set
            {
                if (_noviembre != value)
                {
                    _noviembre = value;
                    OnPropertyChanged("Noviembre");
                }
            }
        }
        private Nullable<double> _noviembre;
    
        [DataMember]
        public Nullable<double> Diciembre
        {
            get { return _diciembre; }
            set
            {
                if (_diciembre != value)
                {
                    _diciembre = value;
                    OnPropertyChanged("Diciembre");
                }
            }
        }
        private Nullable<double> _diciembre;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
