//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Condicion))]
    [KnownType(typeof(CondicionAgrupada))]
    [KnownType(typeof(Premio))]
    [KnownType(typeof(VariablexPremio))]
    [KnownType(typeof(CondicionxPremioSubregla))]
    public partial class Operador: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string expresion
        {
            get { return _expresion; }
            set
            {
                if (_expresion != value)
                {
                    _expresion = value;
                    OnPropertyChanged("expresion");
                }
            }
        }
        private string _expresion;
    
        [DataMember]
        public Nullable<bool> logico
        {
            get { return _logico; }
            set
            {
                if (_logico != value)
                {
                    _logico = value;
                    OnPropertyChanged("logico");
                }
            }
        }
        private Nullable<bool> _logico;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Condicion> Condicions
        {
            get
            {
                if (_condicions == null)
                {
                    _condicions = new TrackableCollection<Condicion>();
                    _condicions.CollectionChanged += FixupCondicions;
                }
                return _condicions;
            }
            set
            {
                if (!ReferenceEquals(_condicions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicions != null)
                    {
                        _condicions.CollectionChanged -= FixupCondicions;
                    }
                    _condicions = value;
                    if (_condicions != null)
                    {
                        _condicions.CollectionChanged += FixupCondicions;
                    }
                    OnNavigationPropertyChanged("Condicions");
                }
            }
        }
        private TrackableCollection<Condicion> _condicions;
    
        [DataMember]
        public TrackableCollection<CondicionAgrupada> CondicionAgrupadas
        {
            get
            {
                if (_condicionAgrupadas == null)
                {
                    _condicionAgrupadas = new TrackableCollection<CondicionAgrupada>();
                    _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                }
                return _condicionAgrupadas;
            }
            set
            {
                if (!ReferenceEquals(_condicionAgrupadas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged -= FixupCondicionAgrupadas;
                    }
                    _condicionAgrupadas = value;
                    if (_condicionAgrupadas != null)
                    {
                        _condicionAgrupadas.CollectionChanged += FixupCondicionAgrupadas;
                    }
                    OnNavigationPropertyChanged("CondicionAgrupadas");
                }
            }
        }
        private TrackableCollection<CondicionAgrupada> _condicionAgrupadas;
    
        [DataMember]
        public TrackableCollection<Premio> Premios
        {
            get
            {
                if (_premios == null)
                {
                    _premios = new TrackableCollection<Premio>();
                    _premios.CollectionChanged += FixupPremios;
                }
                return _premios;
            }
            set
            {
                if (!ReferenceEquals(_premios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_premios != null)
                    {
                        _premios.CollectionChanged -= FixupPremios;
                    }
                    _premios = value;
                    if (_premios != null)
                    {
                        _premios.CollectionChanged += FixupPremios;
                    }
                    OnNavigationPropertyChanged("Premios");
                }
            }
        }
        private TrackableCollection<Premio> _premios;
    
        [DataMember]
        public TrackableCollection<VariablexPremio> VariablexPremios
        {
            get
            {
                if (_variablexPremios == null)
                {
                    _variablexPremios = new TrackableCollection<VariablexPremio>();
                    _variablexPremios.CollectionChanged += FixupVariablexPremios;
                }
                return _variablexPremios;
            }
            set
            {
                if (!ReferenceEquals(_variablexPremios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_variablexPremios != null)
                    {
                        _variablexPremios.CollectionChanged -= FixupVariablexPremios;
                    }
                    _variablexPremios = value;
                    if (_variablexPremios != null)
                    {
                        _variablexPremios.CollectionChanged += FixupVariablexPremios;
                    }
                    OnNavigationPropertyChanged("VariablexPremios");
                }
            }
        }
        private TrackableCollection<VariablexPremio> _variablexPremios;
    
        [DataMember]
        public TrackableCollection<CondicionxPremioSubregla> CondicionxPremioSubreglas
        {
            get
            {
                if (_condicionxPremioSubreglas == null)
                {
                    _condicionxPremioSubreglas = new TrackableCollection<CondicionxPremioSubregla>();
                    _condicionxPremioSubreglas.CollectionChanged += FixupCondicionxPremioSubreglas;
                }
                return _condicionxPremioSubreglas;
            }
            set
            {
                if (!ReferenceEquals(_condicionxPremioSubreglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_condicionxPremioSubreglas != null)
                    {
                        _condicionxPremioSubreglas.CollectionChanged -= FixupCondicionxPremioSubreglas;
                    }
                    _condicionxPremioSubreglas = value;
                    if (_condicionxPremioSubreglas != null)
                    {
                        _condicionxPremioSubreglas.CollectionChanged += FixupCondicionxPremioSubreglas;
                    }
                    OnNavigationPropertyChanged("CondicionxPremioSubreglas");
                }
            }
        }
        private TrackableCollection<CondicionxPremioSubregla> _condicionxPremioSubreglas;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Condicions.Clear();
            CondicionAgrupadas.Clear();
            Premios.Clear();
            VariablexPremios.Clear();
            CondicionxPremioSubreglas.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCondicions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Condicion item in e.NewItems)
                {
                    item.Operador = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Condicions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Condicion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Operador, this))
                    {
                        item.Operador = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Condicions", item);
                    }
                }
            }
        }
    
        private void FixupCondicionAgrupadas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CondicionAgrupada item in e.NewItems)
                {
                    item.Operador = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CondicionAgrupada item in e.OldItems)
                {
                    if (ReferenceEquals(item.Operador, this))
                    {
                        item.Operador = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CondicionAgrupadas", item);
                    }
                }
            }
        }
    
        private void FixupPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Premio item in e.NewItems)
                {
                    item.Operador = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Premios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Premio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Operador, this))
                    {
                        item.Operador = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Premios", item);
                    }
                }
            }
        }
    
        private void FixupVariablexPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VariablexPremio item in e.NewItems)
                {
                    item.Operador = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VariablexPremios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VariablexPremio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Operador, this))
                    {
                        item.Operador = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VariablexPremios", item);
                    }
                }
            }
        }
    
        private void FixupCondicionxPremioSubreglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CondicionxPremioSubregla item in e.NewItems)
                {
                    item.Operador = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CondicionxPremioSubreglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CondicionxPremioSubregla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Operador, this))
                    {
                        item.Operador = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CondicionxPremioSubreglas", item);
                    }
                }
            }
        }

        #endregion
    }
}
