//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LiquidacionReglaxParticipante))]
    [KnownType(typeof(LiquidacionPremio))]
    [KnownType(typeof(SubRegla))]
    public partial class LiquidacionPremio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (LiquidacionPremio2 != null && LiquidacionPremio2.id != value)
                        {
                            LiquidacionPremio2 = null;
                        }
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> liquidacionReglaxParticipante_id
        {
            get { return _liquidacionReglaxParticipante_id; }
            set
            {
                if (_liquidacionReglaxParticipante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquidacionReglaxParticipante_id", _liquidacionReglaxParticipante_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionReglaxParticipante != null && LiquidacionReglaxParticipante.id != value)
                        {
                            LiquidacionReglaxParticipante = null;
                        }
                    }
                    _liquidacionReglaxParticipante_id = value;
                    OnPropertyChanged("liquidacionReglaxParticipante_id");
                }
            }
        }
        private Nullable<int> _liquidacionReglaxParticipante_id;
    
        [DataMember]
        public Nullable<int> premio_id
        {
            get { return _premio_id; }
            set
            {
                if (_premio_id != value)
                {
                    _premio_id = value;
                    OnPropertyChanged("premio_id");
                }
            }
        }
        private Nullable<int> _premio_id;
    
        [DataMember]
        public string resultado
        {
            get { return _resultado; }
            set
            {
                if (_resultado != value)
                {
                    _resultado = value;
                    OnPropertyChanged("resultado");
                }
            }
        }
        private string _resultado;
    
        [DataMember]
        public string estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("estado");
                }
            }
        }
        private string _estado;
    
        [DataMember]
        public Nullable<int> subregla_id
        {
            get { return _subregla_id; }
            set
            {
                if (_subregla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("subregla_id", _subregla_id);
                    if (!IsDeserializing)
                    {
                        if (SubRegla != null && SubRegla.id != value)
                        {
                            SubRegla = null;
                        }
                    }
                    _subregla_id = value;
                    OnPropertyChanged("subregla_id");
                }
            }
        }
        private Nullable<int> _subregla_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public LiquidacionReglaxParticipante LiquidacionReglaxParticipante
        {
            get { return _liquidacionReglaxParticipante; }
            set
            {
                if (!ReferenceEquals(_liquidacionReglaxParticipante, value))
                {
                    var previousValue = _liquidacionReglaxParticipante;
                    _liquidacionReglaxParticipante = value;
                    FixupLiquidacionReglaxParticipante(previousValue);
                    OnNavigationPropertyChanged("LiquidacionReglaxParticipante");
                }
            }
        }
        private LiquidacionReglaxParticipante _liquidacionReglaxParticipante;
    
        [DataMember]
        public LiquidacionPremio LiquidacionPremio1
        {
            get { return _liquidacionPremio1; }
            set
            {
                if (!ReferenceEquals(_liquidacionPremio1, value))
                {
                    var previousValue = _liquidacionPremio1;
                    _liquidacionPremio1 = value;
                    FixupLiquidacionPremio1(previousValue);
                    OnNavigationPropertyChanged("LiquidacionPremio1");
                }
            }
        }
        private LiquidacionPremio _liquidacionPremio1;
    
        [DataMember]
        public LiquidacionPremio LiquidacionPremio2
        {
            get { return _liquidacionPremio2; }
            set
            {
                if (!ReferenceEquals(_liquidacionPremio2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (id != value.id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _liquidacionPremio2;
                    _liquidacionPremio2 = value;
                    FixupLiquidacionPremio2(previousValue);
                    OnNavigationPropertyChanged("LiquidacionPremio2");
                }
            }
        }
        private LiquidacionPremio _liquidacionPremio2;
    
        [DataMember]
        public SubRegla SubRegla
        {
            get { return _subRegla; }
            set
            {
                if (!ReferenceEquals(_subRegla, value))
                {
                    var previousValue = _subRegla;
                    _subRegla = value;
                    FixupSubRegla(previousValue);
                    OnNavigationPropertyChanged("SubRegla");
                }
            }
        }
        private SubRegla _subRegla;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LiquidacionReglaxParticipante = null;
            LiquidacionPremio1 = null;
            LiquidacionPremio2 = null;
            SubRegla = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLiquidacionReglaxParticipante(LiquidacionReglaxParticipante previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionPremios.Contains(this))
            {
                previousValue.LiquidacionPremios.Remove(this);
            }
    
            if (LiquidacionReglaxParticipante != null)
            {
                if (!LiquidacionReglaxParticipante.LiquidacionPremios.Contains(this))
                {
                    LiquidacionReglaxParticipante.LiquidacionPremios.Add(this);
                }
    
                liquidacionReglaxParticipante_id = LiquidacionReglaxParticipante.id;
            }
            else if (!skipKeys)
            {
                liquidacionReglaxParticipante_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionReglaxParticipante")
                    && (ChangeTracker.OriginalValues["LiquidacionReglaxParticipante"] == LiquidacionReglaxParticipante))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionReglaxParticipante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionReglaxParticipante", previousValue);
                }
                if (LiquidacionReglaxParticipante != null && !LiquidacionReglaxParticipante.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionReglaxParticipante.StartTracking();
                }
            }
        }
    
        private void FixupLiquidacionPremio1(LiquidacionPremio previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (LiquidacionPremio1 != null)
            {
                ChangeTracker.ObjectStateChanging += LiquidacionPremio1.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.LiquidacionPremio2, this))
            {
                previousValue.LiquidacionPremio2 = null;
            }
    
            if (LiquidacionPremio1 != null)
            {
                LiquidacionPremio1.LiquidacionPremio2 = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionPremio1")
                    && (ChangeTracker.OriginalValues["LiquidacionPremio1"] == LiquidacionPremio1))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionPremio1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionPremio1", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (LiquidacionPremio1 != null && !LiquidacionPremio1.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionPremio1.StartTracking();
                }
            }
        }
    
        private void FixupLiquidacionPremio2(LiquidacionPremio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.LiquidacionPremio1, this))
            {
                previousValue.LiquidacionPremio1 = null;
            }
    
            if (LiquidacionPremio2 != null)
            {
                LiquidacionPremio2.LiquidacionPremio1 = this;
                id = LiquidacionPremio2.id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionPremio2")
                    && (ChangeTracker.OriginalValues["LiquidacionPremio2"] == LiquidacionPremio2))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionPremio2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionPremio2", previousValue);
                }
                if (LiquidacionPremio2 != null && !LiquidacionPremio2.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionPremio2.StartTracking();
                }
            }
        }
    
        private void FixupSubRegla(SubRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionPremios.Contains(this))
            {
                previousValue.LiquidacionPremios.Remove(this);
            }
    
            if (SubRegla != null)
            {
                if (!SubRegla.LiquidacionPremios.Contains(this))
                {
                    SubRegla.LiquidacionPremios.Add(this);
                }
    
                subregla_id = SubRegla.id;
            }
            else if (!skipKeys)
            {
                subregla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SubRegla")
                    && (ChangeTracker.OriginalValues["SubRegla"] == SubRegla))
                {
                    ChangeTracker.OriginalValues.Remove("SubRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SubRegla", previousValue);
                }
                if (SubRegla != null && !SubRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    SubRegla.StartTracking();
                }
            }
        }

        #endregion
    }
}
