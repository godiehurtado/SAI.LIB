//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cliente))]
    public partial class Beneficiario: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public Nullable<int> cliente_id
        {
            get { return _cliente_id; }
            set
            {
                if (_cliente_id != value)
                {
                    ChangeTracker.RecordOriginalValue("cliente_id", _cliente_id);
                    if (!IsDeserializing)
                    {
                        if (Cliente != null && Cliente.id != value)
                        {
                            Cliente = null;
                        }
                    }
                    _cliente_id = value;
                    OnPropertyChanged("cliente_id");
                }
            }
        }
        private Nullable<int> _cliente_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Cliente Cliente
        {
            get { return _cliente; }
            set
            {
                if (!ReferenceEquals(_cliente, value))
                {
                    var previousValue = _cliente;
                    _cliente = value;
                    FixupCliente(previousValue);
                    OnNavigationPropertyChanged("Cliente");
                }
            }
        }
        private Cliente _cliente;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Cliente = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCliente(Cliente previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Beneficiarios.Contains(this))
            {
                previousValue.Beneficiarios.Remove(this);
            }
    
            if (Cliente != null)
            {
                if (!Cliente.Beneficiarios.Contains(this))
                {
                    Cliente.Beneficiarios.Add(this);
                }
    
                cliente_id = Cliente.id;
            }
            else if (!skipKeys)
            {
                cliente_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Cliente")
                    && (ChangeTracker.OriginalValues["Cliente"] == Cliente))
                {
                    ChangeTracker.OriginalValues.Remove("Cliente");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Cliente", previousValue);
                }
                if (Cliente != null && !Cliente.ChangeTracker.ChangeTrackingEnabled)
                {
                    Cliente.StartTracking();
                }
            }
        }

        #endregion
    }
}
