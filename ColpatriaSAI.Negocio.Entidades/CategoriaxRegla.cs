//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Categoria))]
    [KnownType(typeof(Regla))]
    public partial class CategoriaxRegla: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int regla_id
        {
            get { return _regla_id; }
            set
            {
                if (_regla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("regla_id", _regla_id);
                    if (!IsDeserializing)
                    {
                        if (Regla != null && Regla.id != value)
                        {
                            Regla = null;
                        }
                    }
                    _regla_id = value;
                    OnPropertyChanged("regla_id");
                }
            }
        }
        private int _regla_id;
    
        [DataMember]
        public int categoria_id
        {
            get { return _categoria_id; }
            set
            {
                if (_categoria_id != value)
                {
                    ChangeTracker.RecordOriginalValue("categoria_id", _categoria_id);
                    if (!IsDeserializing)
                    {
                        if (Categoria != null && Categoria.id != value)
                        {
                            Categoria = null;
                        }
                    }
                    _categoria_id = value;
                    OnPropertyChanged("categoria_id");
                }
            }
        }
        private int _categoria_id;
    
        [DataMember]
        public bool esRecaudo
        {
            get { return _esRecaudo; }
            set
            {
                if (_esRecaudo != value)
                {
                    _esRecaudo = value;
                    OnPropertyChanged("esRecaudo");
                }
            }
        }
        private bool _esRecaudo;
    
        [DataMember]
        public bool esColquin
        {
            get { return _esColquin; }
            set
            {
                if (_esColquin != value)
                {
                    _esColquin = value;
                    OnPropertyChanged("esColquin");
                }
            }
        }
        private bool _esColquin;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Categoria Categoria
        {
            get { return _categoria; }
            set
            {
                if (!ReferenceEquals(_categoria, value))
                {
                    var previousValue = _categoria;
                    _categoria = value;
                    FixupCategoria(previousValue);
                    OnNavigationPropertyChanged("Categoria");
                }
            }
        }
        private Categoria _categoria;
    
        [DataMember]
        public Regla Regla
        {
            get { return _regla; }
            set
            {
                if (!ReferenceEquals(_regla, value))
                {
                    var previousValue = _regla;
                    _regla = value;
                    FixupRegla(previousValue);
                    OnNavigationPropertyChanged("Regla");
                }
            }
        }
        private Regla _regla;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Categoria = null;
            Regla = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCategoria(Categoria previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CategoriaxReglas.Contains(this))
            {
                previousValue.CategoriaxReglas.Remove(this);
            }
    
            if (Categoria != null)
            {
                if (!Categoria.CategoriaxReglas.Contains(this))
                {
                    Categoria.CategoriaxReglas.Add(this);
                }
    
                categoria_id = Categoria.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Categoria")
                    && (ChangeTracker.OriginalValues["Categoria"] == Categoria))
                {
                    ChangeTracker.OriginalValues.Remove("Categoria");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Categoria", previousValue);
                }
                if (Categoria != null && !Categoria.ChangeTracker.ChangeTrackingEnabled)
                {
                    Categoria.StartTracking();
                }
            }
        }
    
        private void FixupRegla(Regla previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CategoriaxReglas.Contains(this))
            {
                previousValue.CategoriaxReglas.Remove(this);
            }
    
            if (Regla != null)
            {
                if (!Regla.CategoriaxReglas.Contains(this))
                {
                    Regla.CategoriaxReglas.Add(this);
                }
    
                regla_id = Regla.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Regla")
                    && (ChangeTracker.OriginalValues["Regla"] == Regla))
                {
                    ChangeTracker.OriginalValues.Remove("Regla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Regla", previousValue);
                }
                if (Regla != null && !Regla.ChangeTracker.ChangeTrackingEnabled)
                {
                    Regla.StartTracking();
                }
            }
        }

        #endregion
    }
}
