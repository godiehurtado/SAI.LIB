//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Operador))]
    [KnownType(typeof(TipoPremio))]
    [KnownType(typeof(UnidadMedida))]
    [KnownType(typeof(PremioxSubregla))]
    [KnownType(typeof(Variable))]
    [KnownType(typeof(VariablexPremio))]
    [KnownType(typeof(LiquidacionReglaPremio))]
    public partial class Premio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public Nullable<int> tipoPremio_id
        {
            get { return _tipoPremio_id; }
            set
            {
                if (_tipoPremio_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoPremio_id", _tipoPremio_id);
                    if (!IsDeserializing)
                    {
                        if (TipoPremio != null && TipoPremio.id != value)
                        {
                            TipoPremio = null;
                        }
                    }
                    _tipoPremio_id = value;
                    OnPropertyChanged("tipoPremio_id");
                }
            }
        }
        private Nullable<int> _tipoPremio_id;
    
        [DataMember]
        public Nullable<int> operador_id
        {
            get { return _operador_id; }
            set
            {
                if (_operador_id != value)
                {
                    ChangeTracker.RecordOriginalValue("operador_id", _operador_id);
                    if (!IsDeserializing)
                    {
                        if (Operador != null && Operador.id != value)
                        {
                            Operador = null;
                        }
                    }
                    _operador_id = value;
                    OnPropertyChanged("operador_id");
                }
            }
        }
        private Nullable<int> _operador_id;
    
        [DataMember]
        public Nullable<double> valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("valor");
                }
            }
        }
        private Nullable<double> _valor;
    
        [DataMember]
        public Nullable<int> unidadmedida_id
        {
            get { return _unidadmedida_id; }
            set
            {
                if (_unidadmedida_id != value)
                {
                    ChangeTracker.RecordOriginalValue("unidadmedida_id", _unidadmedida_id);
                    if (!IsDeserializing)
                    {
                        if (UnidadMedida != null && UnidadMedida.id != value)
                        {
                            UnidadMedida = null;
                        }
                    }
                    _unidadmedida_id = value;
                    OnPropertyChanged("unidadmedida_id");
                }
            }
        }
        private Nullable<int> _unidadmedida_id;
    
        [DataMember]
        public string descripcion_premio
        {
            get { return _descripcion_premio; }
            set
            {
                if (_descripcion_premio != value)
                {
                    _descripcion_premio = value;
                    OnPropertyChanged("descripcion_premio");
                }
            }
        }
        private string _descripcion_premio;
    
        [DataMember]
        public Nullable<int> variable_id
        {
            get { return _variable_id; }
            set
            {
                if (_variable_id != value)
                {
                    ChangeTracker.RecordOriginalValue("variable_id", _variable_id);
                    if (!IsDeserializing)
                    {
                        if (Variable != null && Variable.id != value)
                        {
                            Variable = null;
                        }
                    }
                    _variable_id = value;
                    OnPropertyChanged("variable_id");
                }
            }
        }
        private Nullable<int> _variable_id;
    
        [DataMember]
        public Nullable<bool> regularidad
        {
            get { return _regularidad; }
            set
            {
                if (_regularidad != value)
                {
                    _regularidad = value;
                    OnPropertyChanged("regularidad");
                }
            }
        }
        private Nullable<bool> _regularidad;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Operador Operador
        {
            get { return _operador; }
            set
            {
                if (!ReferenceEquals(_operador, value))
                {
                    var previousValue = _operador;
                    _operador = value;
                    FixupOperador(previousValue);
                    OnNavigationPropertyChanged("Operador");
                }
            }
        }
        private Operador _operador;
    
        [DataMember]
        public TipoPremio TipoPremio
        {
            get { return _tipoPremio; }
            set
            {
                if (!ReferenceEquals(_tipoPremio, value))
                {
                    var previousValue = _tipoPremio;
                    _tipoPremio = value;
                    FixupTipoPremio(previousValue);
                    OnNavigationPropertyChanged("TipoPremio");
                }
            }
        }
        private TipoPremio _tipoPremio;
    
        [DataMember]
        public UnidadMedida UnidadMedida
        {
            get { return _unidadMedida; }
            set
            {
                if (!ReferenceEquals(_unidadMedida, value))
                {
                    var previousValue = _unidadMedida;
                    _unidadMedida = value;
                    FixupUnidadMedida(previousValue);
                    OnNavigationPropertyChanged("UnidadMedida");
                }
            }
        }
        private UnidadMedida _unidadMedida;
    
        [DataMember]
        public TrackableCollection<PremioxSubregla> PremioxSubreglas
        {
            get
            {
                if (_premioxSubreglas == null)
                {
                    _premioxSubreglas = new TrackableCollection<PremioxSubregla>();
                    _premioxSubreglas.CollectionChanged += FixupPremioxSubreglas;
                }
                return _premioxSubreglas;
            }
            set
            {
                if (!ReferenceEquals(_premioxSubreglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_premioxSubreglas != null)
                    {
                        _premioxSubreglas.CollectionChanged -= FixupPremioxSubreglas;
                    }
                    _premioxSubreglas = value;
                    if (_premioxSubreglas != null)
                    {
                        _premioxSubreglas.CollectionChanged += FixupPremioxSubreglas;
                    }
                    OnNavigationPropertyChanged("PremioxSubreglas");
                }
            }
        }
        private TrackableCollection<PremioxSubregla> _premioxSubreglas;
    
        [DataMember]
        public Variable Variable
        {
            get { return _variable; }
            set
            {
                if (!ReferenceEquals(_variable, value))
                {
                    var previousValue = _variable;
                    _variable = value;
                    FixupVariable(previousValue);
                    OnNavigationPropertyChanged("Variable");
                }
            }
        }
        private Variable _variable;
    
        [DataMember]
        public TrackableCollection<VariablexPremio> VariablexPremios
        {
            get
            {
                if (_variablexPremios == null)
                {
                    _variablexPremios = new TrackableCollection<VariablexPremio>();
                    _variablexPremios.CollectionChanged += FixupVariablexPremios;
                }
                return _variablexPremios;
            }
            set
            {
                if (!ReferenceEquals(_variablexPremios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_variablexPremios != null)
                    {
                        _variablexPremios.CollectionChanged -= FixupVariablexPremios;
                    }
                    _variablexPremios = value;
                    if (_variablexPremios != null)
                    {
                        _variablexPremios.CollectionChanged += FixupVariablexPremios;
                    }
                    OnNavigationPropertyChanged("VariablexPremios");
                }
            }
        }
        private TrackableCollection<VariablexPremio> _variablexPremios;
    
        [DataMember]
        public TrackableCollection<LiquidacionReglaPremio> LiquidacionReglaPremios
        {
            get
            {
                if (_liquidacionReglaPremios == null)
                {
                    _liquidacionReglaPremios = new TrackableCollection<LiquidacionReglaPremio>();
                    _liquidacionReglaPremios.CollectionChanged += FixupLiquidacionReglaPremios;
                }
                return _liquidacionReglaPremios;
            }
            set
            {
                if (!ReferenceEquals(_liquidacionReglaPremios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_liquidacionReglaPremios != null)
                    {
                        _liquidacionReglaPremios.CollectionChanged -= FixupLiquidacionReglaPremios;
                    }
                    _liquidacionReglaPremios = value;
                    if (_liquidacionReglaPremios != null)
                    {
                        _liquidacionReglaPremios.CollectionChanged += FixupLiquidacionReglaPremios;
                    }
                    OnNavigationPropertyChanged("LiquidacionReglaPremios");
                }
            }
        }
        private TrackableCollection<LiquidacionReglaPremio> _liquidacionReglaPremios;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Operador = null;
            TipoPremio = null;
            UnidadMedida = null;
            PremioxSubreglas.Clear();
            Variable = null;
            VariablexPremios.Clear();
            LiquidacionReglaPremios.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupOperador(Operador previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Premios.Contains(this))
            {
                previousValue.Premios.Remove(this);
            }
    
            if (Operador != null)
            {
                if (!Operador.Premios.Contains(this))
                {
                    Operador.Premios.Add(this);
                }
    
                operador_id = Operador.id;
            }
            else if (!skipKeys)
            {
                operador_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Operador")
                    && (ChangeTracker.OriginalValues["Operador"] == Operador))
                {
                    ChangeTracker.OriginalValues.Remove("Operador");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Operador", previousValue);
                }
                if (Operador != null && !Operador.ChangeTracker.ChangeTrackingEnabled)
                {
                    Operador.StartTracking();
                }
            }
        }
    
        private void FixupTipoPremio(TipoPremio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Premios.Contains(this))
            {
                previousValue.Premios.Remove(this);
            }
    
            if (TipoPremio != null)
            {
                if (!TipoPremio.Premios.Contains(this))
                {
                    TipoPremio.Premios.Add(this);
                }
    
                tipoPremio_id = TipoPremio.id;
            }
            else if (!skipKeys)
            {
                tipoPremio_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoPremio")
                    && (ChangeTracker.OriginalValues["TipoPremio"] == TipoPremio))
                {
                    ChangeTracker.OriginalValues.Remove("TipoPremio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoPremio", previousValue);
                }
                if (TipoPremio != null && !TipoPremio.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoPremio.StartTracking();
                }
            }
        }
    
        private void FixupUnidadMedida(UnidadMedida previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Premios.Contains(this))
            {
                previousValue.Premios.Remove(this);
            }
    
            if (UnidadMedida != null)
            {
                if (!UnidadMedida.Premios.Contains(this))
                {
                    UnidadMedida.Premios.Add(this);
                }
    
                unidadmedida_id = UnidadMedida.id;
            }
            else if (!skipKeys)
            {
                unidadmedida_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UnidadMedida")
                    && (ChangeTracker.OriginalValues["UnidadMedida"] == UnidadMedida))
                {
                    ChangeTracker.OriginalValues.Remove("UnidadMedida");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UnidadMedida", previousValue);
                }
                if (UnidadMedida != null && !UnidadMedida.ChangeTracker.ChangeTrackingEnabled)
                {
                    UnidadMedida.StartTracking();
                }
            }
        }
    
        private void FixupVariable(Variable previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Premios.Contains(this))
            {
                previousValue.Premios.Remove(this);
            }
    
            if (Variable != null)
            {
                if (!Variable.Premios.Contains(this))
                {
                    Variable.Premios.Add(this);
                }
    
                variable_id = Variable.id;
            }
            else if (!skipKeys)
            {
                variable_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Variable")
                    && (ChangeTracker.OriginalValues["Variable"] == Variable))
                {
                    ChangeTracker.OriginalValues.Remove("Variable");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Variable", previousValue);
                }
                if (Variable != null && !Variable.ChangeTracker.ChangeTrackingEnabled)
                {
                    Variable.StartTracking();
                }
            }
        }
    
        private void FixupPremioxSubreglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PremioxSubregla item in e.NewItems)
                {
                    item.Premio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PremioxSubreglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PremioxSubregla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Premio, this))
                    {
                        item.Premio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PremioxSubreglas", item);
                    }
                }
            }
        }
    
        private void FixupVariablexPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (VariablexPremio item in e.NewItems)
                {
                    item.Premio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("VariablexPremios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (VariablexPremio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Premio, this))
                    {
                        item.Premio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("VariablexPremios", item);
                    }
                }
            }
        }
    
        private void FixupLiquidacionReglaPremios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiquidacionReglaPremio item in e.NewItems)
                {
                    item.Premio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiquidacionReglaPremios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiquidacionReglaPremio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Premio, this))
                    {
                        item.Premio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiquidacionReglaPremios", item);
                    }
                }
            }
        }

        #endregion
    }
}
