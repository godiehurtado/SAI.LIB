//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class COMJSN: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string codCompania
        {
            get { return _codCompania; }
            set
            {
                if (_codCompania != value)
                {
                    _codCompania = value;
                    OnPropertyChanged("codCompania");
                }
            }
        }
        private string _codCompania;
    
        [DataMember]
        public Nullable<int> codSucursal
        {
            get { return _codSucursal; }
            set
            {
                if (_codSucursal != value)
                {
                    _codSucursal = value;
                    OnPropertyChanged("codSucursal");
                }
            }
        }
        private Nullable<int> _codSucursal;
    
        [DataMember]
        public string codRamo
        {
            get { return _codRamo; }
            set
            {
                if (_codRamo != value)
                {
                    _codRamo = value;
                    OnPropertyChanged("codRamo");
                }
            }
        }
        private string _codRamo;
    
        [DataMember]
        public string numeroNegocio
        {
            get { return _numeroNegocio; }
            set
            {
                if (_numeroNegocio != value)
                {
                    _numeroNegocio = value;
                    OnPropertyChanged("numeroNegocio");
                }
            }
        }
        private string _numeroNegocio;
    
        [DataMember]
        public Nullable<int> segmentoNegocio
        {
            get { return _segmentoNegocio; }
            set
            {
                if (_segmentoNegocio != value)
                {
                    _segmentoNegocio = value;
                    OnPropertyChanged("segmentoNegocio");
                }
            }
        }
        private Nullable<int> _segmentoNegocio;
    
        [DataMember]
        public string claveAsesor
        {
            get { return _claveAsesor; }
            set
            {
                if (_claveAsesor != value)
                {
                    _claveAsesor = value;
                    OnPropertyChanged("claveAsesor");
                }
            }
        }
        private string _claveAsesor;
    
        [DataMember]
        public string nombreDirector
        {
            get { return _nombreDirector; }
            set
            {
                if (_nombreDirector != value)
                {
                    _nombreDirector = value;
                    OnPropertyChanged("nombreDirector");
                }
            }
        }
        private string _nombreDirector;
    
        [DataMember]
        public string nombreGerente
        {
            get { return _nombreGerente; }
            set
            {
                if (_nombreGerente != value)
                {
                    _nombreGerente = value;
                    OnPropertyChanged("nombreGerente");
                }
            }
        }
        private string _nombreGerente;
    
        [DataMember]
        public Nullable<int> segmentoNatural
        {
            get { return _segmentoNatural; }
            set
            {
                if (_segmentoNatural != value)
                {
                    _segmentoNatural = value;
                    OnPropertyChanged("segmentoNatural");
                }
            }
        }
        private Nullable<int> _segmentoNatural;
    
        [DataMember]
        public Nullable<int> sectorEyE
        {
            get { return _sectorEyE; }
            set
            {
                if (_sectorEyE != value)
                {
                    _sectorEyE = value;
                    OnPropertyChanged("sectorEyE");
                }
            }
        }
        private Nullable<int> _sectorEyE;
    
        [DataMember]
        public Nullable<int> sectorPyP
        {
            get { return _sectorPyP; }
            set
            {
                if (_sectorPyP != value)
                {
                    _sectorPyP = value;
                    OnPropertyChanged("sectorPyP");
                }
            }
        }
        private Nullable<int> _sectorPyP;
    
        [DataMember]
        public Nullable<int> sectorCH
        {
            get { return _sectorCH; }
            set
            {
                if (_sectorCH != value)
                {
                    _sectorCH = value;
                    OnPropertyChanged("sectorCH");
                }
            }
        }
        private Nullable<int> _sectorCH;
    
        [DataMember]
        public string microsegmentacion
        {
            get { return _microsegmentacion; }
            set
            {
                if (_microsegmentacion != value)
                {
                    _microsegmentacion = value;
                    OnPropertyChanged("microsegmentacion");
                }
            }
        }
        private string _microsegmentacion;
    
        [DataMember]
        public string codigoCIUUSegmento
        {
            get { return _codigoCIUUSegmento; }
            set
            {
                if (_codigoCIUUSegmento != value)
                {
                    _codigoCIUUSegmento = value;
                    OnPropertyChanged("codigoCIUUSegmento");
                }
            }
        }
        private string _codigoCIUUSegmento;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
