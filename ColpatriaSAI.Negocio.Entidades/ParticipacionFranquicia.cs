//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetallePartFranquicia))]
    [KnownType(typeof(Localidad))]
    public partial class ParticipacionFranquicia: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public System.DateTime fecha_ini
        {
            get { return _fecha_ini; }
            set
            {
                if (_fecha_ini != value)
                {
                    _fecha_ini = value;
                    OnPropertyChanged("fecha_ini");
                }
            }
        }
        private System.DateTime _fecha_ini;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_fin
        {
            get { return _fecha_fin; }
            set
            {
                if (_fecha_fin != value)
                {
                    _fecha_fin = value;
                    OnPropertyChanged("fecha_fin");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_fin;
    
        [DataMember]
        public Nullable<int> Localidad_id
        {
            get { return _localidad_id; }
            set
            {
                if (_localidad_id != value)
                {
                    ChangeTracker.RecordOriginalValue("Localidad_id", _localidad_id);
                    if (!IsDeserializing)
                    {
                        if (Localidad != null && Localidad.id != value)
                        {
                            Localidad = null;
                        }
                    }
                    _localidad_id = value;
                    OnPropertyChanged("Localidad_id");
                }
            }
        }
        private Nullable<int> _localidad_id;
    
        [DataMember]
        public System.DateTime fecha_actualizacion
        {
            get { return _fecha_actualizacion; }
            set
            {
                if (_fecha_actualizacion != value)
                {
                    _fecha_actualizacion = value;
                    OnPropertyChanged("fecha_actualizacion");
                }
            }
        }
        private System.DateTime _fecha_actualizacion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DetallePartFranquicia> DetallePartFranquicias
        {
            get
            {
                if (_detallePartFranquicias == null)
                {
                    _detallePartFranquicias = new TrackableCollection<DetallePartFranquicia>();
                    _detallePartFranquicias.CollectionChanged += FixupDetallePartFranquicias;
                }
                return _detallePartFranquicias;
            }
            set
            {
                if (!ReferenceEquals(_detallePartFranquicias, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detallePartFranquicias != null)
                    {
                        _detallePartFranquicias.CollectionChanged -= FixupDetallePartFranquicias;
                    }
                    _detallePartFranquicias = value;
                    if (_detallePartFranquicias != null)
                    {
                        _detallePartFranquicias.CollectionChanged += FixupDetallePartFranquicias;
                    }
                    OnNavigationPropertyChanged("DetallePartFranquicias");
                }
            }
        }
        private TrackableCollection<DetallePartFranquicia> _detallePartFranquicias;
    
        [DataMember]
        public Localidad Localidad
        {
            get { return _localidad; }
            set
            {
                if (!ReferenceEquals(_localidad, value))
                {
                    var previousValue = _localidad;
                    _localidad = value;
                    FixupLocalidad(previousValue);
                    OnNavigationPropertyChanged("Localidad");
                }
            }
        }
        private Localidad _localidad;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetallePartFranquicias.Clear();
            Localidad = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLocalidad(Localidad previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ParticipacionFranquicias.Contains(this))
            {
                previousValue.ParticipacionFranquicias.Remove(this);
            }
    
            if (Localidad != null)
            {
                if (!Localidad.ParticipacionFranquicias.Contains(this))
                {
                    Localidad.ParticipacionFranquicias.Add(this);
                }
    
                Localidad_id = Localidad.id;
            }
            else if (!skipKeys)
            {
                Localidad_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Localidad")
                    && (ChangeTracker.OriginalValues["Localidad"] == Localidad))
                {
                    ChangeTracker.OriginalValues.Remove("Localidad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Localidad", previousValue);
                }
                if (Localidad != null && !Localidad.ChangeTracker.ChangeTrackingEnabled)
                {
                    Localidad.StartTracking();
                }
            }
        }
    
        private void FixupDetallePartFranquicias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetallePartFranquicia item in e.NewItems)
                {
                    item.ParticipacionFranquicia = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetallePartFranquicias", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetallePartFranquicia item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParticipacionFranquicia, this))
                    {
                        item.ParticipacionFranquicia = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetallePartFranquicias", item);
                    }
                }
            }
        }

        #endregion
    }
}
