//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PackageLog))]
    public partial class PackageTaskLog: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PackageTaskLogID
        {
            get { return _packageTaskLogID; }
            set
            {
                if (_packageTaskLogID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PackageTaskLogID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _packageTaskLogID = value;
                    OnPropertyChanged("PackageTaskLogID");
                }
            }
        }
        private int _packageTaskLogID;
    
        [DataMember]
        public int PackageLogID
        {
            get { return _packageLogID; }
            set
            {
                if (_packageLogID != value)
                {
                    ChangeTracker.RecordOriginalValue("PackageLogID", _packageLogID);
                    if (!IsDeserializing)
                    {
                        if (PackageLog != null && PackageLog.PackageLogID != value)
                        {
                            PackageLog = null;
                        }
                    }
                    _packageLogID = value;
                    OnPropertyChanged("PackageLogID");
                }
            }
        }
        private int _packageLogID;
    
        [DataMember]
        public string SourceName
        {
            get { return _sourceName; }
            set
            {
                if (_sourceName != value)
                {
                    _sourceName = value;
                    OnPropertyChanged("SourceName");
                }
            }
        }
        private string _sourceName;
    
        [DataMember]
        public System.Guid SourceID
        {
            get { return _sourceID; }
            set
            {
                if (_sourceID != value)
                {
                    _sourceID = value;
                    OnPropertyChanged("SourceID");
                }
            }
        }
        private System.Guid _sourceID;
    
        [DataMember]
        public System.DateTime StartDateTime
        {
            get { return _startDateTime; }
            set
            {
                if (_startDateTime != value)
                {
                    _startDateTime = value;
                    OnPropertyChanged("StartDateTime");
                }
            }
        }
        private System.DateTime _startDateTime;
    
        [DataMember]
        public Nullable<System.DateTime> EndDateTime
        {
            get { return _endDateTime; }
            set
            {
                if (_endDateTime != value)
                {
                    _endDateTime = value;
                    OnPropertyChanged("EndDateTime");
                }
            }
        }
        private Nullable<System.DateTime> _endDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public PackageLog PackageLog
        {
            get { return _packageLog; }
            set
            {
                if (!ReferenceEquals(_packageLog, value))
                {
                    var previousValue = _packageLog;
                    _packageLog = value;
                    FixupPackageLog(previousValue);
                    OnNavigationPropertyChanged("PackageLog");
                }
            }
        }
        private PackageLog _packageLog;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PackageLog = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupPackageLog(PackageLog previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PackageTaskLogs.Contains(this))
            {
                previousValue.PackageTaskLogs.Remove(this);
            }
    
            if (PackageLog != null)
            {
                if (!PackageLog.PackageTaskLogs.Contains(this))
                {
                    PackageLog.PackageTaskLogs.Add(this);
                }
    
                PackageLogID = PackageLog.PackageLogID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PackageLog")
                    && (ChangeTracker.OriginalValues["PackageLog"] == PackageLog))
                {
                    ChangeTracker.OriginalValues.Remove("PackageLog");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PackageLog", previousValue);
                }
                if (PackageLog != null && !PackageLog.ChangeTracker.ChangeTrackingEnabled)
                {
                    PackageLog.StartTracking();
                }
            }
        }

        #endregion
    }
}
