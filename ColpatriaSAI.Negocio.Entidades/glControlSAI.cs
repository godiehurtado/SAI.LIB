//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class glControlSAI: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int controlID
        {
            get { return _controlID; }
            set
            {
                if (_controlID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'controlID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _controlID = value;
                    OnPropertyChanged("controlID");
                }
            }
        }
        private int _controlID;
    
        [DataMember]
        public int tablaModuloProceso
        {
            get { return _tablaModuloProceso; }
            set
            {
                if (_tablaModuloProceso != value)
                {
                    _tablaModuloProceso = value;
                    OnPropertyChanged("tablaModuloProceso");
                }
            }
        }
        private int _tablaModuloProceso;
    
        [DataMember]
        public string tipoModificacion
        {
            get { return _tipoModificacion; }
            set
            {
                if (_tipoModificacion != value)
                {
                    _tipoModificacion = value;
                    OnPropertyChanged("tipoModificacion");
                }
            }
        }
        private string _tipoModificacion;
    
        [DataMember]
        public System.DateTime fechaInicio
        {
            get { return _fechaInicio; }
            set
            {
                if (_fechaInicio != value)
                {
                    _fechaInicio = value;
                    OnPropertyChanged("fechaInicio");
                }
            }
        }
        private System.DateTime _fechaInicio;
    
        [DataMember]
        public System.DateTime fechaFinal
        {
            get { return _fechaFinal; }
            set
            {
                if (_fechaFinal != value)
                {
                    _fechaFinal = value;
                    OnPropertyChanged("fechaFinal");
                }
            }
        }
        private System.DateTime _fechaFinal;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;
    
        [DataMember]
        public string Observacion
        {
            get { return _observacion; }
            set
            {
                if (_observacion != value)
                {
                    _observacion = value;
                    OnPropertyChanged("Observacion");
                }
            }
        }
        private string _observacion;
    
        [DataMember]
        public string PrimeraVersion
        {
            get { return _primeraVersion; }
            set
            {
                if (_primeraVersion != value)
                {
                    _primeraVersion = value;
                    OnPropertyChanged("PrimeraVersion");
                }
            }
        }
        private string _primeraVersion;
    
        [DataMember]
        public string VersionFinal
        {
            get { return _versionFinal; }
            set
            {
                if (_versionFinal != value)
                {
                    _versionFinal = value;
                    OnPropertyChanged("VersionFinal");
                }
            }
        }
        private string _versionFinal;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
