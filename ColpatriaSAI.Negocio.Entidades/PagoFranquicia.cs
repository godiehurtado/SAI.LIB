//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AnticipoFranquicia))]
    [KnownType(typeof(DetallePagosFranquicia))]
    [KnownType(typeof(LiquidacionFranquicia))]
    public partial class PagoFranquicia: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<System.DateTime> fechaPago
        {
            get { return _fechaPago; }
            set
            {
                if (_fechaPago != value)
                {
                    _fechaPago = value;
                    OnPropertyChanged("fechaPago");
                }
            }
        }
        private Nullable<System.DateTime> _fechaPago;
    
        [DataMember]
        public Nullable<int> liquidacionFranquicia_id
        {
            get { return _liquidacionFranquicia_id; }
            set
            {
                if (_liquidacionFranquicia_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquidacionFranquicia_id", _liquidacionFranquicia_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionFranquicia != null && LiquidacionFranquicia.id != value)
                        {
                            LiquidacionFranquicia = null;
                        }
                    }
                    _liquidacionFranquicia_id = value;
                    OnPropertyChanged("liquidacionFranquicia_id");
                }
            }
        }
        private Nullable<int> _liquidacionFranquicia_id;
    
        [DataMember]
        public Nullable<int> anticipo_id
        {
            get { return _anticipo_id; }
            set
            {
                if (_anticipo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("anticipo_id", _anticipo_id);
                    if (!IsDeserializing)
                    {
                        if (AnticipoFranquicia != null && AnticipoFranquicia.Id != value)
                        {
                            AnticipoFranquicia = null;
                        }
                    }
                    _anticipo_id = value;
                    OnPropertyChanged("anticipo_id");
                }
            }
        }
        private Nullable<int> _anticipo_id;
    
        [DataMember]
        public string usuario
        {
            get { return _usuario; }
            set
            {
                if (_usuario != value)
                {
                    _usuario = value;
                    OnPropertyChanged("usuario");
                }
            }
        }
        private string _usuario;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public AnticipoFranquicia AnticipoFranquicia
        {
            get { return _anticipoFranquicia; }
            set
            {
                if (!ReferenceEquals(_anticipoFranquicia, value))
                {
                    var previousValue = _anticipoFranquicia;
                    _anticipoFranquicia = value;
                    FixupAnticipoFranquicia(previousValue);
                    OnNavigationPropertyChanged("AnticipoFranquicia");
                }
            }
        }
        private AnticipoFranquicia _anticipoFranquicia;
    
        [DataMember]
        public TrackableCollection<DetallePagosFranquicia> DetallePagosFranquicias
        {
            get
            {
                if (_detallePagosFranquicias == null)
                {
                    _detallePagosFranquicias = new TrackableCollection<DetallePagosFranquicia>();
                    _detallePagosFranquicias.CollectionChanged += FixupDetallePagosFranquicias;
                }
                return _detallePagosFranquicias;
            }
            set
            {
                if (!ReferenceEquals(_detallePagosFranquicias, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_detallePagosFranquicias != null)
                    {
                        _detallePagosFranquicias.CollectionChanged -= FixupDetallePagosFranquicias;
                    }
                    _detallePagosFranquicias = value;
                    if (_detallePagosFranquicias != null)
                    {
                        _detallePagosFranquicias.CollectionChanged += FixupDetallePagosFranquicias;
                    }
                    OnNavigationPropertyChanged("DetallePagosFranquicias");
                }
            }
        }
        private TrackableCollection<DetallePagosFranquicia> _detallePagosFranquicias;
    
        [DataMember]
        public LiquidacionFranquicia LiquidacionFranquicia
        {
            get { return _liquidacionFranquicia; }
            set
            {
                if (!ReferenceEquals(_liquidacionFranquicia, value))
                {
                    var previousValue = _liquidacionFranquicia;
                    _liquidacionFranquicia = value;
                    FixupLiquidacionFranquicia(previousValue);
                    OnNavigationPropertyChanged("LiquidacionFranquicia");
                }
            }
        }
        private LiquidacionFranquicia _liquidacionFranquicia;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AnticipoFranquicia = null;
            DetallePagosFranquicias.Clear();
            LiquidacionFranquicia = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAnticipoFranquicia(AnticipoFranquicia previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PagoFranquicias.Contains(this))
            {
                previousValue.PagoFranquicias.Remove(this);
            }
    
            if (AnticipoFranquicia != null)
            {
                if (!AnticipoFranquicia.PagoFranquicias.Contains(this))
                {
                    AnticipoFranquicia.PagoFranquicias.Add(this);
                }
    
                anticipo_id = AnticipoFranquicia.Id;
            }
            else if (!skipKeys)
            {
                anticipo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AnticipoFranquicia")
                    && (ChangeTracker.OriginalValues["AnticipoFranquicia"] == AnticipoFranquicia))
                {
                    ChangeTracker.OriginalValues.Remove("AnticipoFranquicia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AnticipoFranquicia", previousValue);
                }
                if (AnticipoFranquicia != null && !AnticipoFranquicia.ChangeTracker.ChangeTrackingEnabled)
                {
                    AnticipoFranquicia.StartTracking();
                }
            }
        }
    
        private void FixupLiquidacionFranquicia(LiquidacionFranquicia previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PagoFranquicias.Contains(this))
            {
                previousValue.PagoFranquicias.Remove(this);
            }
    
            if (LiquidacionFranquicia != null)
            {
                if (!LiquidacionFranquicia.PagoFranquicias.Contains(this))
                {
                    LiquidacionFranquicia.PagoFranquicias.Add(this);
                }
    
                liquidacionFranquicia_id = LiquidacionFranquicia.id;
            }
            else if (!skipKeys)
            {
                liquidacionFranquicia_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionFranquicia")
                    && (ChangeTracker.OriginalValues["LiquidacionFranquicia"] == LiquidacionFranquicia))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionFranquicia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionFranquicia", previousValue);
                }
                if (LiquidacionFranquicia != null && !LiquidacionFranquicia.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionFranquicia.StartTracking();
                }
            }
        }
    
        private void FixupDetallePagosFranquicias(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DetallePagosFranquicia item in e.NewItems)
                {
                    item.PagoFranquicia = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DetallePagosFranquicias", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DetallePagosFranquicia item in e.OldItems)
                {
                    if (ReferenceEquals(item.PagoFranquicia, this))
                    {
                        item.PagoFranquicia = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DetallePagosFranquicias", item);
                    }
                }
            }
        }

        #endregion
    }
}
