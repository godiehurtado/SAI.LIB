//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Condicion))]
    [KnownType(typeof(LiquidacionRegla))]
    [KnownType(typeof(Participante))]
    public partial class LiquidacionReglaDetalleCondicion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int liquidacionRegla_id
        {
            get { return _liquidacionRegla_id; }
            set
            {
                if (_liquidacionRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("liquidacionRegla_id", _liquidacionRegla_id);
                    if (!IsDeserializing)
                    {
                        if (LiquidacionRegla != null && LiquidacionRegla.id != value)
                        {
                            LiquidacionRegla = null;
                        }
                    }
                    _liquidacionRegla_id = value;
                    OnPropertyChanged("liquidacionRegla_id");
                }
            }
        }
        private int _liquidacionRegla_id;
    
        [DataMember]
        public int condicion_id
        {
            get { return _condicion_id; }
            set
            {
                if (_condicion_id != value)
                {
                    ChangeTracker.RecordOriginalValue("condicion_id", _condicion_id);
                    if (!IsDeserializing)
                    {
                        if (Condicion != null && Condicion.id != value)
                        {
                            Condicion = null;
                        }
                    }
                    _condicion_id = value;
                    OnPropertyChanged("condicion_id");
                }
            }
        }
        private int _condicion_id;
    
        [DataMember]
        public int participante_id
        {
            get { return _participante_id; }
            set
            {
                if (_participante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("participante_id", _participante_id);
                    if (!IsDeserializing)
                    {
                        if (Participante != null && Participante.id != value)
                        {
                            Participante = null;
                        }
                    }
                    _participante_id = value;
                    OnPropertyChanged("participante_id");
                }
            }
        }
        private int _participante_id;
    
        [DataMember]
        public string valor
        {
            get { return _valor; }
            set
            {
                if (_valor != value)
                {
                    _valor = value;
                    OnPropertyChanged("valor");
                }
            }
        }
        private string _valor;
    
        [DataMember]
        public bool cumple
        {
            get { return _cumple; }
            set
            {
                if (_cumple != value)
                {
                    _cumple = value;
                    OnPropertyChanged("cumple");
                }
            }
        }
        private bool _cumple;
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Condicion Condicion
        {
            get { return _condicion; }
            set
            {
                if (!ReferenceEquals(_condicion, value))
                {
                    var previousValue = _condicion;
                    _condicion = value;
                    FixupCondicion(previousValue);
                    OnNavigationPropertyChanged("Condicion");
                }
            }
        }
        private Condicion _condicion;
    
        [DataMember]
        public LiquidacionRegla LiquidacionRegla
        {
            get { return _liquidacionRegla; }
            set
            {
                if (!ReferenceEquals(_liquidacionRegla, value))
                {
                    var previousValue = _liquidacionRegla;
                    _liquidacionRegla = value;
                    FixupLiquidacionRegla(previousValue);
                    OnNavigationPropertyChanged("LiquidacionRegla");
                }
            }
        }
        private LiquidacionRegla _liquidacionRegla;
    
        [DataMember]
        public Participante Participante
        {
            get { return _participante; }
            set
            {
                if (!ReferenceEquals(_participante, value))
                {
                    var previousValue = _participante;
                    _participante = value;
                    FixupParticipante(previousValue);
                    OnNavigationPropertyChanged("Participante");
                }
            }
        }
        private Participante _participante;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Condicion = null;
            LiquidacionRegla = null;
            Participante = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCondicion(Condicion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaDetalleCondicions.Contains(this))
            {
                previousValue.LiquidacionReglaDetalleCondicions.Remove(this);
            }
    
            if (Condicion != null)
            {
                if (!Condicion.LiquidacionReglaDetalleCondicions.Contains(this))
                {
                    Condicion.LiquidacionReglaDetalleCondicions.Add(this);
                }
    
                condicion_id = Condicion.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Condicion")
                    && (ChangeTracker.OriginalValues["Condicion"] == Condicion))
                {
                    ChangeTracker.OriginalValues.Remove("Condicion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Condicion", previousValue);
                }
                if (Condicion != null && !Condicion.ChangeTracker.ChangeTrackingEnabled)
                {
                    Condicion.StartTracking();
                }
            }
        }
    
        private void FixupLiquidacionRegla(LiquidacionRegla previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaDetalleCondicions.Contains(this))
            {
                previousValue.LiquidacionReglaDetalleCondicions.Remove(this);
            }
    
            if (LiquidacionRegla != null)
            {
                if (!LiquidacionRegla.LiquidacionReglaDetalleCondicions.Contains(this))
                {
                    LiquidacionRegla.LiquidacionReglaDetalleCondicions.Add(this);
                }
    
                liquidacionRegla_id = LiquidacionRegla.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiquidacionRegla")
                    && (ChangeTracker.OriginalValues["LiquidacionRegla"] == LiquidacionRegla))
                {
                    ChangeTracker.OriginalValues.Remove("LiquidacionRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiquidacionRegla", previousValue);
                }
                if (LiquidacionRegla != null && !LiquidacionRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiquidacionRegla.StartTracking();
                }
            }
        }
    
        private void FixupParticipante(Participante previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiquidacionReglaDetalleCondicions.Contains(this))
            {
                previousValue.LiquidacionReglaDetalleCondicions.Remove(this);
            }
    
            if (Participante != null)
            {
                if (!Participante.LiquidacionReglaDetalleCondicions.Contains(this))
                {
                    Participante.LiquidacionReglaDetalleCondicions.Add(this);
                }
    
                participante_id = Participante.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Participante")
                    && (ChangeTracker.OriginalValues["Participante"] == Participante))
                {
                    ChangeTracker.OriginalValues.Remove("Participante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Participante", previousValue);
                }
                if (Participante != null && !Participante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Participante.StartTracking();
                }
            }
        }

        #endregion
    }
}
