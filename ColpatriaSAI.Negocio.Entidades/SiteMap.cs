//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class SiteMap: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public string ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private string _iD;
    
        [DataMember]
        public string TITLE
        {
            get { return _tITLE; }
            set
            {
                if (_tITLE != value)
                {
                    _tITLE = value;
                    OnPropertyChanged("TITLE");
                }
            }
        }
        private string _tITLE;
    
        [DataMember]
        public string DESCRIPTION
        {
            get { return _dESCRIPTION; }
            set
            {
                if (_dESCRIPTION != value)
                {
                    _dESCRIPTION = value;
                    OnPropertyChanged("DESCRIPTION");
                }
            }
        }
        private string _dESCRIPTION;
    
        [DataMember]
        public string CONTROLLER
        {
            get { return _cONTROLLER; }
            set
            {
                if (_cONTROLLER != value)
                {
                    _cONTROLLER = value;
                    OnPropertyChanged("CONTROLLER");
                }
            }
        }
        private string _cONTROLLER;
    
        [DataMember]
        public string ACTION
        {
            get { return _aCTION; }
            set
            {
                if (_aCTION != value)
                {
                    _aCTION = value;
                    OnPropertyChanged("ACTION");
                }
            }
        }
        private string _aCTION;
    
        [DataMember]
        public string PARAMID
        {
            get { return _pARAMID; }
            set
            {
                if (_pARAMID != value)
                {
                    _pARAMID = value;
                    OnPropertyChanged("PARAMID");
                }
            }
        }
        private string _pARAMID;
    
        [DataMember]
        public string URL
        {
            get { return _uRL; }
            set
            {
                if (_uRL != value)
                {
                    _uRL = value;
                    OnPropertyChanged("URL");
                }
            }
        }
        private string _uRL;
    
        [DataMember]
        public string PARENT_ID
        {
            get { return _pARENT_ID; }
            set
            {
                if (_pARENT_ID != value)
                {
                    _pARENT_ID = value;
                    OnPropertyChanged("PARENT_ID");
                }
            }
        }
        private string _pARENT_ID;
    
        [DataMember]
        public string Roles
        {
            get { return _roles; }
            set
            {
                if (_roles != value)
                {
                    _roles = value;
                    OnPropertyChanged("Roles");
                }
            }
        }
        private string _roles;
    
        [DataMember]
        public Nullable<bool> ver
        {
            get { return _ver; }
            set
            {
                if (_ver != value)
                {
                    _ver = value;
                    OnPropertyChanged("ver");
                }
            }
        }
        private Nullable<bool> _ver;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
