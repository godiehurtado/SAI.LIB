//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DetallePagosFranquicia))]
    [KnownType(typeof(DetallePagosRegla))]
    [KnownType(typeof(TipoDocumento))]
    [KnownType(typeof(AnticipoFranquicia))]
    [KnownType(typeof(Compania))]
    public partial class Pago: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> detallePagosFranquicia_id
        {
            get { return _detallePagosFranquicia_id; }
            set
            {
                if (_detallePagosFranquicia_id != value)
                {
                    ChangeTracker.RecordOriginalValue("detallePagosFranquicia_id", _detallePagosFranquicia_id);
                    if (!IsDeserializing)
                    {
                        if (DetallePagosFranquicia != null && DetallePagosFranquicia.id != value)
                        {
                            DetallePagosFranquicia = null;
                        }
                    }
                    _detallePagosFranquicia_id = value;
                    OnPropertyChanged("detallePagosFranquicia_id");
                }
            }
        }
        private Nullable<int> _detallePagosFranquicia_id;
    
        [DataMember]
        public Nullable<int> detallePagosRegla_id
        {
            get { return _detallePagosRegla_id; }
            set
            {
                if (_detallePagosRegla_id != value)
                {
                    ChangeTracker.RecordOriginalValue("detallePagosRegla_id", _detallePagosRegla_id);
                    if (!IsDeserializing)
                    {
                        if (DetallePagosRegla != null && DetallePagosRegla.id != value)
                        {
                            DetallePagosRegla = null;
                        }
                    }
                    _detallePagosRegla_id = value;
                    OnPropertyChanged("detallePagosRegla_id");
                }
            }
        }
        private Nullable<int> _detallePagosRegla_id;
    
        [DataMember]
        public Nullable<int> compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    ChangeTracker.RecordOriginalValue("compania_id", _compania_id);
                    if (!IsDeserializing)
                    {
                        if (Compania != null && Compania.id != value)
                        {
                            Compania = null;
                        }
                    }
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private Nullable<int> _compania_id;
    
        [DataMember]
        public string clave
        {
            get { return _clave; }
            set
            {
                if (_clave != value)
                {
                    _clave = value;
                    OnPropertyChanged("clave");
                }
            }
        }
        private string _clave;
    
        [DataMember]
        public Nullable<int> tipoDocumento_id
        {
            get { return _tipoDocumento_id; }
            set
            {
                if (_tipoDocumento_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoDocumento_id", _tipoDocumento_id);
                    if (!IsDeserializing)
                    {
                        if (TipoDocumento != null && TipoDocumento.id != value)
                        {
                            TipoDocumento = null;
                        }
                    }
                    _tipoDocumento_id = value;
                    OnPropertyChanged("tipoDocumento_id");
                }
            }
        }
        private Nullable<int> _tipoDocumento_id;
    
        [DataMember]
        public string documento
        {
            get { return _documento; }
            set
            {
                if (_documento != value)
                {
                    _documento = value;
                    OnPropertyChanged("documento");
                }
            }
        }
        private string _documento;
    
        [DataMember]
        public Nullable<double> totalParticipacion
        {
            get { return _totalParticipacion; }
            set
            {
                if (_totalParticipacion != value)
                {
                    _totalParticipacion = value;
                    OnPropertyChanged("totalParticipacion");
                }
            }
        }
        private Nullable<double> _totalParticipacion;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public System.DateTime fechaPago
        {
            get { return _fechaPago; }
            set
            {
                if (_fechaPago != value)
                {
                    _fechaPago = value;
                    OnPropertyChanged("fechaPago");
                }
            }
        }
        private System.DateTime _fechaPago;
    
        [DataMember]
        public int estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("estado");
                }
            }
        }
        private int _estado;
    
        [DataMember]
        public Nullable<int> anticipoFranquicia_id
        {
            get { return _anticipoFranquicia_id; }
            set
            {
                if (_anticipoFranquicia_id != value)
                {
                    ChangeTracker.RecordOriginalValue("anticipoFranquicia_id", _anticipoFranquicia_id);
                    if (!IsDeserializing)
                    {
                        if (AnticipoFranquicia != null && AnticipoFranquicia.Id != value)
                        {
                            AnticipoFranquicia = null;
                        }
                    }
                    _anticipoFranquicia_id = value;
                    OnPropertyChanged("anticipoFranquicia_id");
                }
            }
        }
        private Nullable<int> _anticipoFranquicia_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DetallePagosFranquicia DetallePagosFranquicia
        {
            get { return _detallePagosFranquicia; }
            set
            {
                if (!ReferenceEquals(_detallePagosFranquicia, value))
                {
                    var previousValue = _detallePagosFranquicia;
                    _detallePagosFranquicia = value;
                    FixupDetallePagosFranquicia(previousValue);
                    OnNavigationPropertyChanged("DetallePagosFranquicia");
                }
            }
        }
        private DetallePagosFranquicia _detallePagosFranquicia;
    
        [DataMember]
        public DetallePagosRegla DetallePagosRegla
        {
            get { return _detallePagosRegla; }
            set
            {
                if (!ReferenceEquals(_detallePagosRegla, value))
                {
                    var previousValue = _detallePagosRegla;
                    _detallePagosRegla = value;
                    FixupDetallePagosRegla(previousValue);
                    OnNavigationPropertyChanged("DetallePagosRegla");
                }
            }
        }
        private DetallePagosRegla _detallePagosRegla;
    
        [DataMember]
        public TipoDocumento TipoDocumento
        {
            get { return _tipoDocumento; }
            set
            {
                if (!ReferenceEquals(_tipoDocumento, value))
                {
                    var previousValue = _tipoDocumento;
                    _tipoDocumento = value;
                    FixupTipoDocumento(previousValue);
                    OnNavigationPropertyChanged("TipoDocumento");
                }
            }
        }
        private TipoDocumento _tipoDocumento;
    
        [DataMember]
        public AnticipoFranquicia AnticipoFranquicia
        {
            get { return _anticipoFranquicia; }
            set
            {
                if (!ReferenceEquals(_anticipoFranquicia, value))
                {
                    var previousValue = _anticipoFranquicia;
                    _anticipoFranquicia = value;
                    FixupAnticipoFranquicia(previousValue);
                    OnNavigationPropertyChanged("AnticipoFranquicia");
                }
            }
        }
        private AnticipoFranquicia _anticipoFranquicia;
    
        [DataMember]
        public Compania Compania
        {
            get { return _compania; }
            set
            {
                if (!ReferenceEquals(_compania, value))
                {
                    var previousValue = _compania;
                    _compania = value;
                    FixupCompania(previousValue);
                    OnNavigationPropertyChanged("Compania");
                }
            }
        }
        private Compania _compania;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DetallePagosFranquicia = null;
            DetallePagosRegla = null;
            TipoDocumento = null;
            AnticipoFranquicia = null;
            Compania = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupDetallePagosFranquicia(DetallePagosFranquicia previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pagoes.Contains(this))
            {
                previousValue.Pagoes.Remove(this);
            }
    
            if (DetallePagosFranquicia != null)
            {
                if (!DetallePagosFranquicia.Pagoes.Contains(this))
                {
                    DetallePagosFranquicia.Pagoes.Add(this);
                }
    
                detallePagosFranquicia_id = DetallePagosFranquicia.id;
            }
            else if (!skipKeys)
            {
                detallePagosFranquicia_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetallePagosFranquicia")
                    && (ChangeTracker.OriginalValues["DetallePagosFranquicia"] == DetallePagosFranquicia))
                {
                    ChangeTracker.OriginalValues.Remove("DetallePagosFranquicia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetallePagosFranquicia", previousValue);
                }
                if (DetallePagosFranquicia != null && !DetallePagosFranquicia.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetallePagosFranquicia.StartTracking();
                }
            }
        }
    
        private void FixupDetallePagosRegla(DetallePagosRegla previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pagoes.Contains(this))
            {
                previousValue.Pagoes.Remove(this);
            }
    
            if (DetallePagosRegla != null)
            {
                if (!DetallePagosRegla.Pagoes.Contains(this))
                {
                    DetallePagosRegla.Pagoes.Add(this);
                }
    
                detallePagosRegla_id = DetallePagosRegla.id;
            }
            else if (!skipKeys)
            {
                detallePagosRegla_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DetallePagosRegla")
                    && (ChangeTracker.OriginalValues["DetallePagosRegla"] == DetallePagosRegla))
                {
                    ChangeTracker.OriginalValues.Remove("DetallePagosRegla");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DetallePagosRegla", previousValue);
                }
                if (DetallePagosRegla != null && !DetallePagosRegla.ChangeTracker.ChangeTrackingEnabled)
                {
                    DetallePagosRegla.StartTracking();
                }
            }
        }
    
        private void FixupTipoDocumento(TipoDocumento previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pagoes.Contains(this))
            {
                previousValue.Pagoes.Remove(this);
            }
    
            if (TipoDocumento != null)
            {
                if (!TipoDocumento.Pagoes.Contains(this))
                {
                    TipoDocumento.Pagoes.Add(this);
                }
    
                tipoDocumento_id = TipoDocumento.id;
            }
            else if (!skipKeys)
            {
                tipoDocumento_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoDocumento")
                    && (ChangeTracker.OriginalValues["TipoDocumento"] == TipoDocumento))
                {
                    ChangeTracker.OriginalValues.Remove("TipoDocumento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoDocumento", previousValue);
                }
                if (TipoDocumento != null && !TipoDocumento.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoDocumento.StartTracking();
                }
            }
        }
    
        private void FixupAnticipoFranquicia(AnticipoFranquicia previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pagoes.Contains(this))
            {
                previousValue.Pagoes.Remove(this);
            }
    
            if (AnticipoFranquicia != null)
            {
                if (!AnticipoFranquicia.Pagoes.Contains(this))
                {
                    AnticipoFranquicia.Pagoes.Add(this);
                }
    
                anticipoFranquicia_id = AnticipoFranquicia.Id;
            }
            else if (!skipKeys)
            {
                anticipoFranquicia_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AnticipoFranquicia")
                    && (ChangeTracker.OriginalValues["AnticipoFranquicia"] == AnticipoFranquicia))
                {
                    ChangeTracker.OriginalValues.Remove("AnticipoFranquicia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AnticipoFranquicia", previousValue);
                }
                if (AnticipoFranquicia != null && !AnticipoFranquicia.ChangeTracker.ChangeTrackingEnabled)
                {
                    AnticipoFranquicia.StartTracking();
                }
            }
        }
    
        private void FixupCompania(Compania previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Pagoes.Contains(this))
            {
                previousValue.Pagoes.Remove(this);
            }
    
            if (Compania != null)
            {
                if (!Compania.Pagoes.Contains(this))
                {
                    Compania.Pagoes.Add(this);
                }
    
                compania_id = Compania.id;
            }
            else if (!skipKeys)
            {
                compania_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compania")
                    && (ChangeTracker.OriginalValues["Compania"] == Compania))
                {
                    ChangeTracker.OriginalValues.Remove("Compania");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compania", previousValue);
                }
                if (Compania != null && !Compania.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compania.StartTracking();
                }
            }
        }

        #endregion
    }
}
