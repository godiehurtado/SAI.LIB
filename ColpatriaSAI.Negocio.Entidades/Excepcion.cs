//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LineaNegocio))]
    [KnownType(typeof(Localidad))]
    [KnownType(typeof(Producto))]
    [KnownType(typeof(Ramo))]
    [KnownType(typeof(TipoVehiculo))]
    [KnownType(typeof(Zona))]
    [KnownType(typeof(Compania))]
    [KnownType(typeof(Participante))]
    public partial class Excepcion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int Localidad_id
        {
            get { return _localidad_id; }
            set
            {
                if (_localidad_id != value)
                {
                    ChangeTracker.RecordOriginalValue("Localidad_id", _localidad_id);
                    if (!IsDeserializing)
                    {
                        if (Localidad != null && Localidad.id != value)
                        {
                            Localidad = null;
                        }
                    }
                    _localidad_id = value;
                    OnPropertyChanged("Localidad_id");
                }
            }
        }
        private int _localidad_id;
    
        [DataMember]
        public Nullable<int> localidad_de_id
        {
            get { return _localidad_de_id; }
            set
            {
                if (_localidad_de_id != value)
                {
                    ChangeTracker.RecordOriginalValue("localidad_de_id", _localidad_de_id);
                    if (!IsDeserializing)
                    {
                        if (Localidad1 != null && Localidad1.id != value)
                        {
                            Localidad1 = null;
                        }
                    }
                    _localidad_de_id = value;
                    OnPropertyChanged("localidad_de_id");
                }
            }
        }
        private Nullable<int> _localidad_de_id;
    
        [DataMember]
        public Nullable<int> compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    ChangeTracker.RecordOriginalValue("compania_id", _compania_id);
                    if (!IsDeserializing)
                    {
                        if (Compania != null && Compania.id != value)
                        {
                            Compania = null;
                        }
                    }
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private Nullable<int> _compania_id;
    
        [DataMember]
        public Nullable<int> lineaNegocio_id
        {
            get { return _lineaNegocio_id; }
            set
            {
                if (_lineaNegocio_id != value)
                {
                    ChangeTracker.RecordOriginalValue("lineaNegocio_id", _lineaNegocio_id);
                    if (!IsDeserializing)
                    {
                        if (LineaNegocio != null && LineaNegocio.id != value)
                        {
                            LineaNegocio = null;
                        }
                    }
                    _lineaNegocio_id = value;
                    OnPropertyChanged("lineaNegocio_id");
                }
            }
        }
        private Nullable<int> _lineaNegocio_id;
    
        [DataMember]
        public Nullable<int> ramo_id
        {
            get { return _ramo_id; }
            set
            {
                if (_ramo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("ramo_id", _ramo_id);
                    if (!IsDeserializing)
                    {
                        if (Ramo != null && Ramo.id != value)
                        {
                            Ramo = null;
                        }
                    }
                    _ramo_id = value;
                    OnPropertyChanged("ramo_id");
                }
            }
        }
        private Nullable<int> _ramo_id;
    
        [DataMember]
        public Nullable<int> producto_id
        {
            get { return _producto_id; }
            set
            {
                if (_producto_id != value)
                {
                    ChangeTracker.RecordOriginalValue("producto_id", _producto_id);
                    if (!IsDeserializing)
                    {
                        if (Producto != null && Producto.id != value)
                        {
                            Producto = null;
                        }
                    }
                    _producto_id = value;
                    OnPropertyChanged("producto_id");
                }
            }
        }
        private Nullable<int> _producto_id;
    
        [DataMember]
        public Nullable<int> participante_id
        {
            get { return _participante_id; }
            set
            {
                if (_participante_id != value)
                {
                    ChangeTracker.RecordOriginalValue("participante_id", _participante_id);
                    if (!IsDeserializing)
                    {
                        if (Participante != null && Participante.id != value)
                        {
                            Participante = null;
                        }
                    }
                    _participante_id = value;
                    OnPropertyChanged("participante_id");
                }
            }
        }
        private Nullable<int> _participante_id;
    
        [DataMember]
        public string clave
        {
            get { return _clave; }
            set
            {
                if (_clave != value)
                {
                    _clave = value;
                    OnPropertyChanged("clave");
                }
            }
        }
        private string _clave;
    
        [DataMember]
        public string negocio_id
        {
            get { return _negocio_id; }
            set
            {
                if (_negocio_id != value)
                {
                    _negocio_id = value;
                    OnPropertyChanged("negocio_id");
                }
            }
        }
        private string _negocio_id;
    
        [DataMember]
        public string poliza
        {
            get { return _poliza; }
            set
            {
                if (_poliza != value)
                {
                    _poliza = value;
                    OnPropertyChanged("poliza");
                }
            }
        }
        private string _poliza;
    
        [DataMember]
        public string codigoAgrupador
        {
            get { return _codigoAgrupador; }
            set
            {
                if (_codigoAgrupador != value)
                {
                    _codigoAgrupador = value;
                    OnPropertyChanged("codigoAgrupador");
                }
            }
        }
        private string _codigoAgrupador;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_ini
        {
            get { return _fecha_ini; }
            set
            {
                if (_fecha_ini != value)
                {
                    _fecha_ini = value;
                    OnPropertyChanged("fecha_ini");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_ini;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_fin
        {
            get { return _fecha_fin; }
            set
            {
                if (_fecha_fin != value)
                {
                    _fecha_fin = value;
                    OnPropertyChanged("fecha_fin");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_fin;
    
        [DataMember]
        public Nullable<int> Tipo
        {
            get { return _tipo; }
            set
            {
                if (_tipo != value)
                {
                    _tipo = value;
                    OnPropertyChanged("Tipo");
                }
            }
        }
        private Nullable<int> _tipo;
    
        [DataMember]
        public bool Estado
        {
            get { return _estado; }
            set
            {
                if (_estado != value)
                {
                    _estado = value;
                    OnPropertyChanged("Estado");
                }
            }
        }
        private bool _estado;
    
        [DataMember]
        public Nullable<double> Porcentaje
        {
            get { return _porcentaje; }
            set
            {
                if (_porcentaje != value)
                {
                    _porcentaje = value;
                    OnPropertyChanged("Porcentaje");
                }
            }
        }
        private Nullable<double> _porcentaje;
    
        [DataMember]
        public Nullable<int> zona_id
        {
            get { return _zona_id; }
            set
            {
                if (_zona_id != value)
                {
                    ChangeTracker.RecordOriginalValue("zona_id", _zona_id);
                    if (!IsDeserializing)
                    {
                        if (Zona != null && Zona.id != value)
                        {
                            Zona = null;
                        }
                    }
                    _zona_id = value;
                    OnPropertyChanged("zona_id");
                }
            }
        }
        private Nullable<int> _zona_id;
    
        [DataMember]
        public Nullable<int> tipoVehiculo_id
        {
            get { return _tipoVehiculo_id; }
            set
            {
                if (_tipoVehiculo_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoVehiculo_id", _tipoVehiculo_id);
                    if (!IsDeserializing)
                    {
                        if (TipoVehiculo != null && TipoVehiculo.id != value)
                        {
                            TipoVehiculo = null;
                        }
                    }
                    _tipoVehiculo_id = value;
                    OnPropertyChanged("tipoVehiculo_id");
                }
            }
        }
        private Nullable<int> _tipoVehiculo_id;
    
        [DataMember]
        public Nullable<bool> excepcion_recaudo
        {
            get { return _excepcion_recaudo; }
            set
            {
                if (_excepcion_recaudo != value)
                {
                    _excepcion_recaudo = value;
                    OnPropertyChanged("excepcion_recaudo");
                }
            }
        }
        private Nullable<bool> _excepcion_recaudo;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public LineaNegocio LineaNegocio
        {
            get { return _lineaNegocio; }
            set
            {
                if (!ReferenceEquals(_lineaNegocio, value))
                {
                    var previousValue = _lineaNegocio;
                    _lineaNegocio = value;
                    FixupLineaNegocio(previousValue);
                    OnNavigationPropertyChanged("LineaNegocio");
                }
            }
        }
        private LineaNegocio _lineaNegocio;
    
        [DataMember]
        public Localidad Localidad
        {
            get { return _localidad; }
            set
            {
                if (!ReferenceEquals(_localidad, value))
                {
                    var previousValue = _localidad;
                    _localidad = value;
                    FixupLocalidad(previousValue);
                    OnNavigationPropertyChanged("Localidad");
                }
            }
        }
        private Localidad _localidad;
    
        [DataMember]
        public Localidad Localidad1
        {
            get { return _localidad1; }
            set
            {
                if (!ReferenceEquals(_localidad1, value))
                {
                    var previousValue = _localidad1;
                    _localidad1 = value;
                    FixupLocalidad1(previousValue);
                    OnNavigationPropertyChanged("Localidad1");
                }
            }
        }
        private Localidad _localidad1;
    
        [DataMember]
        public Producto Producto
        {
            get { return _producto; }
            set
            {
                if (!ReferenceEquals(_producto, value))
                {
                    var previousValue = _producto;
                    _producto = value;
                    FixupProducto(previousValue);
                    OnNavigationPropertyChanged("Producto");
                }
            }
        }
        private Producto _producto;
    
        [DataMember]
        public Ramo Ramo
        {
            get { return _ramo; }
            set
            {
                if (!ReferenceEquals(_ramo, value))
                {
                    var previousValue = _ramo;
                    _ramo = value;
                    FixupRamo(previousValue);
                    OnNavigationPropertyChanged("Ramo");
                }
            }
        }
        private Ramo _ramo;
    
        [DataMember]
        public TipoVehiculo TipoVehiculo
        {
            get { return _tipoVehiculo; }
            set
            {
                if (!ReferenceEquals(_tipoVehiculo, value))
                {
                    var previousValue = _tipoVehiculo;
                    _tipoVehiculo = value;
                    FixupTipoVehiculo(previousValue);
                    OnNavigationPropertyChanged("TipoVehiculo");
                }
            }
        }
        private TipoVehiculo _tipoVehiculo;
    
        [DataMember]
        public Zona Zona
        {
            get { return _zona; }
            set
            {
                if (!ReferenceEquals(_zona, value))
                {
                    var previousValue = _zona;
                    _zona = value;
                    FixupZona(previousValue);
                    OnNavigationPropertyChanged("Zona");
                }
            }
        }
        private Zona _zona;
    
        [DataMember]
        public Compania Compania
        {
            get { return _compania; }
            set
            {
                if (!ReferenceEquals(_compania, value))
                {
                    var previousValue = _compania;
                    _compania = value;
                    FixupCompania(previousValue);
                    OnNavigationPropertyChanged("Compania");
                }
            }
        }
        private Compania _compania;
    
        [DataMember]
        public Participante Participante
        {
            get { return _participante; }
            set
            {
                if (!ReferenceEquals(_participante, value))
                {
                    var previousValue = _participante;
                    _participante = value;
                    FixupParticipante(previousValue);
                    OnNavigationPropertyChanged("Participante");
                }
            }
        }
        private Participante _participante;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LineaNegocio = null;
            Localidad = null;
            Localidad1 = null;
            Producto = null;
            Ramo = null;
            TipoVehiculo = null;
            Zona = null;
            Compania = null;
            Participante = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLineaNegocio(LineaNegocio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (LineaNegocio != null)
            {
                if (!LineaNegocio.Excepcions.Contains(this))
                {
                    LineaNegocio.Excepcions.Add(this);
                }
    
                lineaNegocio_id = LineaNegocio.id;
            }
            else if (!skipKeys)
            {
                lineaNegocio_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LineaNegocio")
                    && (ChangeTracker.OriginalValues["LineaNegocio"] == LineaNegocio))
                {
                    ChangeTracker.OriginalValues.Remove("LineaNegocio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LineaNegocio", previousValue);
                }
                if (LineaNegocio != null && !LineaNegocio.ChangeTracker.ChangeTrackingEnabled)
                {
                    LineaNegocio.StartTracking();
                }
            }
        }
    
        private void FixupLocalidad(Localidad previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Localidad != null)
            {
                if (!Localidad.Excepcions.Contains(this))
                {
                    Localidad.Excepcions.Add(this);
                }
    
                Localidad_id = Localidad.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Localidad")
                    && (ChangeTracker.OriginalValues["Localidad"] == Localidad))
                {
                    ChangeTracker.OriginalValues.Remove("Localidad");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Localidad", previousValue);
                }
                if (Localidad != null && !Localidad.ChangeTracker.ChangeTrackingEnabled)
                {
                    Localidad.StartTracking();
                }
            }
        }
    
        private void FixupLocalidad1(Localidad previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions1.Contains(this))
            {
                previousValue.Excepcions1.Remove(this);
            }
    
            if (Localidad1 != null)
            {
                if (!Localidad1.Excepcions1.Contains(this))
                {
                    Localidad1.Excepcions1.Add(this);
                }
    
                localidad_de_id = Localidad1.id;
            }
            else if (!skipKeys)
            {
                localidad_de_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Localidad1")
                    && (ChangeTracker.OriginalValues["Localidad1"] == Localidad1))
                {
                    ChangeTracker.OriginalValues.Remove("Localidad1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Localidad1", previousValue);
                }
                if (Localidad1 != null && !Localidad1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Localidad1.StartTracking();
                }
            }
        }
    
        private void FixupProducto(Producto previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Producto != null)
            {
                if (!Producto.Excepcions.Contains(this))
                {
                    Producto.Excepcions.Add(this);
                }
    
                producto_id = Producto.id;
            }
            else if (!skipKeys)
            {
                producto_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Producto")
                    && (ChangeTracker.OriginalValues["Producto"] == Producto))
                {
                    ChangeTracker.OriginalValues.Remove("Producto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Producto", previousValue);
                }
                if (Producto != null && !Producto.ChangeTracker.ChangeTrackingEnabled)
                {
                    Producto.StartTracking();
                }
            }
        }
    
        private void FixupRamo(Ramo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Ramo != null)
            {
                if (!Ramo.Excepcions.Contains(this))
                {
                    Ramo.Excepcions.Add(this);
                }
    
                ramo_id = Ramo.id;
            }
            else if (!skipKeys)
            {
                ramo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Ramo")
                    && (ChangeTracker.OriginalValues["Ramo"] == Ramo))
                {
                    ChangeTracker.OriginalValues.Remove("Ramo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Ramo", previousValue);
                }
                if (Ramo != null && !Ramo.ChangeTracker.ChangeTrackingEnabled)
                {
                    Ramo.StartTracking();
                }
            }
        }
    
        private void FixupTipoVehiculo(TipoVehiculo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (TipoVehiculo != null)
            {
                if (!TipoVehiculo.Excepcions.Contains(this))
                {
                    TipoVehiculo.Excepcions.Add(this);
                }
    
                tipoVehiculo_id = TipoVehiculo.id;
            }
            else if (!skipKeys)
            {
                tipoVehiculo_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoVehiculo")
                    && (ChangeTracker.OriginalValues["TipoVehiculo"] == TipoVehiculo))
                {
                    ChangeTracker.OriginalValues.Remove("TipoVehiculo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoVehiculo", previousValue);
                }
                if (TipoVehiculo != null && !TipoVehiculo.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoVehiculo.StartTracking();
                }
            }
        }
    
        private void FixupZona(Zona previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Zona != null)
            {
                if (!Zona.Excepcions.Contains(this))
                {
                    Zona.Excepcions.Add(this);
                }
    
                zona_id = Zona.id;
            }
            else if (!skipKeys)
            {
                zona_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Zona")
                    && (ChangeTracker.OriginalValues["Zona"] == Zona))
                {
                    ChangeTracker.OriginalValues.Remove("Zona");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Zona", previousValue);
                }
                if (Zona != null && !Zona.ChangeTracker.ChangeTrackingEnabled)
                {
                    Zona.StartTracking();
                }
            }
        }
    
        private void FixupCompania(Compania previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Compania != null)
            {
                if (!Compania.Excepcions.Contains(this))
                {
                    Compania.Excepcions.Add(this);
                }
    
                compania_id = Compania.id;
            }
            else if (!skipKeys)
            {
                compania_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compania")
                    && (ChangeTracker.OriginalValues["Compania"] == Compania))
                {
                    ChangeTracker.OriginalValues.Remove("Compania");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compania", previousValue);
                }
                if (Compania != null && !Compania.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compania.StartTracking();
                }
            }
        }
    
        private void FixupParticipante(Participante previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Excepcions.Contains(this))
            {
                previousValue.Excepcions.Remove(this);
            }
    
            if (Participante != null)
            {
                if (!Participante.Excepcions.Contains(this))
                {
                    Participante.Excepcions.Add(this);
                }
    
                participante_id = Participante.id;
            }
            else if (!skipKeys)
            {
                participante_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Participante")
                    && (ChangeTracker.OriginalValues["Participante"] == Participante))
                {
                    ChangeTracker.OriginalValues.Remove("Participante");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Participante", previousValue);
                }
                if (Participante != null && !Participante.ChangeTracker.ChangeTrackingEnabled)
                {
                    Participante.StartTracking();
                }
            }
        }

        #endregion
    }
}
