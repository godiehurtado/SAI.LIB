//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    public partial class VistaRanking: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int jerarquiaDetalle_id
        {
            get { return _jerarquiaDetalle_id; }
            set
            {
                if (_jerarquiaDetalle_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'jerarquiaDetalle_id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _jerarquiaDetalle_id = value;
                    OnPropertyChanged("jerarquiaDetalle_id");
                }
            }
        }
        private int _jerarquiaDetalle_id;
    
        [DataMember]
        public string jerarquia
        {
            get { return _jerarquia; }
            set
            {
                if (_jerarquia != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'jerarquia' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _jerarquia = value;
                    OnPropertyChanged("jerarquia");
                }
            }
        }
        private string _jerarquia;
    
        [DataMember]
        public string categoria
        {
            get { return _categoria; }
            set
            {
                if (_categoria != value)
                {
                    _categoria = value;
                    OnPropertyChanged("categoria");
                }
            }
        }
        private string _categoria;
    
        [DataMember]
        public string participante
        {
            get { return _participante; }
            set
            {
                if (_participante != value)
                {
                    _participante = value;
                    OnPropertyChanged("participante");
                }
            }
        }
        private string _participante;
    
        [DataMember]
        public string localidad
        {
            get { return _localidad; }
            set
            {
                if (_localidad != value)
                {
                    _localidad = value;
                    OnPropertyChanged("localidad");
                }
            }
        }
        private string _localidad;
    
        [DataMember]
        public Nullable<int> anio
        {
            get { return _anio; }
            set
            {
                if (_anio != value)
                {
                    _anio = value;
                    OnPropertyChanged("anio");
                }
            }
        }
        private Nullable<int> _anio;
    
        [DataMember]
        public Nullable<int> mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    _mes = value;
                    OnPropertyChanged("mes");
                }
            }
        }
        private Nullable<int> _mes;
    
        [DataMember]
        public Nullable<double> totalEvaluado
        {
            get { return _totalEvaluado; }
            set
            {
                if (_totalEvaluado != value)
                {
                    _totalEvaluado = value;
                    OnPropertyChanged("totalEvaluado");
                }
            }
        }
        private Nullable<double> _totalEvaluado;
    
        [DataMember]
        public Nullable<long> posicionRanking
        {
            get { return _posicionRanking; }
            set
            {
                if (_posicionRanking != value)
                {
                    _posicionRanking = value;
                    OnPropertyChanged("posicionRanking");
                }
            }
        }
        private Nullable<long> _posicionRanking;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
