//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SiniestralidadEsperada))]
    [KnownType(typeof(TipoConcurso))]
    [KnownType(typeof(EtapaProducto))]
    [KnownType(typeof(ParticipanteConcurso))]
    [KnownType(typeof(PersistenciaEsperada))]
    [KnownType(typeof(ProductoConcurso))]
    [KnownType(typeof(Segmento))]
    [KnownType(typeof(TopeMoneda))]
    [KnownType(typeof(Regla))]
    [KnownType(typeof(MonedaxNegocio))]
    public partial class Concurso: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_inicio
        {
            get { return _fecha_inicio; }
            set
            {
                if (_fecha_inicio != value)
                {
                    _fecha_inicio = value;
                    OnPropertyChanged("fecha_inicio");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_inicio;
    
        [DataMember]
        public Nullable<System.DateTime> fecha_fin
        {
            get { return _fecha_fin; }
            set
            {
                if (_fecha_fin != value)
                {
                    _fecha_fin = value;
                    OnPropertyChanged("fecha_fin");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_fin;
    
        [DataMember]
        public Nullable<int> tipoConcurso_id
        {
            get { return _tipoConcurso_id; }
            set
            {
                if (_tipoConcurso_id != value)
                {
                    ChangeTracker.RecordOriginalValue("tipoConcurso_id", _tipoConcurso_id);
                    if (!IsDeserializing)
                    {
                        if (TipoConcurso != null && TipoConcurso.id != value)
                        {
                            TipoConcurso = null;
                        }
                    }
                    _tipoConcurso_id = value;
                    OnPropertyChanged("tipoConcurso_id");
                }
            }
        }
        private Nullable<int> _tipoConcurso_id;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    _descripcion = value;
                    OnPropertyChanged("descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public Nullable<int> segmento_id
        {
            get { return _segmento_id; }
            set
            {
                if (_segmento_id != value)
                {
                    ChangeTracker.RecordOriginalValue("segmento_id", _segmento_id);
                    if (!IsDeserializing)
                    {
                        if (Segmento != null && Segmento.id != value)
                        {
                            Segmento = null;
                        }
                    }
                    _segmento_id = value;
                    OnPropertyChanged("segmento_id");
                }
            }
        }
        private Nullable<int> _segmento_id;
    
        [DataMember]
        public Nullable<bool> principal
        {
            get { return _principal; }
            set
            {
                if (_principal != value)
                {
                    _principal = value;
                    OnPropertyChanged("principal");
                }
            }
        }
        private Nullable<bool> _principal;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SiniestralidadEsperada> SiniestralidadEsperadas
        {
            get
            {
                if (_siniestralidadEsperadas == null)
                {
                    _siniestralidadEsperadas = new TrackableCollection<SiniestralidadEsperada>();
                    _siniestralidadEsperadas.CollectionChanged += FixupSiniestralidadEsperadas;
                }
                return _siniestralidadEsperadas;
            }
            set
            {
                if (!ReferenceEquals(_siniestralidadEsperadas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_siniestralidadEsperadas != null)
                    {
                        _siniestralidadEsperadas.CollectionChanged -= FixupSiniestralidadEsperadas;
                    }
                    _siniestralidadEsperadas = value;
                    if (_siniestralidadEsperadas != null)
                    {
                        _siniestralidadEsperadas.CollectionChanged += FixupSiniestralidadEsperadas;
                    }
                    OnNavigationPropertyChanged("SiniestralidadEsperadas");
                }
            }
        }
        private TrackableCollection<SiniestralidadEsperada> _siniestralidadEsperadas;
    
        [DataMember]
        public TipoConcurso TipoConcurso
        {
            get { return _tipoConcurso; }
            set
            {
                if (!ReferenceEquals(_tipoConcurso, value))
                {
                    var previousValue = _tipoConcurso;
                    _tipoConcurso = value;
                    FixupTipoConcurso(previousValue);
                    OnNavigationPropertyChanged("TipoConcurso");
                }
            }
        }
        private TipoConcurso _tipoConcurso;
    
        [DataMember]
        public TrackableCollection<EtapaProducto> EtapaProductoes
        {
            get
            {
                if (_etapaProductoes == null)
                {
                    _etapaProductoes = new TrackableCollection<EtapaProducto>();
                    _etapaProductoes.CollectionChanged += FixupEtapaProductoes;
                }
                return _etapaProductoes;
            }
            set
            {
                if (!ReferenceEquals(_etapaProductoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_etapaProductoes != null)
                    {
                        _etapaProductoes.CollectionChanged -= FixupEtapaProductoes;
                    }
                    _etapaProductoes = value;
                    if (_etapaProductoes != null)
                    {
                        _etapaProductoes.CollectionChanged += FixupEtapaProductoes;
                    }
                    OnNavigationPropertyChanged("EtapaProductoes");
                }
            }
        }
        private TrackableCollection<EtapaProducto> _etapaProductoes;
    
        [DataMember]
        public TrackableCollection<ParticipanteConcurso> ParticipanteConcursoes
        {
            get
            {
                if (_participanteConcursoes == null)
                {
                    _participanteConcursoes = new TrackableCollection<ParticipanteConcurso>();
                    _participanteConcursoes.CollectionChanged += FixupParticipanteConcursoes;
                }
                return _participanteConcursoes;
            }
            set
            {
                if (!ReferenceEquals(_participanteConcursoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_participanteConcursoes != null)
                    {
                        _participanteConcursoes.CollectionChanged -= FixupParticipanteConcursoes;
                    }
                    _participanteConcursoes = value;
                    if (_participanteConcursoes != null)
                    {
                        _participanteConcursoes.CollectionChanged += FixupParticipanteConcursoes;
                    }
                    OnNavigationPropertyChanged("ParticipanteConcursoes");
                }
            }
        }
        private TrackableCollection<ParticipanteConcurso> _participanteConcursoes;
    
        [DataMember]
        public TrackableCollection<PersistenciaEsperada> PersistenciaEsperadas
        {
            get
            {
                if (_persistenciaEsperadas == null)
                {
                    _persistenciaEsperadas = new TrackableCollection<PersistenciaEsperada>();
                    _persistenciaEsperadas.CollectionChanged += FixupPersistenciaEsperadas;
                }
                return _persistenciaEsperadas;
            }
            set
            {
                if (!ReferenceEquals(_persistenciaEsperadas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_persistenciaEsperadas != null)
                    {
                        _persistenciaEsperadas.CollectionChanged -= FixupPersistenciaEsperadas;
                    }
                    _persistenciaEsperadas = value;
                    if (_persistenciaEsperadas != null)
                    {
                        _persistenciaEsperadas.CollectionChanged += FixupPersistenciaEsperadas;
                    }
                    OnNavigationPropertyChanged("PersistenciaEsperadas");
                }
            }
        }
        private TrackableCollection<PersistenciaEsperada> _persistenciaEsperadas;
    
        [DataMember]
        public TrackableCollection<ProductoConcurso> ProductoConcursoes
        {
            get
            {
                if (_productoConcursoes == null)
                {
                    _productoConcursoes = new TrackableCollection<ProductoConcurso>();
                    _productoConcursoes.CollectionChanged += FixupProductoConcursoes;
                }
                return _productoConcursoes;
            }
            set
            {
                if (!ReferenceEquals(_productoConcursoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_productoConcursoes != null)
                    {
                        _productoConcursoes.CollectionChanged -= FixupProductoConcursoes;
                    }
                    _productoConcursoes = value;
                    if (_productoConcursoes != null)
                    {
                        _productoConcursoes.CollectionChanged += FixupProductoConcursoes;
                    }
                    OnNavigationPropertyChanged("ProductoConcursoes");
                }
            }
        }
        private TrackableCollection<ProductoConcurso> _productoConcursoes;
    
        [DataMember]
        public Segmento Segmento
        {
            get { return _segmento; }
            set
            {
                if (!ReferenceEquals(_segmento, value))
                {
                    var previousValue = _segmento;
                    _segmento = value;
                    FixupSegmento(previousValue);
                    OnNavigationPropertyChanged("Segmento");
                }
            }
        }
        private Segmento _segmento;
    
        [DataMember]
        public TrackableCollection<TopeMoneda> TopeMonedas
        {
            get
            {
                if (_topeMonedas == null)
                {
                    _topeMonedas = new TrackableCollection<TopeMoneda>();
                    _topeMonedas.CollectionChanged += FixupTopeMonedas;
                }
                return _topeMonedas;
            }
            set
            {
                if (!ReferenceEquals(_topeMonedas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_topeMonedas != null)
                    {
                        _topeMonedas.CollectionChanged -= FixupTopeMonedas;
                    }
                    _topeMonedas = value;
                    if (_topeMonedas != null)
                    {
                        _topeMonedas.CollectionChanged += FixupTopeMonedas;
                    }
                    OnNavigationPropertyChanged("TopeMonedas");
                }
            }
        }
        private TrackableCollection<TopeMoneda> _topeMonedas;
    
        [DataMember]
        public TrackableCollection<Regla> Reglas
        {
            get
            {
                if (_reglas == null)
                {
                    _reglas = new TrackableCollection<Regla>();
                    _reglas.CollectionChanged += FixupReglas;
                }
                return _reglas;
            }
            set
            {
                if (!ReferenceEquals(_reglas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_reglas != null)
                    {
                        _reglas.CollectionChanged -= FixupReglas;
                    }
                    _reglas = value;
                    if (_reglas != null)
                    {
                        _reglas.CollectionChanged += FixupReglas;
                    }
                    OnNavigationPropertyChanged("Reglas");
                }
            }
        }
        private TrackableCollection<Regla> _reglas;
    
        [DataMember]
        public TrackableCollection<MonedaxNegocio> MonedaxNegocios
        {
            get
            {
                if (_monedaxNegocios == null)
                {
                    _monedaxNegocios = new TrackableCollection<MonedaxNegocio>();
                    _monedaxNegocios.CollectionChanged += FixupMonedaxNegocios;
                }
                return _monedaxNegocios;
            }
            set
            {
                if (!ReferenceEquals(_monedaxNegocios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_monedaxNegocios != null)
                    {
                        _monedaxNegocios.CollectionChanged -= FixupMonedaxNegocios;
                    }
                    _monedaxNegocios = value;
                    if (_monedaxNegocios != null)
                    {
                        _monedaxNegocios.CollectionChanged += FixupMonedaxNegocios;
                    }
                    OnNavigationPropertyChanged("MonedaxNegocios");
                }
            }
        }
        private TrackableCollection<MonedaxNegocio> _monedaxNegocios;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SiniestralidadEsperadas.Clear();
            TipoConcurso = null;
            EtapaProductoes.Clear();
            ParticipanteConcursoes.Clear();
            PersistenciaEsperadas.Clear();
            ProductoConcursoes.Clear();
            Segmento = null;
            TopeMonedas.Clear();
            Reglas.Clear();
            MonedaxNegocios.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupTipoConcurso(TipoConcurso previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Concursoes.Contains(this))
            {
                previousValue.Concursoes.Remove(this);
            }
    
            if (TipoConcurso != null)
            {
                if (!TipoConcurso.Concursoes.Contains(this))
                {
                    TipoConcurso.Concursoes.Add(this);
                }
    
                tipoConcurso_id = TipoConcurso.id;
            }
            else if (!skipKeys)
            {
                tipoConcurso_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TipoConcurso")
                    && (ChangeTracker.OriginalValues["TipoConcurso"] == TipoConcurso))
                {
                    ChangeTracker.OriginalValues.Remove("TipoConcurso");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TipoConcurso", previousValue);
                }
                if (TipoConcurso != null && !TipoConcurso.ChangeTracker.ChangeTrackingEnabled)
                {
                    TipoConcurso.StartTracking();
                }
            }
        }
    
        private void FixupSegmento(Segmento previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Concursoes.Contains(this))
            {
                previousValue.Concursoes.Remove(this);
            }
    
            if (Segmento != null)
            {
                if (!Segmento.Concursoes.Contains(this))
                {
                    Segmento.Concursoes.Add(this);
                }
    
                segmento_id = Segmento.id;
            }
            else if (!skipKeys)
            {
                segmento_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Segmento")
                    && (ChangeTracker.OriginalValues["Segmento"] == Segmento))
                {
                    ChangeTracker.OriginalValues.Remove("Segmento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Segmento", previousValue);
                }
                if (Segmento != null && !Segmento.ChangeTracker.ChangeTrackingEnabled)
                {
                    Segmento.StartTracking();
                }
            }
        }
    
        private void FixupSiniestralidadEsperadas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SiniestralidadEsperada item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SiniestralidadEsperadas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SiniestralidadEsperada item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SiniestralidadEsperadas", item);
                    }
                }
            }
        }
    
        private void FixupEtapaProductoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EtapaProducto item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("EtapaProductoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EtapaProducto item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("EtapaProductoes", item);
                    }
                }
            }
        }
    
        private void FixupParticipanteConcursoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ParticipanteConcurso item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ParticipanteConcursoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ParticipanteConcurso item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ParticipanteConcursoes", item);
                    }
                }
            }
        }
    
        private void FixupPersistenciaEsperadas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PersistenciaEsperada item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PersistenciaEsperadas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PersistenciaEsperada item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PersistenciaEsperadas", item);
                    }
                }
            }
        }
    
        private void FixupProductoConcursoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductoConcurso item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductoConcursoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductoConcurso item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductoConcursoes", item);
                    }
                }
            }
        }
    
        private void FixupTopeMonedas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TopeMoneda item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TopeMonedas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TopeMoneda item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TopeMonedas", item);
                    }
                }
            }
        }
    
        private void FixupReglas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Regla item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Reglas", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Regla item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Reglas", item);
                    }
                }
            }
        }
    
        private void FixupMonedaxNegocios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MonedaxNegocio item in e.NewItems)
                {
                    item.Concurso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MonedaxNegocios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MonedaxNegocio item in e.OldItems)
                {
                    if (ReferenceEquals(item.Concurso, this))
                    {
                        item.Concurso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MonedaxNegocios", item);
                    }
                }
            }
        }

        #endregion
    }
}
