//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AUT_Ejecucion_Proceso))]
    [KnownType(typeof(AUT_Proceso_Dependencia))]
    [KnownType(typeof(AUT_Proceso_ETL))]
    [KnownType(typeof(AUT_Proceso_Extraccion))]
    public partial class AUT_Proceso: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string nombre_proceso
        {
            get { return _nombre_proceso; }
            set
            {
                if (_nombre_proceso != value)
                {
                    _nombre_proceso = value;
                    OnPropertyChanged("nombre_proceso");
                }
            }
        }
        private string _nombre_proceso;
    
        [DataMember]
        public int tipo_proceso_id
        {
            get { return _tipo_proceso_id; }
            set
            {
                if (_tipo_proceso_id != value)
                {
                    _tipo_proceso_id = value;
                    OnPropertyChanged("tipo_proceso_id");
                }
            }
        }
        private int _tipo_proceso_id;
    
        [DataMember]
        public Nullable<int> max_reintentos
        {
            get { return _max_reintentos; }
            set
            {
                if (_max_reintentos != value)
                {
                    _max_reintentos = value;
                    OnPropertyChanged("max_reintentos");
                }
            }
        }
        private Nullable<int> _max_reintentos;
    
        [DataMember]
        public Nullable<int> max_tiempo_ejecucion
        {
            get { return _max_tiempo_ejecucion; }
            set
            {
                if (_max_tiempo_ejecucion != value)
                {
                    _max_tiempo_ejecucion = value;
                    OnPropertyChanged("max_tiempo_ejecucion");
                }
            }
        }
        private Nullable<int> _max_tiempo_ejecucion;
    
        [DataMember]
        public Nullable<int> compania_id
        {
            get { return _compania_id; }
            set
            {
                if (_compania_id != value)
                {
                    _compania_id = value;
                    OnPropertyChanged("compania_id");
                }
            }
        }
        private Nullable<int> _compania_id;
    
        [DataMember]
        public Nullable<int> requiere_backup
        {
            get { return _requiere_backup; }
            set
            {
                if (_requiere_backup != value)
                {
                    _requiere_backup = value;
                    OnPropertyChanged("requiere_backup");
                }
            }
        }
        private Nullable<int> _requiere_backup;
    
        [DataMember]
        public string tabla
        {
            get { return _tabla; }
            set
            {
                if (_tabla != value)
                {
                    _tabla = value;
                    OnPropertyChanged("tabla");
                }
            }
        }
        private string _tabla;
    
        [DataMember]
        public Nullable<int> habilitado
        {
            get { return _habilitado; }
            set
            {
                if (_habilitado != value)
                {
                    _habilitado = value;
                    OnPropertyChanged("habilitado");
                }
            }
        }
        private Nullable<int> _habilitado;
    
        [DataMember]
        public string notificar_inicio
        {
            get { return _notificar_inicio; }
            set
            {
                if (_notificar_inicio != value)
                {
                    _notificar_inicio = value;
                    OnPropertyChanged("notificar_inicio");
                }
            }
        }
        private string _notificar_inicio;
    
        [DataMember]
        public string notificar_fin
        {
            get { return _notificar_fin; }
            set
            {
                if (_notificar_fin != value)
                {
                    _notificar_fin = value;
                    OnPropertyChanged("notificar_fin");
                }
            }
        }
        private string _notificar_fin;
    
        [DataMember]
        public string notificar_error
        {
            get { return _notificar_error; }
            set
            {
                if (_notificar_error != value)
                {
                    _notificar_error = value;
                    OnPropertyChanged("notificar_error");
                }
            }
        }
        private string _notificar_error;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<AUT_Ejecucion_Proceso> AUT_Ejecucion_Proceso
        {
            get
            {
                if (_aUT_Ejecucion_Proceso == null)
                {
                    _aUT_Ejecucion_Proceso = new TrackableCollection<AUT_Ejecucion_Proceso>();
                    _aUT_Ejecucion_Proceso.CollectionChanged += FixupAUT_Ejecucion_Proceso;
                }
                return _aUT_Ejecucion_Proceso;
            }
            set
            {
                if (!ReferenceEquals(_aUT_Ejecucion_Proceso, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aUT_Ejecucion_Proceso != null)
                    {
                        _aUT_Ejecucion_Proceso.CollectionChanged -= FixupAUT_Ejecucion_Proceso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AUT_Ejecucion_Proceso item in _aUT_Ejecucion_Proceso)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aUT_Ejecucion_Proceso = value;
                    if (_aUT_Ejecucion_Proceso != null)
                    {
                        _aUT_Ejecucion_Proceso.CollectionChanged += FixupAUT_Ejecucion_Proceso;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AUT_Ejecucion_Proceso item in _aUT_Ejecucion_Proceso)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AUT_Ejecucion_Proceso");
                }
            }
        }
        private TrackableCollection<AUT_Ejecucion_Proceso> _aUT_Ejecucion_Proceso;
    
        [DataMember]
        public TrackableCollection<AUT_Proceso_Dependencia> AUT_Proceso_Dependencia
        {
            get
            {
                if (_aUT_Proceso_Dependencia == null)
                {
                    _aUT_Proceso_Dependencia = new TrackableCollection<AUT_Proceso_Dependencia>();
                    _aUT_Proceso_Dependencia.CollectionChanged += FixupAUT_Proceso_Dependencia;
                }
                return _aUT_Proceso_Dependencia;
            }
            set
            {
                if (!ReferenceEquals(_aUT_Proceso_Dependencia, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aUT_Proceso_Dependencia != null)
                    {
                        _aUT_Proceso_Dependencia.CollectionChanged -= FixupAUT_Proceso_Dependencia;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AUT_Proceso_Dependencia item in _aUT_Proceso_Dependencia)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aUT_Proceso_Dependencia = value;
                    if (_aUT_Proceso_Dependencia != null)
                    {
                        _aUT_Proceso_Dependencia.CollectionChanged += FixupAUT_Proceso_Dependencia;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AUT_Proceso_Dependencia item in _aUT_Proceso_Dependencia)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AUT_Proceso_Dependencia");
                }
            }
        }
        private TrackableCollection<AUT_Proceso_Dependencia> _aUT_Proceso_Dependencia;
    
        [DataMember]
        public TrackableCollection<AUT_Proceso_Dependencia> AUT_Proceso_Dependencia1
        {
            get
            {
                if (_aUT_Proceso_Dependencia1 == null)
                {
                    _aUT_Proceso_Dependencia1 = new TrackableCollection<AUT_Proceso_Dependencia>();
                    _aUT_Proceso_Dependencia1.CollectionChanged += FixupAUT_Proceso_Dependencia1;
                }
                return _aUT_Proceso_Dependencia1;
            }
            set
            {
                if (!ReferenceEquals(_aUT_Proceso_Dependencia1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_aUT_Proceso_Dependencia1 != null)
                    {
                        _aUT_Proceso_Dependencia1.CollectionChanged -= FixupAUT_Proceso_Dependencia1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (AUT_Proceso_Dependencia item in _aUT_Proceso_Dependencia1)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _aUT_Proceso_Dependencia1 = value;
                    if (_aUT_Proceso_Dependencia1 != null)
                    {
                        _aUT_Proceso_Dependencia1.CollectionChanged += FixupAUT_Proceso_Dependencia1;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (AUT_Proceso_Dependencia item in _aUT_Proceso_Dependencia1)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("AUT_Proceso_Dependencia1");
                }
            }
        }
        private TrackableCollection<AUT_Proceso_Dependencia> _aUT_Proceso_Dependencia1;
    
        [DataMember]
        public AUT_Proceso_ETL AUT_Proceso_ETL
        {
            get { return _aUT_Proceso_ETL; }
            set
            {
                if (!ReferenceEquals(_aUT_Proceso_ETL, value))
                {
                    var previousValue = _aUT_Proceso_ETL;
                    _aUT_Proceso_ETL = value;
                    FixupAUT_Proceso_ETL(previousValue);
                    OnNavigationPropertyChanged("AUT_Proceso_ETL");
                }
            }
        }
        private AUT_Proceso_ETL _aUT_Proceso_ETL;
    
        [DataMember]
        public AUT_Proceso_Extraccion AUT_Proceso_Extraccion
        {
            get { return _aUT_Proceso_Extraccion; }
            set
            {
                if (!ReferenceEquals(_aUT_Proceso_Extraccion, value))
                {
                    var previousValue = _aUT_Proceso_Extraccion;
                    _aUT_Proceso_Extraccion = value;
                    FixupAUT_Proceso_Extraccion(previousValue);
                    OnNavigationPropertyChanged("AUT_Proceso_Extraccion");
                }
            }
        }
        private AUT_Proceso_Extraccion _aUT_Proceso_Extraccion;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AUT_Ejecucion_Proceso.Clear();
            AUT_Proceso_Dependencia.Clear();
            AUT_Proceso_Dependencia1.Clear();
            AUT_Proceso_ETL = null;
            AUT_Proceso_Extraccion = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupAUT_Proceso_ETL(AUT_Proceso_ETL previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (AUT_Proceso_ETL != null)
            {
                ChangeTracker.ObjectStateChanging += AUT_Proceso_ETL.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.AUT_Proceso, this))
            {
                previousValue.AUT_Proceso = null;
            }
    
            if (AUT_Proceso_ETL != null)
            {
                AUT_Proceso_ETL.AUT_Proceso = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AUT_Proceso_ETL")
                    && (ChangeTracker.OriginalValues["AUT_Proceso_ETL"] == AUT_Proceso_ETL))
                {
                    ChangeTracker.OriginalValues.Remove("AUT_Proceso_ETL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AUT_Proceso_ETL", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (AUT_Proceso_ETL != null && !AUT_Proceso_ETL.ChangeTracker.ChangeTrackingEnabled)
                {
                    AUT_Proceso_ETL.StartTracking();
                }
            }
        }
    
        private void FixupAUT_Proceso_Extraccion(AUT_Proceso_Extraccion previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (AUT_Proceso_Extraccion != null)
            {
                ChangeTracker.ObjectStateChanging += AUT_Proceso_Extraccion.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.AUT_Proceso, this))
            {
                previousValue.AUT_Proceso = null;
            }
    
            if (AUT_Proceso_Extraccion != null)
            {
                AUT_Proceso_Extraccion.AUT_Proceso = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AUT_Proceso_Extraccion")
                    && (ChangeTracker.OriginalValues["AUT_Proceso_Extraccion"] == AUT_Proceso_Extraccion))
                {
                    ChangeTracker.OriginalValues.Remove("AUT_Proceso_Extraccion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AUT_Proceso_Extraccion", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (AUT_Proceso_Extraccion != null && !AUT_Proceso_Extraccion.ChangeTracker.ChangeTrackingEnabled)
                {
                    AUT_Proceso_Extraccion.StartTracking();
                }
            }
        }
    
        private void FixupAUT_Ejecucion_Proceso(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AUT_Ejecucion_Proceso item in e.NewItems)
                {
                    item.AUT_Proceso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AUT_Ejecucion_Proceso", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AUT_Ejecucion_Proceso item in e.OldItems)
                {
                    if (ReferenceEquals(item.AUT_Proceso, this))
                    {
                        item.AUT_Proceso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AUT_Ejecucion_Proceso", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAUT_Proceso_Dependencia(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AUT_Proceso_Dependencia item in e.NewItems)
                {
                    item.AUT_Proceso = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AUT_Proceso_Dependencia", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AUT_Proceso_Dependencia item in e.OldItems)
                {
                    if (ReferenceEquals(item.AUT_Proceso, this))
                    {
                        item.AUT_Proceso = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AUT_Proceso_Dependencia", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupAUT_Proceso_Dependencia1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AUT_Proceso_Dependencia item in e.NewItems)
                {
                    item.AUT_Proceso1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AUT_Proceso_Dependencia1", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AUT_Proceso_Dependencia item in e.OldItems)
                {
                    if (ReferenceEquals(item.AUT_Proceso1, this))
                    {
                        item.AUT_Proceso1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AUT_Proceso_Dependencia1", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
