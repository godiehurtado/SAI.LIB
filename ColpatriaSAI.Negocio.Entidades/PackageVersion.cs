//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ColpatriaSAI.Negocio.Entidades
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Package))]
    [KnownType(typeof(PackageLog))]
    public partial class PackageVersion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PackageVersionID
        {
            get { return _packageVersionID; }
            set
            {
                if (_packageVersionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PackageVersionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _packageVersionID = value;
                    OnPropertyChanged("PackageVersionID");
                }
            }
        }
        private int _packageVersionID;
    
        [DataMember]
        public System.Guid PackageVersionGUID
        {
            get { return _packageVersionGUID; }
            set
            {
                if (_packageVersionGUID != value)
                {
                    _packageVersionGUID = value;
                    OnPropertyChanged("PackageVersionGUID");
                }
            }
        }
        private System.Guid _packageVersionGUID;
    
        [DataMember]
        public int PackageID
        {
            get { return _packageID; }
            set
            {
                if (_packageID != value)
                {
                    ChangeTracker.RecordOriginalValue("PackageID", _packageID);
                    if (!IsDeserializing)
                    {
                        if (Package != null && Package.PackageID != value)
                        {
                            Package = null;
                        }
                    }
                    _packageID = value;
                    OnPropertyChanged("PackageID");
                }
            }
        }
        private int _packageID;
    
        [DataMember]
        public int VersionMajor
        {
            get { return _versionMajor; }
            set
            {
                if (_versionMajor != value)
                {
                    _versionMajor = value;
                    OnPropertyChanged("VersionMajor");
                }
            }
        }
        private int _versionMajor;
    
        [DataMember]
        public int VersionMinor
        {
            get { return _versionMinor; }
            set
            {
                if (_versionMinor != value)
                {
                    _versionMinor = value;
                    OnPropertyChanged("VersionMinor");
                }
            }
        }
        private int _versionMinor;
    
        [DataMember]
        public int VersionBuild
        {
            get { return _versionBuild; }
            set
            {
                if (_versionBuild != value)
                {
                    _versionBuild = value;
                    OnPropertyChanged("VersionBuild");
                }
            }
        }
        private int _versionBuild;
    
        [DataMember]
        public string VersionComment
        {
            get { return _versionComment; }
            set
            {
                if (_versionComment != value)
                {
                    _versionComment = value;
                    OnPropertyChanged("VersionComment");
                }
            }
        }
        private string _versionComment;
    
        [DataMember]
        public System.DateTime EnteredDateTime
        {
            get { return _enteredDateTime; }
            set
            {
                if (_enteredDateTime != value)
                {
                    _enteredDateTime = value;
                    OnPropertyChanged("EnteredDateTime");
                }
            }
        }
        private System.DateTime _enteredDateTime;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Package Package
        {
            get { return _package; }
            set
            {
                if (!ReferenceEquals(_package, value))
                {
                    var previousValue = _package;
                    _package = value;
                    FixupPackage(previousValue);
                    OnNavigationPropertyChanged("Package");
                }
            }
        }
        private Package _package;
    
        [DataMember]
        public TrackableCollection<PackageLog> PackageLogs
        {
            get
            {
                if (_packageLogs == null)
                {
                    _packageLogs = new TrackableCollection<PackageLog>();
                    _packageLogs.CollectionChanged += FixupPackageLogs;
                }
                return _packageLogs;
            }
            set
            {
                if (!ReferenceEquals(_packageLogs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_packageLogs != null)
                    {
                        _packageLogs.CollectionChanged -= FixupPackageLogs;
                    }
                    _packageLogs = value;
                    if (_packageLogs != null)
                    {
                        _packageLogs.CollectionChanged += FixupPackageLogs;
                    }
                    OnNavigationPropertyChanged("PackageLogs");
                }
            }
        }
        private TrackableCollection<PackageLog> _packageLogs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Package = null;
            PackageLogs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupPackage(Package previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PackageVersions.Contains(this))
            {
                previousValue.PackageVersions.Remove(this);
            }
    
            if (Package != null)
            {
                if (!Package.PackageVersions.Contains(this))
                {
                    Package.PackageVersions.Add(this);
                }
    
                PackageID = Package.PackageID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Package")
                    && (ChangeTracker.OriginalValues["Package"] == Package))
                {
                    ChangeTracker.OriginalValues.Remove("Package");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Package", previousValue);
                }
                if (Package != null && !Package.ChangeTracker.ChangeTrackingEnabled)
                {
                    Package.StartTracking();
                }
            }
        }
    
        private void FixupPackageLogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PackageLog item in e.NewItems)
                {
                    item.PackageVersion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PackageLogs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PackageLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.PackageVersion, this))
                    {
                        item.PackageVersion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PackageLogs", item);
                    }
                }
            }
        }

        #endregion
    }
}
